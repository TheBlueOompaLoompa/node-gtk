/**
 * NM-1.0
 */

/// <reference types="node" />
/// <reference path="Gio-2.0.d.ts" />
/// <reference path="GObject-2.0.d.ts" />
/// <reference path="GLib-2.0.d.ts" />

declare namespace NM {

export enum TODO_80211Mode {
    UNKNOWN,
    ADHOC,
    INFRA,
    AP,
    MESH,
}
export enum ActiveConnectionState {
    UNKNOWN,
    ACTIVATING,
    ACTIVATED,
    DEACTIVATING,
    DEACTIVATED,
}
export enum ActiveConnectionStateReason {
    UNKNOWN,
    NONE,
    USER_DISCONNECTED,
    DEVICE_DISCONNECTED,
    SERVICE_STOPPED,
    IP_CONFIG_INVALID,
    CONNECT_TIMEOUT,
    SERVICE_START_TIMEOUT,
    SERVICE_START_FAILED,
    NO_SECRETS,
    LOGIN_FAILED,
    CONNECTION_REMOVED,
    DEPENDENCY_FAILED,
    DEVICE_REALIZE_FAILED,
    DEVICE_REMOVED,
}
export enum AgentManagerError {
    FAILED,
    PERMISSIONDENIED,
    INVALIDIDENTIFIER,
    NOTREGISTERED,
    NOSECRETS,
    USERCANCELED,
}
export enum Capability {
    TEAM,
    OVS,
}
export enum ClientError {
    FAILED,
    MANAGER_NOT_RUNNING,
    OBJECT_CREATION_FAILED,
}
export enum ClientPermission {
    NONE,
    ENABLE_DISABLE_NETWORK,
    ENABLE_DISABLE_WIFI,
    ENABLE_DISABLE_WWAN,
    ENABLE_DISABLE_WIMAX,
    SLEEP_WAKE,
    NETWORK_CONTROL,
    WIFI_SHARE_PROTECTED,
    WIFI_SHARE_OPEN,
    SETTINGS_MODIFY_SYSTEM,
    SETTINGS_MODIFY_OWN,
    SETTINGS_MODIFY_HOSTNAME,
    SETTINGS_MODIFY_GLOBAL_DNS,
    RELOAD,
    CHECKPOINT_ROLLBACK,
    ENABLE_DISABLE_STATISTICS,
    ENABLE_DISABLE_CONNECTIVITY_CHECK,
    WIFI_SCAN,
    LAST,
}
export enum ClientPermissionResult {
    UNKNOWN,
    YES,
    AUTH,
    NO,
}
export enum ConnectionError {
    FAILED,
    SETTINGNOTFOUND,
    PROPERTYNOTFOUND,
    PROPERTYNOTSECRET,
    MISSINGSETTING,
    INVALIDSETTING,
    MISSINGPROPERTY,
    INVALIDPROPERTY,
}
export enum ConnectionMultiConnect {
    DEFAULT,
    SINGLE,
    MANUAL_MULTIPLE,
    MULTIPLE,
}
export enum ConnectivityState {
    UNKNOWN,
    NONE,
    PORTAL,
    LIMITED,
    FULL,
}
export enum CryptoError {
    FAILED,
    INVALID_DATA,
    INVALID_PASSWORD,
    UNKNOWN_CIPHER,
    DECRYPTION_FAILED,
    ENCRYPTION_FAILED,
}
export enum DeviceError {
    FAILED,
    CREATIONFAILED,
    INVALIDCONNECTION,
    INCOMPATIBLECONNECTION,
    NOTACTIVE,
    NOTSOFTWARE,
    NOTALLOWED,
    SPECIFICOBJECTNOTFOUND,
    VERSIONIDMISMATCH,
    MISSINGDEPENDENCIES,
    INVALIDARGUMENT,
}
export enum DeviceState {
    UNKNOWN,
    UNMANAGED,
    UNAVAILABLE,
    DISCONNECTED,
    PREPARE,
    CONFIG,
    NEED_AUTH,
    IP_CONFIG,
    IP_CHECK,
    SECONDARIES,
    ACTIVATED,
    DEACTIVATING,
    FAILED,
}
export enum DeviceStateReason {
    NONE,
    UNKNOWN,
    NOW_MANAGED,
    NOW_UNMANAGED,
    CONFIG_FAILED,
    IP_CONFIG_UNAVAILABLE,
    IP_CONFIG_EXPIRED,
    NO_SECRETS,
    SUPPLICANT_DISCONNECT,
    SUPPLICANT_CONFIG_FAILED,
    SUPPLICANT_FAILED,
    SUPPLICANT_TIMEOUT,
    PPP_START_FAILED,
    PPP_DISCONNECT,
    PPP_FAILED,
    DHCP_START_FAILED,
    DHCP_ERROR,
    DHCP_FAILED,
    SHARED_START_FAILED,
    SHARED_FAILED,
    AUTOIP_START_FAILED,
    AUTOIP_ERROR,
    AUTOIP_FAILED,
    MODEM_BUSY,
    MODEM_NO_DIAL_TONE,
    MODEM_NO_CARRIER,
    MODEM_DIAL_TIMEOUT,
    MODEM_DIAL_FAILED,
    MODEM_INIT_FAILED,
    GSM_APN_FAILED,
    GSM_REGISTRATION_NOT_SEARCHING,
    GSM_REGISTRATION_DENIED,
    GSM_REGISTRATION_TIMEOUT,
    GSM_REGISTRATION_FAILED,
    GSM_PIN_CHECK_FAILED,
    FIRMWARE_MISSING,
    REMOVED,
    SLEEPING,
    CONNECTION_REMOVED,
    USER_REQUESTED,
    CARRIER,
    CONNECTION_ASSUMED,
    SUPPLICANT_AVAILABLE,
    MODEM_NOT_FOUND,
    BT_FAILED,
    GSM_SIM_NOT_INSERTED,
    GSM_SIM_PIN_REQUIRED,
    GSM_SIM_PUK_REQUIRED,
    GSM_SIM_WRONG,
    INFINIBAND_MODE,
    DEPENDENCY_FAILED,
    BR2684_FAILED,
    MODEM_MANAGER_UNAVAILABLE,
    SSID_NOT_FOUND,
    SECONDARY_CONNECTION_FAILED,
    DCB_FCOE_FAILED,
    TEAMD_CONTROL_FAILED,
    MODEM_FAILED,
    MODEM_AVAILABLE,
    SIM_PIN_INCORRECT,
    NEW_ACTIVATION,
    PARENT_CHANGED,
    PARENT_MANAGED_CHANGED,
    OVSDB_FAILED,
    IP_ADDRESS_DUPLICATE,
    IP_METHOD_UNSUPPORTED,
    SRIOV_CONFIGURATION_FAILED,
    PEER_NOT_FOUND,
}
export enum DeviceType {
    UNKNOWN,
    ETHERNET,
    WIFI,
    UNUSED1,
    UNUSED2,
    BT,
    OLPC_MESH,
    WIMAX,
    MODEM,
    INFINIBAND,
    BOND,
    VLAN,
    ADSL,
    BRIDGE,
    GENERIC,
    TEAM,
    TUN,
    IP_TUNNEL,
    MACVLAN,
    VXLAN,
    VETH,
    MACSEC,
    DUMMY,
    PPP,
    OVS_INTERFACE,
    OVS_PORT,
    OVS_BRIDGE,
    WPAN,
    /* 6LOWPAN (invalid, starts with a number) */
    WIREGUARD,
    WIFI_P2P,
    VRF,
}
export enum IPTunnelMode {
    UNKNOWN,
    IPIP,
    GRE,
    SIT,
    ISATAP,
    VTI,
    IP6IP6,
    IPIP6,
    IP6GRE,
    VTI6,
    GRETAP,
    IP6GRETAP,
}
export enum KeyfileHandlerType {
    WARN,
    WRITE_CERT,
}
export enum KeyfileWarnSeverity {
    DEBUG,
    INFO,
    INFO_MISSING_FILE,
    WARN,
}
export enum ManagerError {
    FAILED,
    PERMISSIONDENIED,
    UNKNOWNCONNECTION,
    UNKNOWNDEVICE,
    CONNECTIONNOTAVAILABLE,
    CONNECTIONNOTACTIVE,
    CONNECTIONALREADYACTIVE,
    DEPENDENCYFAILED,
    ALREADYASLEEPORAWAKE,
    ALREADYENABLEDORDISABLED,
    UNKNOWNLOGLEVEL,
    UNKNOWNLOGDOMAIN,
    INVALIDARGUMENTS,
    MISSINGPLUGIN,
}
export enum Metered {
    UNKNOWN,
    YES,
    NO,
    GUESS_YES,
    GUESS_NO,
}
export enum RollbackResult {
    OK,
    ERR_NO_DEVICE,
    ERR_DEVICE_UNMANAGED,
    ERR_FAILED,
}
export enum SecretAgentError {
    FAILED,
    PERMISSIONDENIED,
    INVALIDCONNECTION,
    USERCANCELED,
    AGENTCANCELED,
    NOSECRETS,
}
export enum Setting8021xCKFormat {
    UNKNOWN,
    X509,
    RAW_KEY,
    PKCS12,
}
export enum Setting8021xCKScheme {
    UNKNOWN,
    BLOB,
    PATH,
    PKCS11,
}
export enum SettingCompareFlags {
    EXACT,
    FUZZY,
    IGNORE_ID,
    IGNORE_SECRETS,
    IGNORE_AGENT_OWNED_SECRETS,
    IGNORE_NOT_SAVED_SECRETS,
    DIFF_RESULT_WITH_DEFAULT,
    DIFF_RESULT_NO_DEFAULT,
    IGNORE_TIMESTAMP,
}
export enum SettingConnectionAutoconnectSlaves {
    DEFAULT,
    NO,
    YES,
}
export enum SettingConnectionLldp {
    DEFAULT,
    DISABLE,
    ENABLE_RX,
}
export enum SettingConnectionLlmnr {
    DEFAULT,
    NO,
    RESOLVE,
    YES,
}
export enum SettingConnectionMdns {
    DEFAULT,
    NO,
    RESOLVE,
    YES,
}
export enum SettingDiffResult {
    UNKNOWN,
    IN_A,
    IN_B,
    IN_A_DEFAULT,
    IN_B_DEFAULT,
}
export enum SettingIP6ConfigAddrGenMode {
    EUI64,
    STABLE_PRIVACY,
}
export enum SettingIP6ConfigPrivacy {
    UNKNOWN,
    DISABLED,
    PREFER_PUBLIC_ADDR,
    PREFER_TEMP_ADDR,
}
export enum SettingMacRandomization {
    DEFAULT,
    NEVER,
    ALWAYS,
}
export enum SettingMacsecMode {
    PSK,
    EAP,
}
export enum SettingMacsecValidation {
    DISABLE,
    CHECK,
    STRICT,
}
export enum SettingMacvlanMode {
    UNKNOWN,
    VEPA,
    BRIDGE,
    PRIVATE,
    PASSTHRU,
    SOURCE,
}
export enum SettingProxyMethod {
    NONE,
    AUTO,
}
export enum SettingSerialParity {
    NONE,
    EVEN,
    ODD,
}
export enum SettingTunMode {
    UNKNOWN,
    TUN,
    TAP,
}
export enum SettingWirelessPowersave {
    DEFAULT,
    IGNORE,
    DISABLE,
    ENABLE,
}
export enum SettingWirelessSecurityFils {
    DEFAULT,
    DISABLE,
    OPTIONAL,
    REQUIRED,
}
export enum SettingWirelessSecurityPmf {
    DEFAULT,
    DISABLE,
    OPTIONAL,
    REQUIRED,
}
export enum SettingsError {
    FAILED,
    PERMISSIONDENIED,
    NOTSUPPORTED,
    INVALIDCONNECTION,
    READONLYCONNECTION,
    UUIDEXISTS,
    INVALIDHOSTNAME,
    INVALIDARGUMENTS,
}
export enum SriovVFVlanProtocol {
    /* 1Q (invalid, starts with a number) */
    /* 1AD (invalid, starts with a number) */
}
export enum State {
    UNKNOWN,
    ASLEEP,
    DISCONNECTED,
    DISCONNECTING,
    CONNECTING,
    CONNECTED_LOCAL,
    CONNECTED_SITE,
    CONNECTED_GLOBAL,
}
export enum Ternary {
    DEFAULT,
    FALSE,
    TRUE,
}
export enum UtilsSecurityType {
    INVALID,
    NONE,
    STATIC_WEP,
    LEAP,
    DYNAMIC_WEP,
    WPA_PSK,
    WPA_ENTERPRISE,
    WPA2_PSK,
    WPA2_ENTERPRISE,
    SAE,
    OWE,
    WPA3_SUITE_B_192,
}
export enum VlanPriorityMap {
    INGRESS_MAP,
    EGRESS_MAP,
}
export enum VpnConnectionState {
    UNKNOWN,
    PREPARE,
    NEED_AUTH,
    CONNECT,
    IP_CONFIG_GET,
    ACTIVATED,
    FAILED,
    DISCONNECTED,
}
export enum VpnConnectionStateReason {
    UNKNOWN,
    NONE,
    USER_DISCONNECTED,
    DEVICE_DISCONNECTED,
    SERVICE_STOPPED,
    IP_CONFIG_INVALID,
    CONNECT_TIMEOUT,
    SERVICE_START_TIMEOUT,
    SERVICE_START_FAILED,
    NO_SECRETS,
    LOGIN_FAILED,
    CONNECTION_REMOVED,
}
export enum VpnPluginError {
    FAILED,
    STARTINGINPROGRESS,
    ALREADYSTARTED,
    STOPPINGINPROGRESS,
    ALREADYSTOPPED,
    WRONGSTATE,
    BADARGUMENTS,
    LAUNCHFAILED,
    INVALIDCONNECTION,
    INTERACTIVENOTSUPPORTED,
}
export enum VpnPluginFailure {
    LOGIN_FAILED,
    CONNECT_FAILED,
    BAD_IP_CONFIG,
}
export enum VpnServiceState {
    UNKNOWN,
    INIT,
    SHUTDOWN,
    STARTING,
    STARTED,
    STOPPING,
    STOPPED,
}
export enum WepKeyType {
    UNKNOWN,
    KEY,
    PASSPHRASE,
}
export enum WimaxNspNetworkType {
    UNKNOWN,
    HOME,
    PARTNER,
    ROAMING_PARTNER,
}
export enum TODO_80211ApFlags {
    NONE,
    PRIVACY,
    WPS,
    WPS_PBC,
    WPS_PIN,
}
export enum TODO_80211ApSecurityFlags {
    NONE,
    PAIR_WEP40,
    PAIR_WEP104,
    PAIR_TKIP,
    PAIR_CCMP,
    GROUP_WEP40,
    GROUP_WEP104,
    GROUP_TKIP,
    GROUP_CCMP,
    KEY_MGMT_PSK,
    KEY_MGMT_802_1X,
    KEY_MGMT_SAE,
    KEY_MGMT_OWE,
    KEY_MGMT_OWE_TM,
    KEY_MGMT_EAP_SUITE_B_192,
}
export enum ActivationStateFlags {
    NONE,
    IS_MASTER,
    IS_SLAVE,
    LAYER2_READY,
    IP4_READY,
    IP6_READY,
    MASTER_HAS_SLAVES,
    LIFETIME_BOUND_TO_PROFILE_VISIBILITY,
    EXTERNAL,
}
export enum BluetoothCapabilities {
    NONE,
    DUN,
    NAP,
}
export enum CheckpointCreateFlags {
    NONE,
    DESTROY_ALL,
    DELETE_NEW_CONNECTIONS,
    DISCONNECT_NEW_DEVICES,
    ALLOW_OVERLAPPING,
}
export enum ClientInstanceFlags {
    NONE,
    NO_AUTO_FETCH_PERMISSIONS,
}
export enum ConnectionSerializationFlags {
    ALL,
    NO_SECRETS,
    ONLY_SECRETS,
    WITH_SECRETS_AGENT_OWNED,
}
export enum DeviceCapabilities {
    NONE,
    NM_SUPPORTED,
    CARRIER_DETECT,
    IS_SOFTWARE,
    SRIOV,
}
export enum DeviceInterfaceFlags {
    UP,
    LOWER_UP,
    CARRIER,
}
export enum DeviceModemCapabilities {
    NONE,
    POTS,
    CDMA_EVDO,
    GSM_UMTS,
    LTE,
}
export enum DeviceWifiCapabilities {
    NONE,
    CIPHER_WEP40,
    CIPHER_WEP104,
    CIPHER_TKIP,
    CIPHER_CCMP,
    WPA,
    RSN,
    AP,
    ADHOC,
    FREQ_VALID,
    FREQ_2GHZ,
    FREQ_5GHZ,
    MESH,
    IBSS_RSN,
}
export enum DhcpHostnameFlags {
    NONE,
    FQDN_SERV_UPDATE,
    FQDN_ENCODED,
    FQDN_NO_UPDATE,
    FQDN_CLEAR_FLAGS,
}
export enum IPAddressCmpFlags {
    NONE,
    WITH_ATTRS,
}
export enum IPRoutingRuleAsStringFlags {
    NONE,
    AF_INET,
    AF_INET6,
    VALIDATE,
}
export enum IPTunnelFlags {
    NONE,
    IP6_IGN_ENCAP_LIMIT,
    IP6_USE_ORIG_TCLASS,
    IP6_USE_ORIG_FLOWLABEL,
    IP6_MIP6_DEV,
    IP6_RCV_DSCP_COPY,
    IP6_USE_ORIG_FWMARK,
}
export enum KeyfileHandlerFlags {
    NONE,
}
export enum ManagerReloadFlags {
    CONF,
    DNS_RC,
    DNS_FULL,
}
export enum SecretAgentCapabilities {
    NONE,
    VPN_HINTS,
    LAST,
}
export enum SecretAgentGetSecretsFlags {
    NONE,
    ALLOW_INTERACTION,
    REQUEST_NEW,
    USER_REQUESTED,
    WPS_PBC_ACTIVE,
    ONLY_SYSTEM,
    NO_ERRORS,
}
export enum Setting8021xAuthFlags {
    NONE,
    TLS_1_0_DISABLE,
    TLS_1_1_DISABLE,
    TLS_1_2_DISABLE,
    ALL,
}
export enum SettingDcbFlags {
    NONE,
    ENABLE,
    ADVERTISE,
    WILLING,
}
export enum SettingSecretFlags {
    NONE,
    AGENT_OWNED,
    NOT_SAVED,
    NOT_REQUIRED,
}
export enum SettingWiredWakeOnLan {
    PHY,
    UNICAST,
    MULTICAST,
    BROADCAST,
    ARP,
    MAGIC,
    DEFAULT,
    IGNORE,
}
export enum SettingWirelessSecurityWpsMethod {
    DEFAULT,
    DISABLED,
    AUTO,
    PBC,
    PIN,
}
export enum SettingWirelessWakeOnWLan {
    ANY,
    DISCONNECT,
    MAGIC,
    GTK_REKEY_FAILURE,
    EAP_IDENTITY_REQUEST,
    /* 4WAY_HANDSHAKE (invalid, starts with a number) */
    RFKILL_RELEASE,
    TCP,
    ALL,
    DEFAULT,
    IGNORE,
}
export enum SettingsAddConnection2Flags {
    NONE,
    TO_DISK,
    IN_MEMORY,
    BLOCK_AUTOCONNECT,
}
export enum SettingsConnectionFlags {
    NONE,
    UNSAVED,
    NM_GENERATED,
    VOLATILE,
    EXTERNAL,
}
export enum SettingsUpdate2Flags {
    NONE,
    TO_DISK,
    IN_MEMORY,
    IN_MEMORY_DETACHED,
    IN_MEMORY_ONLY,
    VOLATILE,
    BLOCK_AUTOCONNECT,
    NO_REAPPLY,
}
export enum TeamLinkWatcherArpPingFlags {
    VALIDATE_ACTIVE,
    VALIDATE_INACTIVE,
    SEND_ALWAYS,
}
export enum VlanFlags {
    REORDER_HEADERS,
    GVRP,
    LOOSE_BINDING,
    MVRP,
}
export enum VpnEditorPluginCapability {
    NONE,
    IMPORT,
    EXPORT,
    IPV6,
}
export const ACCESS_POINT_BSSID: string
export const ACCESS_POINT_FLAGS: string
export const ACCESS_POINT_FREQUENCY: string
export const ACCESS_POINT_HW_ADDRESS: string
export const ACCESS_POINT_LAST_SEEN: string
export const ACCESS_POINT_MAX_BITRATE: string
export const ACCESS_POINT_MODE: string
export const ACCESS_POINT_RSN_FLAGS: string
export const ACCESS_POINT_SSID: string
export const ACCESS_POINT_STRENGTH: string
export const ACCESS_POINT_WPA_FLAGS: string
export const ACTIVE_CONNECTION_CONNECTION: string
export const ACTIVE_CONNECTION_DEFAULT: string
export const ACTIVE_CONNECTION_DEFAULT6: string
export const ACTIVE_CONNECTION_DEVICES: string
export const ACTIVE_CONNECTION_DHCP4_CONFIG: string
export const ACTIVE_CONNECTION_DHCP6_CONFIG: string
export const ACTIVE_CONNECTION_ID: string
export const ACTIVE_CONNECTION_IP4_CONFIG: string
export const ACTIVE_CONNECTION_IP6_CONFIG: string
export const ACTIVE_CONNECTION_MASTER: string
export const ACTIVE_CONNECTION_SPECIFIC_OBJECT_PATH: string
export const ACTIVE_CONNECTION_STATE: string
export const ACTIVE_CONNECTION_STATE_FLAGS: string
export const ACTIVE_CONNECTION_TYPE: string
export const ACTIVE_CONNECTION_UUID: string
export const ACTIVE_CONNECTION_VPN: string
export const BRIDGE_VLAN_VID_MAX: number
export const BRIDGE_VLAN_VID_MIN: number
export const CHECKPOINT_CREATED: string
export const CHECKPOINT_DEVICES: string
export const CHECKPOINT_ROLLBACK_TIMEOUT: string
export const CLIENT_ACTIVATING_CONNECTION: string
export const CLIENT_ACTIVE_CONNECTIONS: string
export const CLIENT_ACTIVE_CONNECTION_ADDED: string
export const CLIENT_ACTIVE_CONNECTION_REMOVED: string
export const CLIENT_ALL_DEVICES: string
export const CLIENT_ANY_DEVICE_ADDED: string
export const CLIENT_ANY_DEVICE_REMOVED: string
export const CLIENT_CAN_MODIFY: string
export const CLIENT_CAPABILITIES: string
export const CLIENT_CHECKPOINTS: string
export const CLIENT_CONNECTIONS: string
export const CLIENT_CONNECTION_ADDED: string
export const CLIENT_CONNECTION_REMOVED: string
export const CLIENT_CONNECTIVITY: string
export const CLIENT_CONNECTIVITY_CHECK_AVAILABLE: string
export const CLIENT_CONNECTIVITY_CHECK_ENABLED: string
export const CLIENT_CONNECTIVITY_CHECK_URI: string
export const CLIENT_DBUS_CONNECTION: string
export const CLIENT_DBUS_NAME_OWNER: string
export const CLIENT_DEVICES: string
export const CLIENT_DEVICE_ADDED: string
export const CLIENT_DEVICE_REMOVED: string
export const CLIENT_DNS_CONFIGURATION: string
export const CLIENT_DNS_MODE: string
export const CLIENT_DNS_RC_MANAGER: string
export const CLIENT_HOSTNAME: string
export const CLIENT_INSTANCE_FLAGS: string
export const CLIENT_METERED: string
export const CLIENT_NETWORKING_ENABLED: string
export const CLIENT_NM_RUNNING: string
export const CLIENT_PERMISSIONS_STATE: string
export const CLIENT_PERMISSION_CHANGED: string
export const CLIENT_PRIMARY_CONNECTION: string
export const CLIENT_STARTUP: string
export const CLIENT_STATE: string
export const CLIENT_VERSION: string
export const CLIENT_WIMAX_ENABLED: string
export const CLIENT_WIMAX_HARDWARE_ENABLED: string
export const CLIENT_WIRELESS_ENABLED: string
export const CLIENT_WIRELESS_HARDWARE_ENABLED: string
export const CLIENT_WWAN_ENABLED: string
export const CLIENT_WWAN_HARDWARE_ENABLED: string
export const CONNECTION_CHANGED: string
export const CONNECTION_NORMALIZE_PARAM_IP6_CONFIG_METHOD: string
export const CONNECTION_SECRETS_CLEARED: string
export const CONNECTION_SECRETS_UPDATED: string
export const DBUS_INTERFACE: string
export const DBUS_INTERFACE_DNS_MANAGER: string
export const DBUS_INTERFACE_SETTINGS: string
export const DBUS_INTERFACE_SETTINGS_CONNECTION: string
export const DBUS_INTERFACE_SETTINGS_CONNECTION_SECRETS: string
export const DBUS_INTERFACE_VPN: string
export const DBUS_INTERFACE_VPN_CONNECTION: string
export const DBUS_INVALID_VPN_CONNECTION: string
export const DBUS_NO_ACTIVE_VPN_CONNECTION: string
export const DBUS_NO_VPN_CONNECTIONS: string
export const DBUS_PATH: string
export const DBUS_PATH_AGENT_MANAGER: string
export const DBUS_PATH_DNS_MANAGER: string
export const DBUS_PATH_SECRET_AGENT: string
export const DBUS_PATH_SETTINGS: string
export const DBUS_PATH_SETTINGS_CONNECTION: string
export const DBUS_PATH_VPN: string
export const DBUS_PATH_VPN_CONNECTION: string
export const DBUS_SERVICE: string
export const DBUS_VPN_ALREADY_STARTED: string
export const DBUS_VPN_ALREADY_STOPPED: string
export const DBUS_VPN_BAD_ARGUMENTS: string
export const DBUS_VPN_ERROR_PREFIX: string
export const DBUS_VPN_INTERACTIVE_NOT_SUPPORTED: string
export const DBUS_VPN_SIGNAL_CONNECT_FAILED: string
export const DBUS_VPN_SIGNAL_IP4_CONFIG: string
export const DBUS_VPN_SIGNAL_IP_CONFIG_BAD: string
export const DBUS_VPN_SIGNAL_LAUNCH_FAILED: string
export const DBUS_VPN_SIGNAL_LOGIN_BANNER: string
export const DBUS_VPN_SIGNAL_LOGIN_FAILED: string
export const DBUS_VPN_SIGNAL_STATE_CHANGE: string
export const DBUS_VPN_SIGNAL_VPN_CONFIG_BAD: string
export const DBUS_VPN_STARTING_IN_PROGRESS: string
export const DBUS_VPN_STOPPING_IN_PROGRESS: string
export const DBUS_VPN_WRONG_STATE: string
export const DEVICE_6LOWPAN_HW_ADDRESS: string
export const DEVICE_6LOWPAN_PARENT: string
export const DEVICE_ACTIVE_CONNECTION: string
export const DEVICE_ADSL_CARRIER: string
export const DEVICE_AUTOCONNECT: string
export const DEVICE_AVAILABLE_CONNECTIONS: string
export const DEVICE_BOND_CARRIER: string
export const DEVICE_BOND_HW_ADDRESS: string
export const DEVICE_BOND_SLAVES: string
export const DEVICE_BRIDGE_CARRIER: string
export const DEVICE_BRIDGE_HW_ADDRESS: string
export const DEVICE_BRIDGE_SLAVES: string
export const DEVICE_BT_CAPABILITIES: string
export const DEVICE_BT_HW_ADDRESS: string
export const DEVICE_BT_NAME: string
export const DEVICE_CAPABILITIES: string
export const DEVICE_DEVICE_TYPE: string
export const DEVICE_DHCP4_CONFIG: string
export const DEVICE_DHCP6_CONFIG: string
export const DEVICE_DRIVER: string
export const DEVICE_DRIVER_VERSION: string
export const DEVICE_DUMMY_HW_ADDRESS: string
export const DEVICE_ETHERNET_CARRIER: string
export const DEVICE_ETHERNET_HW_ADDRESS: string
export const DEVICE_ETHERNET_PERMANENT_HW_ADDRESS: string
export const DEVICE_ETHERNET_S390_SUBCHANNELS: string
export const DEVICE_ETHERNET_SPEED: string
export const DEVICE_FIRMWARE_MISSING: string
export const DEVICE_FIRMWARE_VERSION: string
export const DEVICE_GENERIC_HW_ADDRESS: string
export const DEVICE_GENERIC_TYPE_DESCRIPTION: string
export const DEVICE_HW_ADDRESS: string
export const DEVICE_INFINIBAND_CARRIER: string
export const DEVICE_INFINIBAND_HW_ADDRESS: string
export const DEVICE_INTERFACE: string
export const DEVICE_INTERFACE_FLAGS: string
export const DEVICE_IP4_CONFIG: string
export const DEVICE_IP4_CONNECTIVITY: string
export const DEVICE_IP6_CONFIG: string
export const DEVICE_IP6_CONNECTIVITY: string
export const DEVICE_IP_INTERFACE: string
export const DEVICE_IP_TUNNEL_ENCAPSULATION_LIMIT: string
export const DEVICE_IP_TUNNEL_FLAGS: string
export const DEVICE_IP_TUNNEL_FLOW_LABEL: string
export const DEVICE_IP_TUNNEL_INPUT_KEY: string
export const DEVICE_IP_TUNNEL_LOCAL: string
export const DEVICE_IP_TUNNEL_MODE: string
export const DEVICE_IP_TUNNEL_OUTPUT_KEY: string
export const DEVICE_IP_TUNNEL_PARENT: string
export const DEVICE_IP_TUNNEL_PATH_MTU_DISCOVERY: string
export const DEVICE_IP_TUNNEL_REMOTE: string
export const DEVICE_IP_TUNNEL_TOS: string
export const DEVICE_IP_TUNNEL_TTL: string
export const DEVICE_LLDP_NEIGHBORS: string
export const DEVICE_MACSEC_CIPHER_SUITE: string
export const DEVICE_MACSEC_ENCODING_SA: string
export const DEVICE_MACSEC_ENCRYPT: string
export const DEVICE_MACSEC_ES: string
export const DEVICE_MACSEC_HW_ADDRESS: string
export const DEVICE_MACSEC_ICV_LENGTH: string
export const DEVICE_MACSEC_INCLUDE_SCI: string
export const DEVICE_MACSEC_PARENT: string
export const DEVICE_MACSEC_PROTECT: string
export const DEVICE_MACSEC_REPLAY_PROTECT: string
export const DEVICE_MACSEC_SCB: string
export const DEVICE_MACSEC_SCI: string
export const DEVICE_MACSEC_VALIDATION: string
export const DEVICE_MACSEC_WINDOW: string
export const DEVICE_MACVLAN_HW_ADDRESS: string
export const DEVICE_MACVLAN_MODE: string
export const DEVICE_MACVLAN_NO_PROMISC: string
export const DEVICE_MACVLAN_PARENT: string
export const DEVICE_MACVLAN_TAP: string
export const DEVICE_MANAGED: string
export const DEVICE_METERED: string
export const DEVICE_MODEM_APN: string
export const DEVICE_MODEM_CURRENT_CAPABILITIES: string
export const DEVICE_MODEM_DEVICE_ID: string
export const DEVICE_MODEM_MODEM_CAPABILITIES: string
export const DEVICE_MODEM_OPERATOR_CODE: string
export const DEVICE_MTU: string
export const DEVICE_NM_PLUGIN_MISSING: string
export const DEVICE_OLPC_MESH_ACTIVE_CHANNEL: string
export const DEVICE_OLPC_MESH_COMPANION: string
export const DEVICE_OLPC_MESH_HW_ADDRESS: string
export const DEVICE_OVS_BRIDGE_SLAVES: string
export const DEVICE_OVS_PORT_SLAVES: string
export const DEVICE_PATH: string
export const DEVICE_PHYSICAL_PORT_ID: string
export const DEVICE_PRODUCT: string
export const DEVICE_REAL: string
export const DEVICE_STATE: string
export const DEVICE_STATE_REASON: string
export const DEVICE_TEAM_CARRIER: string
export const DEVICE_TEAM_CONFIG: string
export const DEVICE_TEAM_HW_ADDRESS: string
export const DEVICE_TEAM_SLAVES: string
export const DEVICE_TUN_GROUP: string
export const DEVICE_TUN_HW_ADDRESS: string
export const DEVICE_TUN_MODE: string
export const DEVICE_TUN_MULTI_QUEUE: string
export const DEVICE_TUN_NO_PI: string
export const DEVICE_TUN_OWNER: string
export const DEVICE_TUN_VNET_HDR: string
export const DEVICE_UDI: string
export const DEVICE_VENDOR: string
export const DEVICE_VETH_PEER: string
export const DEVICE_VLAN_CARRIER: string
export const DEVICE_VLAN_HW_ADDRESS: string
export const DEVICE_VLAN_PARENT: string
export const DEVICE_VLAN_VLAN_ID: string
export const DEVICE_VRF_TABLE: string
export const DEVICE_VXLAN_AGEING: string
export const DEVICE_VXLAN_CARRIER: string
export const DEVICE_VXLAN_DST_PORT: string
export const DEVICE_VXLAN_GROUP: string
export const DEVICE_VXLAN_HW_ADDRESS: string
export const DEVICE_VXLAN_ID: string
export const DEVICE_VXLAN_L2MISS: string
export const DEVICE_VXLAN_L3MISS: string
export const DEVICE_VXLAN_LEARNING: string
export const DEVICE_VXLAN_LIMIT: string
export const DEVICE_VXLAN_LOCAL: string
export const DEVICE_VXLAN_PARENT: string
export const DEVICE_VXLAN_PROXY: string
export const DEVICE_VXLAN_RSC: string
export const DEVICE_VXLAN_SRC_PORT_MAX: string
export const DEVICE_VXLAN_SRC_PORT_MIN: string
export const DEVICE_VXLAN_TOS: string
export const DEVICE_VXLAN_TTL: string
export const DEVICE_WIFI_ACCESS_POINTS: string
export const DEVICE_WIFI_ACTIVE_ACCESS_POINT: string
export const DEVICE_WIFI_BITRATE: string
export const DEVICE_WIFI_CAPABILITIES: string
export const DEVICE_WIFI_HW_ADDRESS: string
export const DEVICE_WIFI_LAST_SCAN: string
export const DEVICE_WIFI_MODE: string
export const DEVICE_WIFI_P2P_HW_ADDRESS: string
export const DEVICE_WIFI_P2P_PEERS: string
export const DEVICE_WIFI_P2P_WFDIES: string
export const DEVICE_WIFI_PERMANENT_HW_ADDRESS: string
export const DEVICE_WIMAX_ACTIVE_NSP: string
export const DEVICE_WIMAX_BSID: string
export const DEVICE_WIMAX_CENTER_FREQUENCY: string
export const DEVICE_WIMAX_CINR: string
export const DEVICE_WIMAX_HW_ADDRESS: string
export const DEVICE_WIMAX_NSPS: string
export const DEVICE_WIMAX_RSSI: string
export const DEVICE_WIMAX_TX_POWER: string
export const DEVICE_WIREGUARD_FWMARK: string
export const DEVICE_WIREGUARD_LISTEN_PORT: string
export const DEVICE_WIREGUARD_PUBLIC_KEY: string
export const DEVICE_WPAN_HW_ADDRESS: string
export const DHCP_CONFIG_FAMILY: string
export const DHCP_CONFIG_OPTIONS: string
export const ETHTOOL_OPTNAME_COALESCE_ADAPTIVE_RX: string
export const ETHTOOL_OPTNAME_COALESCE_ADAPTIVE_TX: string
export const ETHTOOL_OPTNAME_COALESCE_PKT_RATE_HIGH: string
export const ETHTOOL_OPTNAME_COALESCE_PKT_RATE_LOW: string
export const ETHTOOL_OPTNAME_COALESCE_RX_FRAMES: string
export const ETHTOOL_OPTNAME_COALESCE_RX_FRAMES_HIGH: string
export const ETHTOOL_OPTNAME_COALESCE_RX_FRAMES_IRQ: string
export const ETHTOOL_OPTNAME_COALESCE_RX_FRAMES_LOW: string
export const ETHTOOL_OPTNAME_COALESCE_RX_USECS: string
export const ETHTOOL_OPTNAME_COALESCE_RX_USECS_HIGH: string
export const ETHTOOL_OPTNAME_COALESCE_RX_USECS_IRQ: string
export const ETHTOOL_OPTNAME_COALESCE_RX_USECS_LOW: string
export const ETHTOOL_OPTNAME_COALESCE_SAMPLE_INTERVAL: string
export const ETHTOOL_OPTNAME_COALESCE_STATS_BLOCK_USECS: string
export const ETHTOOL_OPTNAME_COALESCE_TX_FRAMES: string
export const ETHTOOL_OPTNAME_COALESCE_TX_FRAMES_HIGH: string
export const ETHTOOL_OPTNAME_COALESCE_TX_FRAMES_IRQ: string
export const ETHTOOL_OPTNAME_COALESCE_TX_FRAMES_LOW: string
export const ETHTOOL_OPTNAME_COALESCE_TX_USECS: string
export const ETHTOOL_OPTNAME_COALESCE_TX_USECS_HIGH: string
export const ETHTOOL_OPTNAME_COALESCE_TX_USECS_IRQ: string
export const ETHTOOL_OPTNAME_COALESCE_TX_USECS_LOW: string
export const ETHTOOL_OPTNAME_FEATURE_ESP_HW_OFFLOAD: string
export const ETHTOOL_OPTNAME_FEATURE_ESP_TX_CSUM_HW_OFFLOAD: string
export const ETHTOOL_OPTNAME_FEATURE_FCOE_MTU: string
export const ETHTOOL_OPTNAME_FEATURE_GRO: string
export const ETHTOOL_OPTNAME_FEATURE_GSO: string
export const ETHTOOL_OPTNAME_FEATURE_HIGHDMA: string
export const ETHTOOL_OPTNAME_FEATURE_HW_TC_OFFLOAD: string
export const ETHTOOL_OPTNAME_FEATURE_L2_FWD_OFFLOAD: string
export const ETHTOOL_OPTNAME_FEATURE_LOOPBACK: string
export const ETHTOOL_OPTNAME_FEATURE_LRO: string
export const ETHTOOL_OPTNAME_FEATURE_MACSEC_HW_OFFLOAD: string
export const ETHTOOL_OPTNAME_FEATURE_NTUPLE: string
export const ETHTOOL_OPTNAME_FEATURE_RX: string
export const ETHTOOL_OPTNAME_FEATURE_RXHASH: string
export const ETHTOOL_OPTNAME_FEATURE_RXVLAN: string
export const ETHTOOL_OPTNAME_FEATURE_RX_ALL: string
export const ETHTOOL_OPTNAME_FEATURE_RX_FCS: string
export const ETHTOOL_OPTNAME_FEATURE_RX_GRO_HW: string
export const ETHTOOL_OPTNAME_FEATURE_RX_GRO_LIST: string
export const ETHTOOL_OPTNAME_FEATURE_RX_UDP_GRO_FORWARDING: string
export const ETHTOOL_OPTNAME_FEATURE_RX_UDP_TUNNEL_PORT_OFFLOAD: string
export const ETHTOOL_OPTNAME_FEATURE_RX_VLAN_FILTER: string
export const ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_FILTER: string
export const ETHTOOL_OPTNAME_FEATURE_RX_VLAN_STAG_HW_PARSE: string
export const ETHTOOL_OPTNAME_FEATURE_SG: string
export const ETHTOOL_OPTNAME_FEATURE_TLS_HW_RECORD: string
export const ETHTOOL_OPTNAME_FEATURE_TLS_HW_RX_OFFLOAD: string
export const ETHTOOL_OPTNAME_FEATURE_TLS_HW_TX_OFFLOAD: string
export const ETHTOOL_OPTNAME_FEATURE_TSO: string
export const ETHTOOL_OPTNAME_FEATURE_TX: string
export const ETHTOOL_OPTNAME_FEATURE_TXVLAN: string
export const ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_FCOE_CRC: string
export const ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV4: string
export const ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IPV6: string
export const ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_IP_GENERIC: string
export const ETHTOOL_OPTNAME_FEATURE_TX_CHECKSUM_SCTP: string
export const ETHTOOL_OPTNAME_FEATURE_TX_ESP_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_FCOE_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_GRE_CSUM_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_GRE_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_GSO_LIST: string
export const ETHTOOL_OPTNAME_FEATURE_TX_GSO_PARTIAL: string
export const ETHTOOL_OPTNAME_FEATURE_TX_GSO_ROBUST: string
export const ETHTOOL_OPTNAME_FEATURE_TX_IPXIP4_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_IPXIP6_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_NOCACHE_COPY: string
export const ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER: string
export const ETHTOOL_OPTNAME_FEATURE_TX_SCATTER_GATHER_FRAGLIST: string
export const ETHTOOL_OPTNAME_FEATURE_TX_SCTP_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_TCP6_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_TCP_ECN_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_TCP_MANGLEID_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_TCP_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_TUNNEL_REMCSUM_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_UDP_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_CSUM_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_UDP_TNL_SEGMENTATION: string
export const ETHTOOL_OPTNAME_FEATURE_TX_VLAN_STAG_HW_INSERT: string
export const ETHTOOL_OPTNAME_RING_RX: string
export const ETHTOOL_OPTNAME_RING_RX_JUMBO: string
export const ETHTOOL_OPTNAME_RING_RX_MINI: string
export const ETHTOOL_OPTNAME_RING_TX: string
export const IP_ADDRESS_ATTRIBUTE_LABEL: string
export const IP_CONFIG_ADDRESSES: string
export const IP_CONFIG_DOMAINS: string
export const IP_CONFIG_FAMILY: string
export const IP_CONFIG_GATEWAY: string
export const IP_CONFIG_NAMESERVERS: string
export const IP_CONFIG_ROUTES: string
export const IP_CONFIG_SEARCHES: string
export const IP_CONFIG_WINS_SERVERS: string
export const IP_ROUTE_ATTRIBUTE_CWND: string
export const IP_ROUTE_ATTRIBUTE_FROM: string
export const IP_ROUTE_ATTRIBUTE_INITCWND: string
export const IP_ROUTE_ATTRIBUTE_INITRWND: string
export const IP_ROUTE_ATTRIBUTE_LOCK_CWND: string
export const IP_ROUTE_ATTRIBUTE_LOCK_INITCWND: string
export const IP_ROUTE_ATTRIBUTE_LOCK_INITRWND: string
export const IP_ROUTE_ATTRIBUTE_LOCK_MTU: string
export const IP_ROUTE_ATTRIBUTE_LOCK_WINDOW: string
export const IP_ROUTE_ATTRIBUTE_MTU: string
export const IP_ROUTE_ATTRIBUTE_ONLINK: string
export const IP_ROUTE_ATTRIBUTE_SCOPE: string
export const IP_ROUTE_ATTRIBUTE_SRC: string
export const IP_ROUTE_ATTRIBUTE_TABLE: string
export const IP_ROUTE_ATTRIBUTE_TOS: string
export const IP_ROUTE_ATTRIBUTE_TYPE: string
export const IP_ROUTE_ATTRIBUTE_WINDOW: string
export const LLDP_ATTR_CHASSIS_ID: string
export const LLDP_ATTR_CHASSIS_ID_TYPE: string
export const LLDP_ATTR_DESTINATION: string
export const LLDP_ATTR_IEEE_802_1_PPVID: string
export const LLDP_ATTR_IEEE_802_1_PPVIDS: string
export const LLDP_ATTR_IEEE_802_1_PPVID_FLAGS: string
export const LLDP_ATTR_IEEE_802_1_PVID: string
export const LLDP_ATTR_IEEE_802_1_VID: string
export const LLDP_ATTR_IEEE_802_1_VLANS: string
export const LLDP_ATTR_IEEE_802_1_VLAN_NAME: string
export const LLDP_ATTR_IEEE_802_3_MAC_PHY_CONF: string
export const LLDP_ATTR_IEEE_802_3_MAX_FRAME_SIZE: string
export const LLDP_ATTR_IEEE_802_3_POWER_VIA_MDI: string
export const LLDP_ATTR_MANAGEMENT_ADDRESSES: string
export const LLDP_ATTR_MUD_URL: string
export const LLDP_ATTR_PORT_DESCRIPTION: string
export const LLDP_ATTR_PORT_ID: string
export const LLDP_ATTR_PORT_ID_TYPE: string
export const LLDP_ATTR_RAW: string
export const LLDP_ATTR_SYSTEM_CAPABILITIES: string
export const LLDP_ATTR_SYSTEM_DESCRIPTION: string
export const LLDP_ATTR_SYSTEM_NAME: string
export const LLDP_DEST_NEAREST_BRIDGE: string
export const LLDP_DEST_NEAREST_CUSTOMER_BRIDGE: string
export const LLDP_DEST_NEAREST_NON_TPMR_BRIDGE: string
export const MAJOR_VERSION: number
export const MICRO_VERSION: number
export const MINOR_VERSION: number
export const OBJECT_PATH: string
export const REMOTE_CONNECTION_DBUS_CONNECTION: string
export const REMOTE_CONNECTION_FILENAME: string
export const REMOTE_CONNECTION_FLAGS: string
export const REMOTE_CONNECTION_PATH: string
export const REMOTE_CONNECTION_UNSAVED: string
export const REMOTE_CONNECTION_VISIBLE: string
export const SECRET_AGENT_OLD_AUTO_REGISTER: string
export const SECRET_AGENT_OLD_CAPABILITIES: string
export const SECRET_AGENT_OLD_DBUS_CONNECTION: string
export const SECRET_AGENT_OLD_IDENTIFIER: string
export const SECRET_AGENT_OLD_REGISTERED: string
export const SETTING_6LOWPAN_PARENT: string
export const SETTING_6LOWPAN_SETTING_NAME: string
export const SETTING_802_1X_ALTSUBJECT_MATCHES: string
export const SETTING_802_1X_ANONYMOUS_IDENTITY: string
export const SETTING_802_1X_AUTH_TIMEOUT: string
export const SETTING_802_1X_CA_CERT: string
export const SETTING_802_1X_CA_CERT_PASSWORD: string
export const SETTING_802_1X_CA_CERT_PASSWORD_FLAGS: string
export const SETTING_802_1X_CA_PATH: string
export const SETTING_802_1X_CERT_SCHEME_PREFIX_PATH: string
export const SETTING_802_1X_CERT_SCHEME_PREFIX_PKCS11: string
export const SETTING_802_1X_CLIENT_CERT: string
export const SETTING_802_1X_CLIENT_CERT_PASSWORD: string
export const SETTING_802_1X_CLIENT_CERT_PASSWORD_FLAGS: string
export const SETTING_802_1X_DOMAIN_MATCH: string
export const SETTING_802_1X_DOMAIN_SUFFIX_MATCH: string
export const SETTING_802_1X_EAP: string
export const SETTING_802_1X_IDENTITY: string
export const SETTING_802_1X_OPTIONAL: string
export const SETTING_802_1X_PAC_FILE: string
export const SETTING_802_1X_PASSWORD: string
export const SETTING_802_1X_PASSWORD_FLAGS: string
export const SETTING_802_1X_PASSWORD_RAW: string
export const SETTING_802_1X_PASSWORD_RAW_FLAGS: string
export const SETTING_802_1X_PHASE1_AUTH_FLAGS: string
export const SETTING_802_1X_PHASE1_FAST_PROVISIONING: string
export const SETTING_802_1X_PHASE1_PEAPLABEL: string
export const SETTING_802_1X_PHASE1_PEAPVER: string
export const SETTING_802_1X_PHASE2_ALTSUBJECT_MATCHES: string
export const SETTING_802_1X_PHASE2_AUTH: string
export const SETTING_802_1X_PHASE2_AUTHEAP: string
export const SETTING_802_1X_PHASE2_CA_CERT: string
export const SETTING_802_1X_PHASE2_CA_CERT_PASSWORD: string
export const SETTING_802_1X_PHASE2_CA_CERT_PASSWORD_FLAGS: string
export const SETTING_802_1X_PHASE2_CA_PATH: string
export const SETTING_802_1X_PHASE2_CLIENT_CERT: string
export const SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD: string
export const SETTING_802_1X_PHASE2_CLIENT_CERT_PASSWORD_FLAGS: string
export const SETTING_802_1X_PHASE2_DOMAIN_MATCH: string
export const SETTING_802_1X_PHASE2_DOMAIN_SUFFIX_MATCH: string
export const SETTING_802_1X_PHASE2_PRIVATE_KEY: string
export const SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD: string
export const SETTING_802_1X_PHASE2_PRIVATE_KEY_PASSWORD_FLAGS: string
export const SETTING_802_1X_PHASE2_SUBJECT_MATCH: string
export const SETTING_802_1X_PIN: string
export const SETTING_802_1X_PIN_FLAGS: string
export const SETTING_802_1X_PRIVATE_KEY: string
export const SETTING_802_1X_PRIVATE_KEY_PASSWORD: string
export const SETTING_802_1X_PRIVATE_KEY_PASSWORD_FLAGS: string
export const SETTING_802_1X_SETTING_NAME: string
export const SETTING_802_1X_SUBJECT_MATCH: string
export const SETTING_802_1X_SYSTEM_CA_CERTS: string
export const SETTING_ADSL_ENCAPSULATION: string
export const SETTING_ADSL_ENCAPSULATION_LLC: string
export const SETTING_ADSL_ENCAPSULATION_VCMUX: string
export const SETTING_ADSL_PASSWORD: string
export const SETTING_ADSL_PASSWORD_FLAGS: string
export const SETTING_ADSL_PROTOCOL: string
export const SETTING_ADSL_PROTOCOL_IPOATM: string
export const SETTING_ADSL_PROTOCOL_PPPOA: string
export const SETTING_ADSL_PROTOCOL_PPPOE: string
export const SETTING_ADSL_SETTING_NAME: string
export const SETTING_ADSL_USERNAME: string
export const SETTING_ADSL_VCI: string
export const SETTING_ADSL_VPI: string
export const SETTING_BLUETOOTH_BDADDR: string
export const SETTING_BLUETOOTH_SETTING_NAME: string
export const SETTING_BLUETOOTH_TYPE: string
export const SETTING_BLUETOOTH_TYPE_DUN: string
export const SETTING_BLUETOOTH_TYPE_NAP: string
export const SETTING_BLUETOOTH_TYPE_PANU: string
export const SETTING_BOND_OPTIONS: string
export const SETTING_BOND_OPTION_ACTIVE_SLAVE: string
export const SETTING_BOND_OPTION_AD_ACTOR_SYSTEM: string
export const SETTING_BOND_OPTION_AD_ACTOR_SYS_PRIO: string
export const SETTING_BOND_OPTION_AD_SELECT: string
export const SETTING_BOND_OPTION_AD_USER_PORT_KEY: string
export const SETTING_BOND_OPTION_ALL_SLAVES_ACTIVE: string
export const SETTING_BOND_OPTION_ARP_ALL_TARGETS: string
export const SETTING_BOND_OPTION_ARP_INTERVAL: string
export const SETTING_BOND_OPTION_ARP_IP_TARGET: string
export const SETTING_BOND_OPTION_ARP_VALIDATE: string
export const SETTING_BOND_OPTION_DOWNDELAY: string
export const SETTING_BOND_OPTION_FAIL_OVER_MAC: string
export const SETTING_BOND_OPTION_LACP_RATE: string
export const SETTING_BOND_OPTION_LP_INTERVAL: string
export const SETTING_BOND_OPTION_MIIMON: string
export const SETTING_BOND_OPTION_MIN_LINKS: string
export const SETTING_BOND_OPTION_MODE: string
export const SETTING_BOND_OPTION_NUM_GRAT_ARP: string
export const SETTING_BOND_OPTION_NUM_UNSOL_NA: string
export const SETTING_BOND_OPTION_PACKETS_PER_SLAVE: string
export const SETTING_BOND_OPTION_PRIMARY: string
export const SETTING_BOND_OPTION_PRIMARY_RESELECT: string
export const SETTING_BOND_OPTION_RESEND_IGMP: string
export const SETTING_BOND_OPTION_TLB_DYNAMIC_LB: string
export const SETTING_BOND_OPTION_UPDELAY: string
export const SETTING_BOND_OPTION_USE_CARRIER: string
export const SETTING_BOND_OPTION_XMIT_HASH_POLICY: string
export const SETTING_BOND_SETTING_NAME: string
export const SETTING_BRIDGE_AGEING_TIME: string
export const SETTING_BRIDGE_FORWARD_DELAY: string
export const SETTING_BRIDGE_GROUP_ADDRESS: string
export const SETTING_BRIDGE_GROUP_FORWARD_MASK: string
export const SETTING_BRIDGE_HELLO_TIME: string
export const SETTING_BRIDGE_MAC_ADDRESS: string
export const SETTING_BRIDGE_MAX_AGE: string
export const SETTING_BRIDGE_MULTICAST_HASH_MAX: string
export const SETTING_BRIDGE_MULTICAST_LAST_MEMBER_COUNT: string
export const SETTING_BRIDGE_MULTICAST_LAST_MEMBER_INTERVAL: string
export const SETTING_BRIDGE_MULTICAST_MEMBERSHIP_INTERVAL: string
export const SETTING_BRIDGE_MULTICAST_QUERIER: string
export const SETTING_BRIDGE_MULTICAST_QUERIER_INTERVAL: string
export const SETTING_BRIDGE_MULTICAST_QUERY_INTERVAL: string
export const SETTING_BRIDGE_MULTICAST_QUERY_RESPONSE_INTERVAL: string
export const SETTING_BRIDGE_MULTICAST_QUERY_USE_IFADDR: string
export const SETTING_BRIDGE_MULTICAST_ROUTER: string
export const SETTING_BRIDGE_MULTICAST_SNOOPING: string
export const SETTING_BRIDGE_MULTICAST_STARTUP_QUERY_COUNT: string
export const SETTING_BRIDGE_MULTICAST_STARTUP_QUERY_INTERVAL: string
export const SETTING_BRIDGE_PORT_HAIRPIN_MODE: string
export const SETTING_BRIDGE_PORT_PATH_COST: string
export const SETTING_BRIDGE_PORT_PRIORITY: string
export const SETTING_BRIDGE_PORT_SETTING_NAME: string
export const SETTING_BRIDGE_PORT_VLANS: string
export const SETTING_BRIDGE_PRIORITY: string
export const SETTING_BRIDGE_SETTING_NAME: string
export const SETTING_BRIDGE_STP: string
export const SETTING_BRIDGE_VLANS: string
export const SETTING_BRIDGE_VLAN_DEFAULT_PVID: string
export const SETTING_BRIDGE_VLAN_FILTERING: string
export const SETTING_BRIDGE_VLAN_PROTOCOL: string
export const SETTING_BRIDGE_VLAN_STATS_ENABLED: string
export const SETTING_CDMA_MTU: string
export const SETTING_CDMA_NUMBER: string
export const SETTING_CDMA_PASSWORD: string
export const SETTING_CDMA_PASSWORD_FLAGS: string
export const SETTING_CDMA_SETTING_NAME: string
export const SETTING_CDMA_USERNAME: string
export const SETTING_CONNECTION_AUTH_RETRIES: string
export const SETTING_CONNECTION_AUTOCONNECT: string
export const SETTING_CONNECTION_AUTOCONNECT_PRIORITY: string
export const SETTING_CONNECTION_AUTOCONNECT_PRIORITY_DEFAULT: number
export const SETTING_CONNECTION_AUTOCONNECT_PRIORITY_MAX: number
export const SETTING_CONNECTION_AUTOCONNECT_PRIORITY_MIN: number
export const SETTING_CONNECTION_AUTOCONNECT_RETRIES: string
export const SETTING_CONNECTION_AUTOCONNECT_SLAVES: string
export const SETTING_CONNECTION_GATEWAY_PING_TIMEOUT: string
export const SETTING_CONNECTION_ID: string
export const SETTING_CONNECTION_INTERFACE_NAME: string
export const SETTING_CONNECTION_LLDP: string
export const SETTING_CONNECTION_LLMNR: string
export const SETTING_CONNECTION_MASTER: string
export const SETTING_CONNECTION_MDNS: string
export const SETTING_CONNECTION_METERED: string
export const SETTING_CONNECTION_MUD_URL: string
export const SETTING_CONNECTION_MULTI_CONNECT: string
export const SETTING_CONNECTION_PERMISSIONS: string
export const SETTING_CONNECTION_READ_ONLY: string
export const SETTING_CONNECTION_SECONDARIES: string
export const SETTING_CONNECTION_SETTING_NAME: string
export const SETTING_CONNECTION_SLAVE_TYPE: string
export const SETTING_CONNECTION_STABLE_ID: string
export const SETTING_CONNECTION_TIMESTAMP: string
export const SETTING_CONNECTION_TYPE: string
export const SETTING_CONNECTION_UUID: string
export const SETTING_CONNECTION_WAIT_DEVICE_TIMEOUT: string
export const SETTING_CONNECTION_ZONE: string
export const SETTING_DCB_APP_FCOE_FLAGS: string
export const SETTING_DCB_APP_FCOE_MODE: string
export const SETTING_DCB_APP_FCOE_PRIORITY: string
export const SETTING_DCB_APP_FIP_FLAGS: string
export const SETTING_DCB_APP_FIP_PRIORITY: string
export const SETTING_DCB_APP_ISCSI_FLAGS: string
export const SETTING_DCB_APP_ISCSI_PRIORITY: string
export const SETTING_DCB_FCOE_MODE_FABRIC: string
export const SETTING_DCB_FCOE_MODE_VN2VN: string
export const SETTING_DCB_PRIORITY_BANDWIDTH: string
export const SETTING_DCB_PRIORITY_FLOW_CONTROL: string
export const SETTING_DCB_PRIORITY_FLOW_CONTROL_FLAGS: string
export const SETTING_DCB_PRIORITY_GROUP_BANDWIDTH: string
export const SETTING_DCB_PRIORITY_GROUP_FLAGS: string
export const SETTING_DCB_PRIORITY_GROUP_ID: string
export const SETTING_DCB_PRIORITY_STRICT_BANDWIDTH: string
export const SETTING_DCB_PRIORITY_TRAFFIC_CLASS: string
export const SETTING_DCB_SETTING_NAME: string
export const SETTING_DNS_OPTION_ATTEMPTS: string
export const SETTING_DNS_OPTION_DEBUG: string
export const SETTING_DNS_OPTION_EDNS0: string
export const SETTING_DNS_OPTION_INET6: string
export const SETTING_DNS_OPTION_IP6_BYTESTRING: string
export const SETTING_DNS_OPTION_IP6_DOTINT: string
export const SETTING_DNS_OPTION_NDOTS: string
export const SETTING_DNS_OPTION_NO_CHECK_NAMES: string
export const SETTING_DNS_OPTION_NO_IP6_DOTINT: string
export const SETTING_DNS_OPTION_NO_RELOAD: string
export const SETTING_DNS_OPTION_NO_TLD_QUERY: string
export const SETTING_DNS_OPTION_ROTATE: string
export const SETTING_DNS_OPTION_SINGLE_REQUEST: string
export const SETTING_DNS_OPTION_SINGLE_REQUEST_REOPEN: string
export const SETTING_DNS_OPTION_TIMEOUT: string
export const SETTING_DNS_OPTION_TRUST_AD: string
export const SETTING_DNS_OPTION_USE_VC: string
export const SETTING_DUMMY_SETTING_NAME: string
export const SETTING_ETHTOOL_SETTING_NAME: string
export const SETTING_GENERIC_SETTING_NAME: string
export const SETTING_GSM_APN: string
export const SETTING_GSM_AUTO_CONFIG: string
export const SETTING_GSM_DEVICE_ID: string
export const SETTING_GSM_HOME_ONLY: string
export const SETTING_GSM_MTU: string
export const SETTING_GSM_NETWORK_ID: string
export const SETTING_GSM_NUMBER: string
export const SETTING_GSM_PASSWORD: string
export const SETTING_GSM_PASSWORD_FLAGS: string
export const SETTING_GSM_PIN: string
export const SETTING_GSM_PIN_FLAGS: string
export const SETTING_GSM_SETTING_NAME: string
export const SETTING_GSM_SIM_ID: string
export const SETTING_GSM_SIM_OPERATOR_ID: string
export const SETTING_GSM_USERNAME: string
export const SETTING_HOSTNAME_FROM_DHCP: string
export const SETTING_HOSTNAME_FROM_DNS_LOOKUP: string
export const SETTING_HOSTNAME_ONLY_FROM_DEFAULT: string
export const SETTING_HOSTNAME_PRIORITY: string
export const SETTING_HOSTNAME_SETTING_NAME: string
export const SETTING_INFINIBAND_MAC_ADDRESS: string
export const SETTING_INFINIBAND_MTU: string
export const SETTING_INFINIBAND_PARENT: string
export const SETTING_INFINIBAND_P_KEY: string
export const SETTING_INFINIBAND_SETTING_NAME: string
export const SETTING_INFINIBAND_TRANSPORT_MODE: string
export const SETTING_IP4_CONFIG_DHCP_CLIENT_ID: string
export const SETTING_IP4_CONFIG_DHCP_FQDN: string
export const SETTING_IP4_CONFIG_DHCP_VENDOR_CLASS_IDENTIFIER: string
export const SETTING_IP4_CONFIG_METHOD_AUTO: string
export const SETTING_IP4_CONFIG_METHOD_DISABLED: string
export const SETTING_IP4_CONFIG_METHOD_LINK_LOCAL: string
export const SETTING_IP4_CONFIG_METHOD_MANUAL: string
export const SETTING_IP4_CONFIG_METHOD_SHARED: string
export const SETTING_IP4_CONFIG_SETTING_NAME: string
export const SETTING_IP6_CONFIG_ADDR_GEN_MODE: string
export const SETTING_IP6_CONFIG_DHCP_DUID: string
export const SETTING_IP6_CONFIG_IP6_PRIVACY: string
export const SETTING_IP6_CONFIG_METHOD_AUTO: string
export const SETTING_IP6_CONFIG_METHOD_DHCP: string
export const SETTING_IP6_CONFIG_METHOD_DISABLED: string
export const SETTING_IP6_CONFIG_METHOD_IGNORE: string
export const SETTING_IP6_CONFIG_METHOD_LINK_LOCAL: string
export const SETTING_IP6_CONFIG_METHOD_MANUAL: string
export const SETTING_IP6_CONFIG_METHOD_SHARED: string
export const SETTING_IP6_CONFIG_RA_TIMEOUT: string
export const SETTING_IP6_CONFIG_SETTING_NAME: string
export const SETTING_IP6_CONFIG_TOKEN: string
export const SETTING_IP_CONFIG_ADDRESSES: string
export const SETTING_IP_CONFIG_DAD_TIMEOUT: string
export const SETTING_IP_CONFIG_DAD_TIMEOUT_MAX: number
export const SETTING_IP_CONFIG_DHCP_HOSTNAME: string
export const SETTING_IP_CONFIG_DHCP_HOSTNAME_FLAGS: string
export const SETTING_IP_CONFIG_DHCP_IAID: string
export const SETTING_IP_CONFIG_DHCP_REJECT_SERVERS: string
export const SETTING_IP_CONFIG_DHCP_SEND_HOSTNAME: string
export const SETTING_IP_CONFIG_DHCP_TIMEOUT: string
export const SETTING_IP_CONFIG_DNS: string
export const SETTING_IP_CONFIG_DNS_OPTIONS: string
export const SETTING_IP_CONFIG_DNS_PRIORITY: string
export const SETTING_IP_CONFIG_DNS_SEARCH: string
export const SETTING_IP_CONFIG_GATEWAY: string
export const SETTING_IP_CONFIG_IGNORE_AUTO_DNS: string
export const SETTING_IP_CONFIG_IGNORE_AUTO_ROUTES: string
export const SETTING_IP_CONFIG_MAY_FAIL: string
export const SETTING_IP_CONFIG_METHOD: string
export const SETTING_IP_CONFIG_NEVER_DEFAULT: string
export const SETTING_IP_CONFIG_ROUTES: string
export const SETTING_IP_CONFIG_ROUTE_METRIC: string
export const SETTING_IP_CONFIG_ROUTE_TABLE: string
export const SETTING_IP_CONFIG_ROUTING_RULES: string
export const SETTING_IP_TUNNEL_ENCAPSULATION_LIMIT: string
export const SETTING_IP_TUNNEL_FLAGS: string
export const SETTING_IP_TUNNEL_FLOW_LABEL: string
export const SETTING_IP_TUNNEL_INPUT_KEY: string
export const SETTING_IP_TUNNEL_LOCAL: string
export const SETTING_IP_TUNNEL_MODE: string
export const SETTING_IP_TUNNEL_MTU: string
export const SETTING_IP_TUNNEL_OUTPUT_KEY: string
export const SETTING_IP_TUNNEL_PARENT: string
export const SETTING_IP_TUNNEL_PATH_MTU_DISCOVERY: string
export const SETTING_IP_TUNNEL_REMOTE: string
export const SETTING_IP_TUNNEL_SETTING_NAME: string
export const SETTING_IP_TUNNEL_TOS: string
export const SETTING_IP_TUNNEL_TTL: string
export const SETTING_MACSEC_ENCRYPT: string
export const SETTING_MACSEC_MKA_CAK: string
export const SETTING_MACSEC_MKA_CAK_FLAGS: string
export const SETTING_MACSEC_MKA_CAK_LENGTH: number
export const SETTING_MACSEC_MKA_CKN: string
export const SETTING_MACSEC_MKA_CKN_LENGTH: number
export const SETTING_MACSEC_MODE: string
export const SETTING_MACSEC_PARENT: string
export const SETTING_MACSEC_PORT: string
export const SETTING_MACSEC_SEND_SCI: string
export const SETTING_MACSEC_SETTING_NAME: string
export const SETTING_MACSEC_VALIDATION: string
export const SETTING_MACVLAN_MODE: string
export const SETTING_MACVLAN_PARENT: string
export const SETTING_MACVLAN_PROMISCUOUS: string
export const SETTING_MACVLAN_SETTING_NAME: string
export const SETTING_MACVLAN_TAP: string
export const SETTING_MATCH_DRIVER: string
export const SETTING_MATCH_INTERFACE_NAME: string
export const SETTING_MATCH_KERNEL_COMMAND_LINE: string
export const SETTING_MATCH_PATH: string
export const SETTING_MATCH_SETTING_NAME: string
export const SETTING_NAME: string
export const SETTING_OLPC_MESH_CHANNEL: string
export const SETTING_OLPC_MESH_DHCP_ANYCAST_ADDRESS: string
export const SETTING_OLPC_MESH_SETTING_NAME: string
export const SETTING_OLPC_MESH_SSID: string
export const SETTING_OVS_BRIDGE_DATAPATH_TYPE: string
export const SETTING_OVS_BRIDGE_FAIL_MODE: string
export const SETTING_OVS_BRIDGE_MCAST_SNOOPING_ENABLE: string
export const SETTING_OVS_BRIDGE_RSTP_ENABLE: string
export const SETTING_OVS_BRIDGE_SETTING_NAME: string
export const SETTING_OVS_BRIDGE_STP_ENABLE: string
export const SETTING_OVS_DPDK_DEVARGS: string
export const SETTING_OVS_DPDK_SETTING_NAME: string
export const SETTING_OVS_EXTERNAL_IDS_DATA: string
export const SETTING_OVS_EXTERNAL_IDS_SETTING_NAME: string
export const SETTING_OVS_INTERFACE_SETTING_NAME: string
export const SETTING_OVS_INTERFACE_TYPE: string
export const SETTING_OVS_PATCH_PEER: string
export const SETTING_OVS_PATCH_SETTING_NAME: string
export const SETTING_OVS_PORT_BOND_DOWNDELAY: string
export const SETTING_OVS_PORT_BOND_MODE: string
export const SETTING_OVS_PORT_BOND_UPDELAY: string
export const SETTING_OVS_PORT_LACP: string
export const SETTING_OVS_PORT_SETTING_NAME: string
export const SETTING_OVS_PORT_TAG: string
export const SETTING_OVS_PORT_VLAN_MODE: string
export const SETTING_PARAM_FUZZY_IGNORE: number
export const SETTING_PARAM_REQUIRED: number
export const SETTING_PARAM_SECRET: number
export const SETTING_PPPOE_PARENT: string
export const SETTING_PPPOE_PASSWORD: string
export const SETTING_PPPOE_PASSWORD_FLAGS: string
export const SETTING_PPPOE_SERVICE: string
export const SETTING_PPPOE_SETTING_NAME: string
export const SETTING_PPPOE_USERNAME: string
export const SETTING_PPP_BAUD: string
export const SETTING_PPP_CRTSCTS: string
export const SETTING_PPP_LCP_ECHO_FAILURE: string
export const SETTING_PPP_LCP_ECHO_INTERVAL: string
export const SETTING_PPP_MPPE_STATEFUL: string
export const SETTING_PPP_MRU: string
export const SETTING_PPP_MTU: string
export const SETTING_PPP_NOAUTH: string
export const SETTING_PPP_NOBSDCOMP: string
export const SETTING_PPP_NODEFLATE: string
export const SETTING_PPP_NO_VJ_COMP: string
export const SETTING_PPP_REFUSE_CHAP: string
export const SETTING_PPP_REFUSE_EAP: string
export const SETTING_PPP_REFUSE_MSCHAP: string
export const SETTING_PPP_REFUSE_MSCHAPV2: string
export const SETTING_PPP_REFUSE_PAP: string
export const SETTING_PPP_REQUIRE_MPPE: string
export const SETTING_PPP_REQUIRE_MPPE_128: string
export const SETTING_PPP_SETTING_NAME: string
export const SETTING_PROXY_BROWSER_ONLY: string
export const SETTING_PROXY_METHOD: string
export const SETTING_PROXY_PAC_SCRIPT: string
export const SETTING_PROXY_PAC_URL: string
export const SETTING_PROXY_SETTING_NAME: string
export const SETTING_SERIAL_BAUD: string
export const SETTING_SERIAL_BITS: string
export const SETTING_SERIAL_PARITY: string
export const SETTING_SERIAL_SEND_DELAY: string
export const SETTING_SERIAL_SETTING_NAME: string
export const SETTING_SERIAL_STOPBITS: string
export const SETTING_SRIOV_AUTOPROBE_DRIVERS: string
export const SETTING_SRIOV_SETTING_NAME: string
export const SETTING_SRIOV_TOTAL_VFS: string
export const SETTING_SRIOV_VFS: string
export const SETTING_TC_CONFIG_QDISCS: string
export const SETTING_TC_CONFIG_SETTING_NAME: string
export const SETTING_TC_CONFIG_TFILTERS: string
export const SETTING_TEAM_CONFIG: string
export const SETTING_TEAM_LINK_WATCHERS: string
export const SETTING_TEAM_MCAST_REJOIN_COUNT: string
export const SETTING_TEAM_MCAST_REJOIN_INTERVAL: string
export const SETTING_TEAM_NOTIFY_MCAST_COUNT_ACTIVEBACKUP_DEFAULT: number
export const SETTING_TEAM_NOTIFY_PEERS_COUNT: string
export const SETTING_TEAM_NOTIFY_PEERS_COUNT_ACTIVEBACKUP_DEFAULT: number
export const SETTING_TEAM_NOTIFY_PEERS_INTERVAL: string
export const SETTING_TEAM_PORT_CONFIG: string
export const SETTING_TEAM_PORT_LACP_KEY: string
export const SETTING_TEAM_PORT_LACP_PRIO: string
export const SETTING_TEAM_PORT_LACP_PRIO_DEFAULT: number
export const SETTING_TEAM_PORT_LINK_WATCHERS: string
export const SETTING_TEAM_PORT_PRIO: string
export const SETTING_TEAM_PORT_QUEUE_ID: string
export const SETTING_TEAM_PORT_QUEUE_ID_DEFAULT: number
export const SETTING_TEAM_PORT_SETTING_NAME: string
export const SETTING_TEAM_PORT_STICKY: string
export const SETTING_TEAM_RUNNER: string
export const SETTING_TEAM_RUNNER_ACTIVE: string
export const SETTING_TEAM_RUNNER_ACTIVEBACKUP: string
export const SETTING_TEAM_RUNNER_AGG_SELECT_POLICY: string
export const SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_BANDWIDTH: string
export const SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_COUNT: string
export const SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO: string
export const SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_LACP_PRIO_STABLE: string
export const SETTING_TEAM_RUNNER_AGG_SELECT_POLICY_PORT_CONFIG: string
export const SETTING_TEAM_RUNNER_BROADCAST: string
export const SETTING_TEAM_RUNNER_FAST_RATE: string
export const SETTING_TEAM_RUNNER_HWADDR_POLICY: string
export const SETTING_TEAM_RUNNER_HWADDR_POLICY_BY_ACTIVE: string
export const SETTING_TEAM_RUNNER_HWADDR_POLICY_ONLY_ACTIVE: string
export const SETTING_TEAM_RUNNER_HWADDR_POLICY_SAME_ALL: string
export const SETTING_TEAM_RUNNER_LACP: string
export const SETTING_TEAM_RUNNER_LOADBALANCE: string
export const SETTING_TEAM_RUNNER_MIN_PORTS: string
export const SETTING_TEAM_RUNNER_RANDOM: string
export const SETTING_TEAM_RUNNER_ROUNDROBIN: string
export const SETTING_TEAM_RUNNER_SYS_PRIO: string
export const SETTING_TEAM_RUNNER_SYS_PRIO_DEFAULT: number
export const SETTING_TEAM_RUNNER_TX_BALANCER: string
export const SETTING_TEAM_RUNNER_TX_BALANCER_INTERVAL: string
export const SETTING_TEAM_RUNNER_TX_BALANCER_INTERVAL_DEFAULT: number
export const SETTING_TEAM_RUNNER_TX_HASH: string
export const SETTING_TEAM_SETTING_NAME: string
export const SETTING_TUN_GROUP: string
export const SETTING_TUN_MODE: string
export const SETTING_TUN_MULTI_QUEUE: string
export const SETTING_TUN_OWNER: string
export const SETTING_TUN_PI: string
export const SETTING_TUN_SETTING_NAME: string
export const SETTING_TUN_VNET_HDR: string
export const SETTING_USER_DATA: string
export const SETTING_USER_SETTING_NAME: string
export const SETTING_VETH_PEER: string
export const SETTING_VETH_SETTING_NAME: string
export const SETTING_VLAN_EGRESS_PRIORITY_MAP: string
export const SETTING_VLAN_FLAGS: string
export const SETTING_VLAN_ID: string
export const SETTING_VLAN_INGRESS_PRIORITY_MAP: string
export const SETTING_VLAN_PARENT: string
export const SETTING_VLAN_SETTING_NAME: string
export const SETTING_VPN_DATA: string
export const SETTING_VPN_PERSISTENT: string
export const SETTING_VPN_SECRETS: string
export const SETTING_VPN_SERVICE_TYPE: string
export const SETTING_VPN_SETTING_NAME: string
export const SETTING_VPN_TIMEOUT: string
export const SETTING_VPN_USER_NAME: string
export const SETTING_VRF_SETTING_NAME: string
export const SETTING_VRF_TABLE: string
export const SETTING_VXLAN_AGEING: string
export const SETTING_VXLAN_DESTINATION_PORT: string
export const SETTING_VXLAN_ID: string
export const SETTING_VXLAN_L2_MISS: string
export const SETTING_VXLAN_L3_MISS: string
export const SETTING_VXLAN_LEARNING: string
export const SETTING_VXLAN_LIMIT: string
export const SETTING_VXLAN_LOCAL: string
export const SETTING_VXLAN_PARENT: string
export const SETTING_VXLAN_PROXY: string
export const SETTING_VXLAN_REMOTE: string
export const SETTING_VXLAN_RSC: string
export const SETTING_VXLAN_SETTING_NAME: string
export const SETTING_VXLAN_SOURCE_PORT_MAX: string
export const SETTING_VXLAN_SOURCE_PORT_MIN: string
export const SETTING_VXLAN_TOS: string
export const SETTING_VXLAN_TTL: string
export const SETTING_WIFI_P2P_PEER: string
export const SETTING_WIFI_P2P_SETTING_NAME: string
export const SETTING_WIFI_P2P_WFD_IES: string
export const SETTING_WIFI_P2P_WPS_METHOD: string
export const SETTING_WIMAX_MAC_ADDRESS: string
export const SETTING_WIMAX_NETWORK_NAME: string
export const SETTING_WIMAX_SETTING_NAME: string
export const SETTING_WIRED_AUTO_NEGOTIATE: string
export const SETTING_WIRED_CLONED_MAC_ADDRESS: string
export const SETTING_WIRED_DUPLEX: string
export const SETTING_WIRED_GENERATE_MAC_ADDRESS_MASK: string
export const SETTING_WIRED_MAC_ADDRESS: string
export const SETTING_WIRED_MAC_ADDRESS_BLACKLIST: string
export const SETTING_WIRED_MTU: string
export const SETTING_WIRED_PORT: string
export const SETTING_WIRED_S390_NETTYPE: string
export const SETTING_WIRED_S390_OPTIONS: string
export const SETTING_WIRED_S390_SUBCHANNELS: string
export const SETTING_WIRED_SETTING_NAME: string
export const SETTING_WIRED_SPEED: string
export const SETTING_WIRED_WAKE_ON_LAN: string
export const SETTING_WIRED_WAKE_ON_LAN_PASSWORD: string
export const SETTING_WIREGUARD_FWMARK: string
export const SETTING_WIREGUARD_IP4_AUTO_DEFAULT_ROUTE: string
export const SETTING_WIREGUARD_IP6_AUTO_DEFAULT_ROUTE: string
export const SETTING_WIREGUARD_LISTEN_PORT: string
export const SETTING_WIREGUARD_MTU: string
export const SETTING_WIREGUARD_PEERS: string
export const SETTING_WIREGUARD_PEER_ROUTES: string
export const SETTING_WIREGUARD_PRIVATE_KEY: string
export const SETTING_WIREGUARD_PRIVATE_KEY_FLAGS: string
export const SETTING_WIREGUARD_SETTING_NAME: string
export const SETTING_WIRELESS_AP_ISOLATION: string
export const SETTING_WIRELESS_BAND: string
export const SETTING_WIRELESS_BSSID: string
export const SETTING_WIRELESS_CHANNEL: string
export const SETTING_WIRELESS_CLONED_MAC_ADDRESS: string
export const SETTING_WIRELESS_GENERATE_MAC_ADDRESS_MASK: string
export const SETTING_WIRELESS_HIDDEN: string
export const SETTING_WIRELESS_MAC_ADDRESS: string
export const SETTING_WIRELESS_MAC_ADDRESS_BLACKLIST: string
export const SETTING_WIRELESS_MAC_ADDRESS_RANDOMIZATION: string
export const SETTING_WIRELESS_MODE: string
export const SETTING_WIRELESS_MODE_ADHOC: string
export const SETTING_WIRELESS_MODE_AP: string
export const SETTING_WIRELESS_MODE_INFRA: string
export const SETTING_WIRELESS_MODE_MESH: string
export const SETTING_WIRELESS_MTU: string
export const SETTING_WIRELESS_POWERSAVE: string
export const SETTING_WIRELESS_RATE: string
export const SETTING_WIRELESS_SECURITY_AUTH_ALG: string
export const SETTING_WIRELESS_SECURITY_FILS: string
export const SETTING_WIRELESS_SECURITY_GROUP: string
export const SETTING_WIRELESS_SECURITY_KEY_MGMT: string
export const SETTING_WIRELESS_SECURITY_LEAP_PASSWORD: string
export const SETTING_WIRELESS_SECURITY_LEAP_PASSWORD_FLAGS: string
export const SETTING_WIRELESS_SECURITY_LEAP_USERNAME: string
export const SETTING_WIRELESS_SECURITY_PAIRWISE: string
export const SETTING_WIRELESS_SECURITY_PMF: string
export const SETTING_WIRELESS_SECURITY_PROTO: string
export const SETTING_WIRELESS_SECURITY_PSK: string
export const SETTING_WIRELESS_SECURITY_PSK_FLAGS: string
export const SETTING_WIRELESS_SECURITY_SETTING_NAME: string
export const SETTING_WIRELESS_SECURITY_WEP_KEY0: string
export const SETTING_WIRELESS_SECURITY_WEP_KEY1: string
export const SETTING_WIRELESS_SECURITY_WEP_KEY2: string
export const SETTING_WIRELESS_SECURITY_WEP_KEY3: string
export const SETTING_WIRELESS_SECURITY_WEP_KEY_FLAGS: string
export const SETTING_WIRELESS_SECURITY_WEP_KEY_TYPE: string
export const SETTING_WIRELESS_SECURITY_WEP_TX_KEYIDX: string
export const SETTING_WIRELESS_SECURITY_WPS_METHOD: string
export const SETTING_WIRELESS_SEEN_BSSIDS: string
export const SETTING_WIRELESS_SETTING_NAME: string
export const SETTING_WIRELESS_SSID: string
export const SETTING_WIRELESS_TX_POWER: string
export const SETTING_WIRELESS_WAKE_ON_WLAN: string
export const SETTING_WPAN_CHANNEL: string
export const SETTING_WPAN_CHANNEL_DEFAULT: number
export const SETTING_WPAN_MAC_ADDRESS: string
export const SETTING_WPAN_PAGE: string
export const SETTING_WPAN_PAGE_DEFAULT: number
export const SETTING_WPAN_PAN_ID: string
export const SETTING_WPAN_SETTING_NAME: string
export const SETTING_WPAN_SHORT_ADDRESS: string
export const SRIOV_VF_ATTRIBUTE_MAC: string
export const SRIOV_VF_ATTRIBUTE_MAX_TX_RATE: string
export const SRIOV_VF_ATTRIBUTE_MIN_TX_RATE: string
export const SRIOV_VF_ATTRIBUTE_SPOOF_CHECK: string
export const SRIOV_VF_ATTRIBUTE_TRUST: string
export const TEAM_LINK_WATCHER_ARP_PING: string
export const TEAM_LINK_WATCHER_ETHTOOL: string
export const TEAM_LINK_WATCHER_NSNA_PING: string
export const UTILS_HWADDR_LEN_MAX: number
export const VLAN_FLAGS_ALL: number
export const VPN_CONNECTION_BANNER: string
export const VPN_CONNECTION_VPN_STATE: string
export const VPN_DBUS_PLUGIN_INTERFACE: string
export const VPN_DBUS_PLUGIN_PATH: string
export const VPN_EDITOR_PLUGIN_DESCRIPTION: string
export const VPN_EDITOR_PLUGIN_NAME: string
export const VPN_EDITOR_PLUGIN_SERVICE: string
export const VPN_PLUGIN_CAN_PERSIST: string
export const VPN_PLUGIN_CONFIG_BANNER: string
export const VPN_PLUGIN_CONFIG_EXT_GATEWAY: string
export const VPN_PLUGIN_CONFIG_HAS_IP4: string
export const VPN_PLUGIN_CONFIG_HAS_IP6: string
export const VPN_PLUGIN_CONFIG_MTU: string
export const VPN_PLUGIN_CONFIG_PROXY_PAC: string
export const VPN_PLUGIN_CONFIG_TUNDEV: string
export const VPN_PLUGIN_INFO_FILENAME: string
export const VPN_PLUGIN_INFO_KEYFILE: string
export const VPN_PLUGIN_INFO_KF_GROUP_CONNECTION: string
export const VPN_PLUGIN_INFO_KF_GROUP_GNOME: string
export const VPN_PLUGIN_INFO_KF_GROUP_LIBNM: string
export const VPN_PLUGIN_INFO_NAME: string
export const VPN_PLUGIN_IP4_CONFIG_ADDRESS: string
export const VPN_PLUGIN_IP4_CONFIG_DNS: string
export const VPN_PLUGIN_IP4_CONFIG_DOMAIN: string
export const VPN_PLUGIN_IP4_CONFIG_DOMAINS: string
export const VPN_PLUGIN_IP4_CONFIG_INT_GATEWAY: string
export const VPN_PLUGIN_IP4_CONFIG_MSS: string
export const VPN_PLUGIN_IP4_CONFIG_NBNS: string
export const VPN_PLUGIN_IP4_CONFIG_NEVER_DEFAULT: string
export const VPN_PLUGIN_IP4_CONFIG_PREFIX: string
export const VPN_PLUGIN_IP4_CONFIG_PRESERVE_ROUTES: string
export const VPN_PLUGIN_IP4_CONFIG_PTP: string
export const VPN_PLUGIN_IP4_CONFIG_ROUTES: string
export const VPN_PLUGIN_IP6_CONFIG_ADDRESS: string
export const VPN_PLUGIN_IP6_CONFIG_DNS: string
export const VPN_PLUGIN_IP6_CONFIG_DOMAIN: string
export const VPN_PLUGIN_IP6_CONFIG_DOMAINS: string
export const VPN_PLUGIN_IP6_CONFIG_INT_GATEWAY: string
export const VPN_PLUGIN_IP6_CONFIG_MSS: string
export const VPN_PLUGIN_IP6_CONFIG_NEVER_DEFAULT: string
export const VPN_PLUGIN_IP6_CONFIG_PREFIX: string
export const VPN_PLUGIN_IP6_CONFIG_PRESERVE_ROUTES: string
export const VPN_PLUGIN_IP6_CONFIG_PTP: string
export const VPN_PLUGIN_IP6_CONFIG_ROUTES: string
export const VPN_PLUGIN_OLD_DBUS_SERVICE_NAME: string
export const VPN_PLUGIN_OLD_STATE: string
export const VPN_SERVICE_PLUGIN_DBUS_SERVICE_NAME: string
export const VPN_SERVICE_PLUGIN_DBUS_WATCH_PEER: string
export const VPN_SERVICE_PLUGIN_STATE: string
export const WIFI_P2P_PEER_FLAGS: string
export const WIFI_P2P_PEER_HW_ADDRESS: string
export const WIFI_P2P_PEER_LAST_SEEN: string
export const WIFI_P2P_PEER_MANUFACTURER: string
export const WIFI_P2P_PEER_MODEL: string
export const WIFI_P2P_PEER_MODEL_NUMBER: string
export const WIFI_P2P_PEER_NAME: string
export const WIFI_P2P_PEER_SERIAL: string
export const WIFI_P2P_PEER_STRENGTH: string
export const WIFI_P2P_PEER_WFD_IES: string
export const WIMAX_NSP_NAME: string
export const WIMAX_NSP_NETWORK_TYPE: string
export const WIMAX_NSP_SIGNAL_QUALITY: string
export const WIREGUARD_PEER_ATTR_ALLOWED_IPS: string
export const WIREGUARD_PEER_ATTR_ENDPOINT: string
export const WIREGUARD_PEER_ATTR_PERSISTENT_KEEPALIVE: string
export const WIREGUARD_PEER_ATTR_PRESHARED_KEY: string
export const WIREGUARD_PEER_ATTR_PRESHARED_KEY_FLAGS: string
export const WIREGUARD_PEER_ATTR_PUBLIC_KEY: string
export const WIREGUARD_PUBLIC_KEY_LEN: number
export const WIREGUARD_SYMMETRIC_KEY_LEN: number
export function agentManagerErrorQuark(): GLib.Quark
export function bridgeVlanFromStr(str: string): BridgeVlan
export function clientErrorQuark(): GLib.Quark
export function connectionErrorQuark(): GLib.Quark
export function cryptoErrorQuark(): GLib.Quark
export function deviceErrorQuark(): GLib.Quark
export function ethtoolOptnameIsCoalesce(optname?: string | null): boolean
export function ethtoolOptnameIsFeature(optname?: string | null): boolean
export function ethtoolOptnameIsRing(optname?: string | null): boolean
export function ipRouteAttributeValidate(name: string, value: GLib.Variant, family: number): [ /* returnType */ boolean, /* known */ boolean ]
export function ipRouteGetVariantAttributeSpec(): VariantAttributeSpec
export function ipRoutingRuleFromString(str: string, toStringFlags: IPRoutingRuleAsStringFlags, extraArgs?: GLib.HashTable | null): IPRoutingRule
export function keyfileRead(keyfile: GLib.KeyFile, baseDir: string, handlerFlags: KeyfileHandlerFlags, handler?: KeyfileReadHandler | null): Connection
export function keyfileWrite(connection: Connection, handlerFlags: KeyfileHandlerFlags, handler?: KeyfileWriteHandler | null): GLib.KeyFile
export function managerErrorQuark(): GLib.Quark
export function secretAgentErrorQuark(): GLib.Quark
export function settingsErrorQuark(): GLib.Quark
export function sriovVfAttributeValidate(name: string, value: GLib.Variant): [ /* returnType */ boolean, /* known */ boolean ]
export function utilsApModeSecurityValid(type: UtilsSecurityType, wifiCaps: DeviceWifiCapabilities): boolean
export function utilsBase64secretDecode(base64Key: string, requiredKeyLen: number, outKey?: number | null): boolean
export function utilsBin2hexstr(src: any, finalLen: number): string
export function utilsBondModeIntToString(mode: number): string
export function utilsBondModeStringToInt(mode: string): number
export function utilsCheckVirtualDeviceCompatibility(virtualType: GObject.Type, otherType: GObject.Type): boolean
export function utilsEnumFromStr(type: GObject.Type, str: string): [ /* returnType */ boolean, /* outValue */ number | null, /* errToken */ string | null ]
export function utilsEnumGetValues(type: GObject.Type, from: number, to: number): string[]
export function utilsEnumToStr(type: GObject.Type, value: number): string
export function utilsEscapeSsid(ssid: any): string
export function utilsFileIsCertificate(filename: string): boolean
export function utilsFileIsPkcs12(filename: string): boolean
export function utilsFileIsPrivateKey(filename: string): [ /* returnType */ boolean, /* outEncrypted */ boolean ]
export function utilsFileSearchInPaths(progname: string, tryFirst: string | null, paths: string | null, fileTestFlags: GLib.FileTest, predicate: UtilsFileSearchInPathsPredicate): string
export function utilsFormatVariantAttributes(attributes: GLib.HashTable, attrSeparator: number, keyValueSeparator: number): string
export function utilsGetTimestampMsec(): number
export function utilsHexstr2bin(hex: string): any
export function utilsHwaddrAtoba(asc: string, length: number): any
export function utilsHwaddrAton(asc: string, buffer: any): number
export function utilsHwaddrCanonical(asc: string, length: number): string
export function utilsHwaddrLen(type: number): number
export function utilsHwaddrMatches(hwaddr1: object | null, hwaddr1Len: number, hwaddr2: object | null, hwaddr2Len: number): boolean
export function utilsHwaddrNtoa(addr: any): string
export function utilsHwaddrValid(asc: string, length: number): boolean
export function utilsIfaceValidName(name?: string | null): boolean
export function utilsIp4AddressesFromVariant(value: GLib.Variant): [ /* returnType */ IPAddress[], /* outGateway */ string | null ]
export function utilsIp4AddressesToVariant(addresses: IPAddress[], gateway?: string | null): GLib.Variant
export function utilsIp4DnsFromVariant(value: GLib.Variant): string
export function utilsIp4DnsToVariant(dns: string): GLib.Variant
export function utilsIp4GetDefaultPrefix(ip: number): number
export function utilsIp4NetmaskToPrefix(netmask: number): number
export function utilsIp4PrefixToNetmask(prefix: number): number
export function utilsIp4RoutesFromVariant(value: GLib.Variant): IPRoute[]
export function utilsIp4RoutesToVariant(routes: IPRoute[]): GLib.Variant
export function utilsIp6AddressesFromVariant(value: GLib.Variant): [ /* returnType */ IPAddress[], /* outGateway */ string | null ]
export function utilsIp6AddressesToVariant(addresses: IPAddress[], gateway?: string | null): GLib.Variant
export function utilsIp6DnsFromVariant(value: GLib.Variant): string
export function utilsIp6DnsToVariant(dns: string): GLib.Variant
export function utilsIp6RoutesFromVariant(value: GLib.Variant): IPRoute[]
export function utilsIp6RoutesToVariant(routes: IPRoute[]): GLib.Variant
export function utilsIpAddressesFromVariant(value: GLib.Variant, family: number): IPAddress[]
export function utilsIpAddressesToVariant(addresses: IPAddress[]): GLib.Variant
export function utilsIpRoutesFromVariant(value: GLib.Variant, family: number): IPRoute[]
export function utilsIpRoutesToVariant(routes: IPRoute[]): GLib.Variant
export function utilsIpaddrValid(family: number, ip: string): boolean
export function utilsIsEmptySsid(ssid: any): boolean
export function utilsIsJsonObject(str: string): boolean
export function utilsIsUuid(str?: string | null): boolean
export function utilsIsValidIfaceName(name?: string | null): boolean
export function utilsParseVariantAttributes(string: string, attrSeparator: number, keyValueSeparator: number, ignoreUnknown: boolean, spec: VariantAttributeSpec): GLib.HashTable
export function utilsPrint(outputMode: number, msg: string): void
export function utilsSameSsid(ssid1: any, ssid2: any, ignoreTrailingNull: boolean): boolean
export function utilsSecurityValid(type: UtilsSecurityType, wifiCaps: DeviceWifiCapabilities, haveAp: boolean, adhoc: boolean, apFlags: TODO_80211ApFlags, apWpa: TODO_80211ApSecurityFlags, apRsn: TODO_80211ApSecurityFlags): boolean
export function utilsSriovVfFromStr(str: string): SriovVF
export function utilsSriovVfToStr(vf: SriovVF, omitIndex: boolean): string
export function utilsSsidToUtf8(ssid: any): string
export function utilsTcActionFromStr(str: string): TCAction
export function utilsTcActionToStr(action: TCAction): string
export function utilsTcQdiscFromStr(str: string): TCQdisc
export function utilsTcQdiscToStr(qdisc: TCQdisc): string
export function utilsTcTfilterFromStr(str: string): TCTfilter
export function utilsTcTfilterToStr(tfilter: TCTfilter): string
export function utilsUuidGenerate(): string
export function utilsVersion(): number
export function utilsWepKeyValid(key: string, wepType: WepKeyType): boolean
export function utilsWifi2ghzFreqs(): number
export function utilsWifi5ghzFreqs(): number
export function utilsWifiChannelToFreq(channel: number, band: string): number
export function utilsWifiFindNextChannel(channel: number, direction: number, band: string): number
export function utilsWifiFreqToChannel(freq: number): number
export function utilsWifiIsChannelValid(channel: number, band: string): boolean
export function utilsWifiStrengthBars(strength: number): string
export function utilsWpaPskValid(psk: string): boolean
export function vpnEditorPluginLoad(pluginName: string, checkService: string): VpnEditorPlugin
export function vpnEditorPluginLoadFromFile(pluginName: string, checkService: string, checkOwner: number, checkFile: UtilsCheckFilePredicate): VpnEditorPlugin
export function vpnPluginErrorQuark(): GLib.Quark
export interface KeyfileReadHandler {
    (keyfile: GLib.KeyFile, connection: Connection, handlerType: KeyfileHandlerType, handlerData: KeyfileHandlerData): boolean
}
export interface KeyfileWriteHandler {
    (connection: Connection, keyfile: GLib.KeyFile, handlerType: KeyfileHandlerType, handlerData: KeyfileHandlerData): boolean
}
export interface SecretAgentOldDeleteSecretsFunc {
    (agent: SecretAgentOld, connection: Connection, error: GLib.Error): void
}
export interface SecretAgentOldGetSecretsFunc {
    (agent: SecretAgentOld, connection: Connection, secrets: GLib.Variant, error: GLib.Error): void
}
export interface SecretAgentOldSaveSecretsFunc {
    (agent: SecretAgentOld, connection: Connection, error: GLib.Error): void
}
export interface SettingClearSecretsWithFlagsFn {
    (setting: Setting, secret: string, flags: SettingSecretFlags): boolean
}
export interface SettingValueIterFn {
    (setting: Setting, key: string, value: any, flags: GObject.ParamFlags): void
}
export interface UtilsCheckFilePredicate {
    (filename: string, stat?: object | null): boolean
}
export interface UtilsFileSearchInPathsPredicate {
    (filename: string): boolean
}
export interface UtilsPredicateStr {
    (str: string): boolean
}
export interface VpnIterFunc {
    (key: string, value: string): void
}
export interface _ConnectionForEachSecretFunc {
    (flags: SettingSecretFlags): boolean
}
export class Connection {
    /* Methods of NM.Connection */
    addSetting(setting: Setting): void
    clearSecrets(): void
    clearSecretsWithFlags(func?: SettingClearSecretsWithFlagsFn | null): void
    clearSettings(): void
    compare(b: Connection, flags: SettingCompareFlags): boolean
    diff(b: Connection, flags: SettingCompareFlags, outSettings: GLib.HashTable): boolean
    dump(): void
    forEachSettingValue(func: SettingValueIterFn): void
    getConnectionType(): string
    getId(): string
    getInterfaceName(): string
    getPath(): string
    getSetting(settingType: GObject.Type): Setting
    getSetting8021x(): Setting8021x
    getSettingAdsl(): SettingAdsl
    getSettingBluetooth(): SettingBluetooth
    getSettingBond(): SettingBond
    getSettingBridge(): SettingBridge
    getSettingBridgePort(): SettingBridgePort
    getSettingByName(name: string): Setting
    getSettingCdma(): SettingCdma
    getSettingConnection(): SettingConnection
    getSettingDcb(): SettingDcb
    getSettingDummy(): SettingDummy
    getSettingGeneric(): SettingGeneric
    getSettingGsm(): SettingGsm
    getSettingInfiniband(): SettingInfiniband
    getSettingIp4Config(): SettingIP4Config
    getSettingIp6Config(): SettingIP6Config
    getSettingIpTunnel(): SettingIPTunnel
    getSettingMacsec(): SettingMacsec
    getSettingMacvlan(): SettingMacvlan
    getSettingOlpcMesh(): SettingOlpcMesh
    getSettingOvsBridge(): SettingOvsBridge
    getSettingOvsInterface(): SettingOvsInterface
    getSettingOvsPatch(): SettingOvsPatch
    getSettingOvsPort(): SettingOvsPort
    getSettingPpp(): SettingPpp
    getSettingPppoe(): SettingPppoe
    getSettingProxy(): SettingProxy
    getSettingSerial(): SettingSerial
    getSettingTcConfig(): SettingTCConfig
    getSettingTeam(): SettingTeam
    getSettingTeamPort(): SettingTeamPort
    getSettingTun(): SettingTun
    getSettingVlan(): SettingVlan
    getSettingVpn(): SettingVpn
    getSettingVxlan(): SettingVxlan
    getSettingWimax(): SettingWimax
    getSettingWired(): SettingWired
    getSettingWireless(): SettingWireless
    getSettingWirelessSecurity(): SettingWirelessSecurity
    getSettings(): Setting[]
    getUuid(): string
    getVirtualDeviceDescription(): string
    isType(type: string): boolean
    isVirtual(): boolean
    needSecrets(): [ /* returnType */ string, /* hints */ string[] | null ]
    normalize(parameters?: GLib.HashTable | null): [ /* returnType */ boolean, /* modified */ boolean | null ]
    removeSetting(settingType: GObject.Type): void
    replaceSettings(newSettings: GLib.Variant): boolean
    replaceSettingsFromConnection(newConnection: Connection): void
    setPath(path: string): void
    toDbus(flags: ConnectionSerializationFlags): GLib.Variant
    updateSecrets(settingName: string, secrets: GLib.Variant): boolean
    verify(): boolean
    verifySecrets(): boolean
    /* Virtual methods of NM.Connection */
    vfuncChanged?(): void
    vfuncSecretsCleared?(): void
    vfuncSecretsUpdated?(setting: string): void
    /* Signals of NM.Connection */
    connect(sigName: "changed", callback: (($obj: Connection) => void)): number
    connect_after(sigName: "changed", callback: (($obj: Connection) => void)): number
    emit(sigName: "changed"): void
    on(sigName: "changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "secrets-cleared", callback: (($obj: Connection) => void)): number
    connect_after(sigName: "secrets-cleared", callback: (($obj: Connection) => void)): number
    emit(sigName: "secrets-cleared"): void
    on(sigName: "secrets-cleared", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "secrets-cleared", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "secrets-cleared", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "secrets-updated", callback: (($obj: Connection, settingName: string) => void)): number
    connect_after(sigName: "secrets-updated", callback: (($obj: Connection, settingName: string) => void)): number
    emit(sigName: "secrets-updated", settingName: string): void
    on(sigName: "secrets-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "secrets-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "secrets-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
}
export class VpnEditor {
    /* Methods of NM.VpnEditor */
    getWidget(): GObject.Object
    updateConnection(connection: Connection): boolean
    /* Virtual methods of NM.VpnEditor */
    vfuncChanged?(): void
    vfuncGetWidget?(): GObject.Object
    vfuncUpdateConnection?(connection: Connection): boolean
    /* Signals of NM.VpnEditor */
    connect(sigName: "changed", callback: (($obj: VpnEditor) => void)): number
    connect_after(sigName: "changed", callback: (($obj: VpnEditor) => void)): number
    emit(sigName: "changed"): void
    on(sigName: "changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
}
export class VpnEditorPlugin {
    /* Properties of NM.VpnEditorPlugin */
    readonly description: string
    readonly name: string
    readonly service: string
    /* Methods of NM.VpnEditorPlugin */
    export(path: string, connection: Connection): boolean
    getCapabilities(): VpnEditorPluginCapability
    getEditor(connection: Connection): VpnEditor
    getPluginInfo(): VpnPluginInfo
    getSuggestedFilename(connection: Connection): string
    getVt(vtSize: number): [ /* returnType */ number, /* vt */ VpnEditorPluginVT ]
    import(path: string): Connection
    setPluginInfo(pluginInfo?: VpnPluginInfo | null): void
    /* Virtual methods of NM.VpnEditorPlugin */
    vfuncExportToFile?(path: string, connection: Connection): boolean
    vfuncGetCapabilities?(): VpnEditorPluginCapability
    vfuncGetEditor?(connection: Connection): VpnEditor
    vfuncGetSuggestedFilename?(connection: Connection): string
    vfuncGetVt?(outVtSize: number): VpnEditorPluginVT
    vfuncNotifyPluginInfoSet?(pluginInfo: VpnPluginInfo): void
    static name: string
    static load(pluginName: string, checkService: string): VpnEditorPlugin
    static loadFromFile(pluginName: string, checkService: string, checkOwner: number, checkFile: UtilsCheckFilePredicate): VpnEditorPlugin
}
export interface AccessPoint_ConstructProps extends Object_ConstructProps {
}
export class AccessPoint {
    /* Properties of NM.AccessPoint */
    readonly bssid: string
    readonly flags: TODO_80211ApFlags
    readonly frequency: number
    readonly hwAddress: string
    readonly lastSeen: number
    readonly maxBitrate: number
    readonly mode: TODO_80211Mode
    readonly rsnFlags: TODO_80211ApSecurityFlags
    readonly ssid: any
    readonly strength: number
    readonly wpaFlags: TODO_80211ApSecurityFlags
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.AccessPoint */
    connectionValid(connection: Connection): boolean
    filterConnections(connections: Connection[]): Connection[]
    getBssid(): string
    getFlags(): TODO_80211ApFlags
    getFrequency(): number
    getLastSeen(): number
    getMaxBitrate(): number
    getMode(): TODO_80211Mode
    getRsnFlags(): TODO_80211ApSecurityFlags
    getSsid(): any
    getStrength(): number
    getWpaFlags(): TODO_80211ApSecurityFlags
    /* Methods of NM.Object */
    getClient(): Client
    getPath(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bssid", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bssid", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bssid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bssid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bssid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::flags", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::frequency", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::frequency", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::frequency", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::frequency", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::frequency", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-seen", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-seen", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-seen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-seen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-seen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-bitrate", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-bitrate", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-bitrate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-bitrate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-bitrate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mode", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rsn-flags", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rsn-flags", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rsn-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rsn-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rsn-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ssid", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ssid", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ssid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ssid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ssid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::strength", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::strength", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::strength", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::strength", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::strength", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wpa-flags", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wpa-flags", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wpa-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wpa-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wpa-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: AccessPoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: AccessPoint_ConstructProps)
    _init (config?: AccessPoint_ConstructProps): void
    static $gtype: GObject.Type
}
export interface ActiveConnection_ConstructProps extends Object_ConstructProps {
}
export class ActiveConnection {
    /* Properties of NM.ActiveConnection */
    readonly connection: RemoteConnection
    readonly "default": boolean
    readonly default6: boolean
    readonly devices: Device[]
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly id: string
    readonly ip4Config: IPConfig
    readonly ip6Config: IPConfig
    readonly master: Device
    readonly specificObjectPath: string
    readonly state: ActiveConnectionState
    readonly stateFlags: number
    readonly type: string
    readonly uuid: string
    readonly vpn: boolean
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.ActiveConnection */
    getConnection(): RemoteConnection
    getConnectionType(): string
    getDefault(): boolean
    getDefault6(): boolean
    getDevices(): Device[]
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getId(): string
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getMaster(): Device
    getSpecificObjectPath(): string
    getState(): ActiveConnectionState
    getStateFlags(): ActivationStateFlags
    getStateReason(): ActiveConnectionStateReason
    getUuid(): string
    getVpn(): boolean
    /* Methods of NM.Object */
    getClient(): Client
    getPath(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.ActiveConnection */
    connect(sigName: "state-changed", callback: (($obj: ActiveConnection, state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: ActiveConnection, state: number, reason: number) => void)): number
    emit(sigName: "state-changed", state: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connection", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default6", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default6", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default6", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default6", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default6", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::devices", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::devices", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::master", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::master", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::master", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::master", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::master", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::specific-object-path", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::specific-object-path", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::specific-object-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::specific-object-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::specific-object-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-flags", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-flags", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uuid", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vpn", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vpn", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vpn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vpn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vpn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: ActiveConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ActiveConnection_ConstructProps)
    _init (config?: ActiveConnection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Checkpoint_ConstructProps extends Object_ConstructProps {
}
export class Checkpoint {
    /* Properties of NM.Checkpoint */
    readonly created: number
    readonly devices: Device[]
    readonly rollbackTimeout: number
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.Checkpoint */
    getCreated(): number
    getDevices(): Device[]
    getRollbackTimeout(): number
    /* Methods of NM.Object */
    getClient(): Client
    getPath(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::created", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::created", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::created", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::created", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::created", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::devices", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::devices", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rollback-timeout", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rollback-timeout", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rollback-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rollback-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rollback-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: Checkpoint, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Checkpoint_ConstructProps)
    _init (config?: Checkpoint_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Client_ConstructProps extends GObject.Object_ConstructProps {
    connectivityCheckEnabled?: boolean
    dbusConnection?: Gio.DBusConnection
    instanceFlags?: number
    networkingEnabled?: boolean
    wimaxEnabled?: boolean
    wirelessEnabled?: boolean
    wwanEnabled?: boolean
}
export class Client {
    /* Properties of NM.Client */
    readonly activatingConnection: ActiveConnection
    readonly activeConnections: ActiveConnection[]
    readonly allDevices: Device[]
    readonly canModify: boolean
    readonly capabilities: number[]
    readonly checkpoints: Checkpoint[]
    readonly connections: RemoteConnection[]
    readonly connectivity: ConnectivityState
    readonly connectivityCheckAvailable: boolean
    connectivityCheckEnabled: boolean
    readonly connectivityCheckUri: string
    readonly dbusNameOwner: string
    readonly devices: Device[]
    readonly dnsConfiguration: DnsEntry[]
    readonly dnsMode: string
    readonly dnsRcManager: string
    readonly hostname: string
    instanceFlags: number
    readonly metered: number
    networkingEnabled: boolean
    readonly nmRunning: boolean
    readonly permissionsState: Ternary
    readonly primaryConnection: ActiveConnection
    readonly startup: boolean
    readonly state: State
    readonly version: string
    wimaxEnabled: boolean
    readonly wimaxHardwareEnabled: boolean
    wirelessEnabled: boolean
    readonly wirelessHardwareEnabled: boolean
    wwanEnabled: boolean
    readonly wwanHardwareEnabled: boolean
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.Client */
    activateConnectionAsync(connection?: Connection | null, device?: Device | null, specificObject?: string | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    activateConnectionFinish(result: Gio.AsyncResult): ActiveConnection
    addAndActivateConnection2(partial: Connection | null, device: Device, specificObject: string | null, options: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    addAndActivateConnection2Finish(result: Gio.AsyncResult, outResult?: GLib.Variant | null): ActiveConnection
    addAndActivateConnectionAsync(partial: Connection | null, device: Device, specificObject?: string | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    addAndActivateConnectionFinish(result: Gio.AsyncResult): ActiveConnection
    addConnection2(settings: GLib.Variant, flags: SettingsAddConnection2Flags, args: GLib.Variant | null, ignoreOutResult: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    addConnection2Finish(result: Gio.AsyncResult): [ /* returnType */ RemoteConnection, /* outResult */ GLib.Variant | null ]
    addConnectionAsync(connection: Connection, saveToDisk: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    addConnectionFinish(result: Gio.AsyncResult): RemoteConnection
    checkConnectivity(cancellable?: Gio.Cancellable | null): ConnectivityState
    checkConnectivityAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    checkConnectivityFinish(result: Gio.AsyncResult): ConnectivityState
    checkpointAdjustRollbackTimeout(checkpointPath: string, addTimeout: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    checkpointAdjustRollbackTimeoutFinish(result: Gio.AsyncResult): boolean
    checkpointCreate(devices: Device[], rollbackTimeout: number, flags: CheckpointCreateFlags, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    checkpointCreateFinish(result: Gio.AsyncResult): Checkpoint
    checkpointDestroy(checkpointPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    checkpointDestroyFinish(result: Gio.AsyncResult): boolean
    checkpointRollback(checkpointPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    checkpointRollbackFinish(result: Gio.AsyncResult): GLib.HashTable
    connectivityCheckGetAvailable(): boolean
    connectivityCheckGetEnabled(): boolean
    connectivityCheckGetUri(): string
    connectivityCheckSetEnabled(enabled: boolean): void
    dbusCall(objectPath: string, interfaceName: string, methodName: string, parameters: GLib.Variant | null, replyType: GLib.VariantType | null, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    dbusCallFinish(result: Gio.AsyncResult): GLib.Variant
    dbusSetProperty(objectPath: string, interfaceName: string, propertyName: string, value: GLib.Variant, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    dbusSetPropertyFinish(result: Gio.AsyncResult): boolean
    deactivateConnection(active: ActiveConnection, cancellable?: Gio.Cancellable | null): boolean
    deactivateConnectionAsync(active: ActiveConnection, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deactivateConnectionFinish(result: Gio.AsyncResult): boolean
    getActivatingConnection(): ActiveConnection
    getActiveConnections(): ActiveConnection[]
    getAllDevices(): Device[]
    getCapabilities(): number[]
    getCheckpoints(): Checkpoint[]
    getConnectionById(id: string): RemoteConnection
    getConnectionByPath(path: string): RemoteConnection
    getConnectionByUuid(uuid: string): RemoteConnection
    getConnections(): RemoteConnection[]
    getConnectivity(): ConnectivityState
    getContextBusyWatcher(): GObject.Object
    getDbusConnection(): Gio.DBusConnection
    getDbusNameOwner(): string
    getDeviceByIface(iface: string): Device
    getDeviceByPath(objectPath: string): Device
    getDevices(): Device[]
    getDnsConfiguration(): DnsEntry[]
    getDnsMode(): string
    getDnsRcManager(): string
    getInstanceFlags(): ClientInstanceFlags
    getLogging(level?: string | null, domains?: string | null): boolean
    getMainContext(): GLib.MainContext
    getMetered(): Metered
    getNmRunning(): boolean
    getObjectByPath(dbusPath: string): Object
    getPermissionResult(permission: ClientPermission): ClientPermissionResult
    getPermissionsState(): Ternary
    getPrimaryConnection(): ActiveConnection
    getStartup(): boolean
    getState(): State
    getVersion(): string
    loadConnections(filenames: string[], cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* failures */ string ]
    loadConnectionsAsync(filenames: string[], cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    loadConnectionsFinish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* failures */ string[] ]
    networkingGetEnabled(): boolean
    networkingSetEnabled(enabled: boolean): boolean
    reload(flags: ManagerReloadFlags, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reloadConnections(cancellable?: Gio.Cancellable | null): boolean
    reloadConnectionsAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reloadConnectionsFinish(result: Gio.AsyncResult): boolean
    reloadFinish(result: Gio.AsyncResult): boolean
    saveHostname(hostname?: string | null, cancellable?: Gio.Cancellable | null): boolean
    saveHostnameAsync(hostname?: string | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    saveHostnameFinish(result: Gio.AsyncResult): boolean
    setLogging(level?: string | null, domains?: string | null): boolean
    wimaxGetEnabled(): boolean
    wimaxHardwareGetEnabled(): boolean
    wimaxSetEnabled(enabled: boolean): void
    wirelessGetEnabled(): boolean
    wirelessHardwareGetEnabled(): boolean
    wirelessSetEnabled(enabled: boolean): void
    wwanGetEnabled(): boolean
    wwanHardwareGetEnabled(): boolean
    wwanSetEnabled(enabled: boolean): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Client */
    connect(sigName: "active-connection-added", callback: (($obj: Client, activeConnection: ActiveConnection) => void)): number
    connect_after(sigName: "active-connection-added", callback: (($obj: Client, activeConnection: ActiveConnection) => void)): number
    emit(sigName: "active-connection-added", activeConnection: ActiveConnection): void
    on(sigName: "active-connection-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "active-connection-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "active-connection-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "active-connection-removed", callback: (($obj: Client, activeConnection: ActiveConnection) => void)): number
    connect_after(sigName: "active-connection-removed", callback: (($obj: Client, activeConnection: ActiveConnection) => void)): number
    emit(sigName: "active-connection-removed", activeConnection: ActiveConnection): void
    on(sigName: "active-connection-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "active-connection-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "active-connection-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "any-device-added", callback: (($obj: Client, device: Device) => void)): number
    connect_after(sigName: "any-device-added", callback: (($obj: Client, device: Device) => void)): number
    emit(sigName: "any-device-added", device: Device): void
    on(sigName: "any-device-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "any-device-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "any-device-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "any-device-removed", callback: (($obj: Client, device: Device) => void)): number
    connect_after(sigName: "any-device-removed", callback: (($obj: Client, device: Device) => void)): number
    emit(sigName: "any-device-removed", device: Device): void
    on(sigName: "any-device-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "any-device-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "any-device-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "connection-added", callback: (($obj: Client, connection: RemoteConnection) => void)): number
    connect_after(sigName: "connection-added", callback: (($obj: Client, connection: RemoteConnection) => void)): number
    emit(sigName: "connection-added", connection: RemoteConnection): void
    on(sigName: "connection-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "connection-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "connection-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "connection-removed", callback: (($obj: Client, connection: RemoteConnection) => void)): number
    connect_after(sigName: "connection-removed", callback: (($obj: Client, connection: RemoteConnection) => void)): number
    emit(sigName: "connection-removed", connection: RemoteConnection): void
    on(sigName: "connection-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "connection-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "connection-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "device-added", callback: (($obj: Client, device: Device) => void)): number
    connect_after(sigName: "device-added", callback: (($obj: Client, device: Device) => void)): number
    emit(sigName: "device-added", device: Device): void
    on(sigName: "device-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "device-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "device-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "device-removed", callback: (($obj: Client, device: Device) => void)): number
    connect_after(sigName: "device-removed", callback: (($obj: Client, device: Device) => void)): number
    emit(sigName: "device-removed", device: Device): void
    on(sigName: "device-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "device-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "device-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "permission-changed", callback: (($obj: Client, permission: number, result: number) => void)): number
    connect_after(sigName: "permission-changed", callback: (($obj: Client, permission: number, result: number) => void)): number
    emit(sigName: "permission-changed", permission: number, result: number): void
    on(sigName: "permission-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "permission-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "permission-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::activating-connection", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::activating-connection", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::activating-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::activating-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::activating-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connections", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connections", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::all-devices", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::all-devices", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::all-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::all-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::all-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-modify", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-modify", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-modify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-modify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-modify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::checkpoints", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::checkpoints", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::checkpoints", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::checkpoints", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::checkpoints", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connections", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connections", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connectivity", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connectivity", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connectivity-check-available", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connectivity-check-available", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connectivity-check-available", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connectivity-check-available", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connectivity-check-available", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connectivity-check-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connectivity-check-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connectivity-check-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connectivity-check-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connectivity-check-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connectivity-check-uri", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connectivity-check-uri", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connectivity-check-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connectivity-check-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connectivity-check-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dbus-name-owner", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dbus-name-owner", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dbus-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dbus-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dbus-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::devices", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::devices", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dns-configuration", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-configuration", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dns-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dns-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dns-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dns-mode", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-mode", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dns-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dns-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dns-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dns-rc-manager", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-rc-manager", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dns-rc-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dns-rc-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dns-rc-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hostname", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hostname", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::instance-flags", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::instance-flags", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::instance-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::instance-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::instance-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::networking-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::networking-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::networking-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::networking-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::networking-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-running", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-running", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-running", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-running", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-running", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::permissions-state", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::permissions-state", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::permissions-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::permissions-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::permissions-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-connection", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-connection", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::startup", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::startup", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::startup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::startup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::startup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::version", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::version", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wimax-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wimax-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wimax-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wimax-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wimax-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wimax-hardware-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wimax-hardware-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wimax-hardware-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wimax-hardware-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wimax-hardware-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wireless-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wireless-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wireless-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wireless-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wireless-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wireless-hardware-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wireless-hardware-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wireless-hardware-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wireless-hardware-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wireless-hardware-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wwan-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wwan-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wwan-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wwan-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wwan-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wwan-hardware-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wwan-hardware-enabled", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wwan-hardware-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wwan-hardware-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wwan-hardware-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Client_ConstructProps)
    _init (config?: Client_ConstructProps): void
    static new(cancellable?: Gio.Cancellable | null): Client
    static newFinish(result: Gio.AsyncResult): Client
    static newAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface Device_ConstructProps extends Object_ConstructProps {
    autoconnect?: boolean
}
export class Device {
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: Device, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: Device, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Device_ConstructProps)
    _init (config?: Device_ConstructProps): void
    static disambiguateNames(devices: Device[]): string[]
    static $gtype: GObject.Type
}
export interface Device6Lowpan_ConstructProps extends Device_ConstructProps {
}
export class Device6Lowpan {
    /* Properties of NM.Device6Lowpan */
    readonly parent: Device
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.Device6Lowpan */
    getParent(): Device
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: Device6Lowpan, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: Device6Lowpan, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: Device6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Device6Lowpan_ConstructProps)
    _init (config?: Device6Lowpan_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceAdsl_ConstructProps extends Device_ConstructProps {
}
export class DeviceAdsl {
    /* Properties of NM.DeviceAdsl */
    readonly carrier: boolean
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceAdsl */
    getCarrier(): boolean
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceAdsl, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceAdsl, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::carrier", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceAdsl_ConstructProps)
    _init (config?: DeviceAdsl_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceBond_ConstructProps extends Device_ConstructProps {
}
export class DeviceBond {
    /* Properties of NM.DeviceBond */
    readonly carrier: boolean
    readonly slaves: Device[]
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceBond */
    getCarrier(): boolean
    getSlaves(): Device[]
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceBond, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceBond, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::carrier", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::slaves", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::slaves", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceBond_ConstructProps)
    _init (config?: DeviceBond_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceBridge_ConstructProps extends Device_ConstructProps {
}
export class DeviceBridge {
    /* Properties of NM.DeviceBridge */
    readonly carrier: boolean
    readonly slaves: Device[]
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceBridge */
    getCarrier(): boolean
    getSlaves(): Device[]
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceBridge, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceBridge, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::carrier", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::slaves", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::slaves", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceBridge_ConstructProps)
    _init (config?: DeviceBridge_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceBt_ConstructProps extends Device_ConstructProps {
}
export class DeviceBt {
    /* Properties of NM.DeviceBt */
    readonly btCapabilities: BluetoothCapabilities
    readonly name: string
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceBt */
    getCapabilities(): BluetoothCapabilities
    getName(): string
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceBt, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceBt, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bt-capabilities", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bt-capabilities", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bt-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bt-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bt-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceBt, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceBt_ConstructProps)
    _init (config?: DeviceBt_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceDummy_ConstructProps extends Device_ConstructProps {
}
export class DeviceDummy {
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceDummy */
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceDummy, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceDummy, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceDummy_ConstructProps)
    _init (config?: DeviceDummy_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceEthernet_ConstructProps extends Device_ConstructProps {
}
export class DeviceEthernet {
    /* Properties of NM.DeviceEthernet */
    readonly carrier: boolean
    readonly permHwAddress: string
    readonly s390Subchannels: string[]
    readonly speed: number
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceEthernet */
    getCarrier(): boolean
    getPermanentHwAddress(): string
    getS390Subchannels(): string[]
    getSpeed(): number
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceEthernet, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceEthernet, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::carrier", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::perm-hw-address", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::perm-hw-address", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::perm-hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::perm-hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::perm-hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::s390-subchannels", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::s390-subchannels", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::s390-subchannels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::s390-subchannels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::s390-subchannels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::speed", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::speed", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::speed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::speed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::speed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceEthernet, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceEthernet_ConstructProps)
    _init (config?: DeviceEthernet_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceGeneric_ConstructProps extends Device_ConstructProps {
}
export class DeviceGeneric {
    /* Properties of NM.DeviceGeneric */
    readonly typeDescription: string
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceGeneric */
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceGeneric, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceGeneric, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-description", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-description", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceGeneric_ConstructProps)
    _init (config?: DeviceGeneric_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceIPTunnel_ConstructProps extends Device_ConstructProps {
}
export class DeviceIPTunnel {
    /* Properties of NM.DeviceIPTunnel */
    readonly encapsulationLimit: number
    readonly flags: number
    readonly flowLabel: number
    readonly inputKey: string
    readonly local: string
    readonly mode: number
    readonly outputKey: string
    readonly parent: Device
    readonly pathMtuDiscovery: boolean
    readonly remote: string
    readonly tos: number
    readonly ttl: number
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceIPTunnel */
    getEncapsulationLimit(): number
    getFlags(): IPTunnelFlags
    getFlowLabel(): number
    getInputKey(): string
    getLocal(): string
    getMode(): IPTunnelMode
    getOutputKey(): string
    getParent(): Device
    getPathMtuDiscovery(): boolean
    getRemote(): string
    getTos(): number
    getTtl(): number
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceIPTunnel, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceIPTunnel, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::encapsulation-limit", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encapsulation-limit", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::encapsulation-limit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::encapsulation-limit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::encapsulation-limit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::flags", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::flow-label", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flow-label", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::flow-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::flow-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::flow-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::input-key", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-key", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::input-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::input-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::input-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mode", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::output-key", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::output-key", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::output-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::output-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::output-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path-mtu-discovery", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path-mtu-discovery", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path-mtu-discovery", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path-mtu-discovery", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path-mtu-discovery", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::remote", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::remote", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::remote", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::remote", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::remote", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tos", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tos", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tos", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tos", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tos", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ttl", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ttl", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ttl", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ttl", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ttl", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceIPTunnel_ConstructProps)
    _init (config?: DeviceIPTunnel_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceInfiniband_ConstructProps extends Device_ConstructProps {
}
export class DeviceInfiniband {
    /* Properties of NM.DeviceInfiniband */
    readonly carrier: boolean
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceInfiniband */
    getCarrier(): boolean
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceInfiniband, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceInfiniband, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::carrier", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceInfiniband_ConstructProps)
    _init (config?: DeviceInfiniband_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceMacsec_ConstructProps extends Device_ConstructProps {
}
export class DeviceMacsec {
    /* Properties of NM.DeviceMacsec */
    readonly cipherSuite: number
    readonly encodingSa: number
    readonly encrypt: boolean
    readonly es: boolean
    readonly icvLength: number
    readonly includeSci: boolean
    readonly parent: Device
    readonly protect: boolean
    readonly replayProtect: boolean
    readonly scb: boolean
    readonly sci: number
    readonly validation: string
    readonly window: number
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceMacsec */
    getCipherSuite(): number
    getEncodingSa(): number
    getEncrypt(): boolean
    getEs(): boolean
    getIcvLength(): number
    getIncludeSci(): boolean
    getParent(): Device
    getProtect(): boolean
    getReplayProtect(): boolean
    getScb(): boolean
    getSci(): number
    getValidation(): string
    getWindow(): number
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceMacsec, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceMacsec, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cipher-suite", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cipher-suite", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cipher-suite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cipher-suite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cipher-suite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::encoding-sa", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encoding-sa", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::encoding-sa", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::encoding-sa", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::encoding-sa", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::encrypt", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encrypt", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::encrypt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::encrypt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::encrypt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::es", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::es", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::es", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::es", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::es", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::icv-length", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::icv-length", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::icv-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::icv-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::icv-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::include-sci", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::include-sci", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::include-sci", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::include-sci", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::include-sci", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::protect", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::protect", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::protect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::protect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::protect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::replay-protect", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::replay-protect", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::replay-protect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::replay-protect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::replay-protect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scb", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scb", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scb", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scb", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scb", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sci", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sci", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sci", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sci", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sci", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validation", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validation", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::window", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceMacsec_ConstructProps)
    _init (config?: DeviceMacsec_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceMacvlan_ConstructProps extends Device_ConstructProps {
}
export class DeviceMacvlan {
    /* Properties of NM.DeviceMacvlan */
    readonly mode: string
    readonly noPromisc: boolean
    readonly parent: Device
    readonly tap: boolean
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceMacvlan */
    getMode(): string
    getNoPromisc(): boolean
    getParent(): Device
    getTap(): boolean
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceMacvlan, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceMacvlan, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mode", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::no-promisc", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-promisc", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::no-promisc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::no-promisc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::no-promisc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tap", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tap", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceMacvlan_ConstructProps)
    _init (config?: DeviceMacvlan_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceModem_ConstructProps extends Device_ConstructProps {
}
export class DeviceModem {
    /* Properties of NM.DeviceModem */
    readonly apn: string
    readonly currentCapabilities: DeviceModemCapabilities
    readonly deviceId: string
    readonly modemCapabilities: DeviceModemCapabilities
    readonly operatorCode: string
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceModem */
    getApn(): string
    getCurrentCapabilities(): DeviceModemCapabilities
    getDeviceId(): string
    getModemCapabilities(): DeviceModemCapabilities
    getOperatorCode(): string
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceModem, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceModem, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::apn", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::apn", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::apn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::apn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::apn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-capabilities", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-capabilities", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-id", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-id", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-capabilities", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-capabilities", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operator-code", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operator-code", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operator-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operator-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operator-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceModem, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceModem_ConstructProps)
    _init (config?: DeviceModem_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceOlpcMesh_ConstructProps extends Device_ConstructProps {
}
export class DeviceOlpcMesh {
    /* Properties of NM.DeviceOlpcMesh */
    readonly activeChannel: number
    readonly companion: DeviceWifi
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceOlpcMesh */
    getActiveChannel(): number
    getCompanion(): DeviceWifi
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceOlpcMesh, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceOlpcMesh, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-channel", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-channel", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-channel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-channel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-channel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::companion", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::companion", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::companion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::companion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::companion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceOlpcMesh_ConstructProps)
    _init (config?: DeviceOlpcMesh_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceOvsBridge_ConstructProps extends Device_ConstructProps {
}
export class DeviceOvsBridge {
    /* Properties of NM.DeviceOvsBridge */
    readonly slaves: Device[]
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceOvsBridge */
    getSlaves(): Device[]
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceOvsBridge, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceOvsBridge, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::slaves", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::slaves", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceOvsBridge_ConstructProps)
    _init (config?: DeviceOvsBridge_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceOvsInterface_ConstructProps extends Device_ConstructProps {
}
export class DeviceOvsInterface {
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceOvsInterface, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceOvsInterface, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceOvsInterface_ConstructProps)
    _init (config?: DeviceOvsInterface_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceOvsPort_ConstructProps extends Device_ConstructProps {
}
export class DeviceOvsPort {
    /* Properties of NM.DeviceOvsPort */
    readonly slaves: Device[]
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceOvsPort */
    getSlaves(): Device[]
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceOvsPort, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceOvsPort, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::slaves", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::slaves", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceOvsPort_ConstructProps)
    _init (config?: DeviceOvsPort_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DevicePpp_ConstructProps extends Device_ConstructProps {
}
export class DevicePpp {
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DevicePpp, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DevicePpp, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DevicePpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DevicePpp_ConstructProps)
    _init (config?: DevicePpp_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceTeam_ConstructProps extends Device_ConstructProps {
}
export class DeviceTeam {
    /* Properties of NM.DeviceTeam */
    readonly carrier: boolean
    readonly config: string
    readonly slaves: Device[]
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceTeam */
    getCarrier(): boolean
    getConfig(): string
    getSlaves(): Device[]
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceTeam, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceTeam, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::carrier", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::slaves", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::slaves", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceTeam_ConstructProps)
    _init (config?: DeviceTeam_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceTun_ConstructProps extends Device_ConstructProps {
}
export class DeviceTun {
    /* Properties of NM.DeviceTun */
    readonly group: number
    readonly mode: string
    readonly multiQueue: boolean
    readonly noPi: boolean
    readonly owner: number
    readonly vnetHdr: boolean
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceTun */
    getGroup(): number
    getMode(): string
    getMultiQueue(): boolean
    getNoPi(): boolean
    getOwner(): number
    getVnetHdr(): boolean
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceTun, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceTun, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::group", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mode", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multi-queue", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multi-queue", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multi-queue", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multi-queue", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multi-queue", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::no-pi", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-pi", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::no-pi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::no-pi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::no-pi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vnet-hdr", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vnet-hdr", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vnet-hdr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vnet-hdr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vnet-hdr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceTun_ConstructProps)
    _init (config?: DeviceTun_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceVeth_ConstructProps extends DeviceEthernet_ConstructProps {
}
export class DeviceVeth {
    /* Properties of NM.DeviceVeth */
    readonly peer: Device
    /* Properties of NM.DeviceEthernet */
    readonly carrier: boolean
    readonly permHwAddress: string
    readonly s390Subchannels: string[]
    readonly speed: number
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceVeth */
    getPeer(): Device
    /* Methods of NM.DeviceEthernet */
    getCarrier(): boolean
    getPermanentHwAddress(): string
    getS390Subchannels(): string[]
    getSpeed(): number
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceVeth, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceVeth, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::peer", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::peer", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::peer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::peer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::peer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::carrier", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::perm-hw-address", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::perm-hw-address", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::perm-hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::perm-hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::perm-hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::s390-subchannels", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::s390-subchannels", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::s390-subchannels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::s390-subchannels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::s390-subchannels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::speed", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::speed", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::speed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::speed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::speed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceVeth_ConstructProps)
    _init (config?: DeviceVeth_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceVlan_ConstructProps extends Device_ConstructProps {
}
export class DeviceVlan {
    /* Properties of NM.DeviceVlan */
    readonly carrier: boolean
    readonly parent: Device
    readonly vlanId: number
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceVlan */
    getCarrier(): boolean
    getParent(): Device
    getVlanId(): number
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceVlan, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceVlan, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::carrier", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vlan-id", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlan-id", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vlan-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vlan-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vlan-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceVlan_ConstructProps)
    _init (config?: DeviceVlan_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceVrf_ConstructProps extends Device_ConstructProps {
}
export class DeviceVrf {
    /* Properties of NM.DeviceVrf */
    readonly table: number
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceVrf */
    getTable(): number
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceVrf, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceVrf, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::table", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::table", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceVrf_ConstructProps)
    _init (config?: DeviceVrf_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceVxlan_ConstructProps extends Device_ConstructProps {
}
export class DeviceVxlan {
    /* Properties of NM.DeviceVxlan */
    readonly ageing: number
    readonly carrier: boolean
    readonly dstPort: number
    readonly group: string
    readonly id: number
    readonly l2miss: boolean
    readonly l3miss: boolean
    readonly learning: boolean
    readonly limit: number
    readonly local: string
    readonly parent: Device
    readonly proxy: boolean
    readonly rsc: boolean
    readonly srcPortMax: number
    readonly srcPortMin: number
    readonly tos: number
    readonly ttl: number
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceVxlan */
    getAgeing(): number
    getCarrier(): boolean
    getDstPort(): number
    getGroup(): string
    getId(): number
    getL2miss(): boolean
    getL3miss(): boolean
    getLearning(): boolean
    getLimit(): number
    getLocal(): string
    getParent(): Device
    getProxy(): boolean
    getRsc(): boolean
    getSrcPortMax(): number
    getSrcPortMin(): number
    getTos(): number
    getTtl(): number
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceVxlan, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceVxlan, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ageing", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ageing", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ageing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ageing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ageing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::carrier", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::carrier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dst-port", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dst-port", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dst-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dst-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dst-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::group", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::l2miss", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::l2miss", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::l2miss", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::l2miss", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::l2miss", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::l3miss", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::l3miss", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::l3miss", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::l3miss", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::l3miss", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::learning", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::learning", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::learning", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::learning", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::learning", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::limit", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::limit", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::limit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::limit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::limit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::proxy", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::proxy", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::proxy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::proxy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::proxy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rsc", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rsc", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rsc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rsc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rsc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src-port-max", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src-port-max", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src-port-max", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src-port-max", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src-port-max", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src-port-min", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src-port-min", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src-port-min", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src-port-min", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src-port-min", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tos", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tos", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tos", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tos", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tos", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ttl", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ttl", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ttl", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ttl", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ttl", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceVxlan_ConstructProps)
    _init (config?: DeviceVxlan_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceWifi_ConstructProps extends Device_ConstructProps {
}
export class DeviceWifi {
    /* Properties of NM.DeviceWifi */
    readonly accessPoints: AccessPoint[]
    readonly activeAccessPoint: AccessPoint
    readonly bitrate: number
    readonly lastScan: number
    readonly mode: TODO_80211Mode
    readonly permHwAddress: string
    readonly wirelessCapabilities: DeviceWifiCapabilities
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceWifi */
    getAccessPointByPath(path: string): AccessPoint
    getAccessPoints(): AccessPoint[]
    getActiveAccessPoint(): AccessPoint
    getBitrate(): number
    getCapabilities(): DeviceWifiCapabilities
    getLastScan(): number
    getMode(): TODO_80211Mode
    getPermanentHwAddress(): string
    requestScan(cancellable?: Gio.Cancellable | null): boolean
    requestScanAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    requestScanFinish(result: Gio.AsyncResult): boolean
    requestScanOptions(options: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    requestScanOptionsAsync(options: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.DeviceWifi */
    connect(sigName: "access-point-added", callback: (($obj: DeviceWifi, ap: GObject.Object) => void)): number
    connect_after(sigName: "access-point-added", callback: (($obj: DeviceWifi, ap: GObject.Object) => void)): number
    emit(sigName: "access-point-added", ap: GObject.Object): void
    on(sigName: "access-point-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "access-point-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "access-point-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "access-point-removed", callback: (($obj: DeviceWifi, ap: GObject.Object) => void)): number
    connect_after(sigName: "access-point-removed", callback: (($obj: DeviceWifi, ap: GObject.Object) => void)): number
    emit(sigName: "access-point-removed", ap: GObject.Object): void
    on(sigName: "access-point-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "access-point-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "access-point-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceWifi, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceWifi, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-points", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-points", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-points", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-points", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-points", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-access-point", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-access-point", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-access-point", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-access-point", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-access-point", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bitrate", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bitrate", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bitrate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bitrate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bitrate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-scan", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-scan", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-scan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-scan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-scan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mode", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::perm-hw-address", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::perm-hw-address", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::perm-hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::perm-hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::perm-hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wireless-capabilities", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wireless-capabilities", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wireless-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wireless-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wireless-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceWifi, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceWifi_ConstructProps)
    _init (config?: DeviceWifi_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceWifiP2P_ConstructProps extends Device_ConstructProps {
}
export class DeviceWifiP2P {
    /* Properties of NM.DeviceWifiP2P */
    readonly peers: WifiP2PPeer[]
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceWifiP2P */
    getPeerByPath(path: string): WifiP2PPeer
    getPeers(): WifiP2PPeer[]
    startFind(options?: GLib.Variant | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    startFindFinish(result: Gio.AsyncResult): boolean
    stopFind(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    stopFindFinish(result: Gio.AsyncResult): boolean
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.DeviceWifiP2P */
    connect(sigName: "peer-added", callback: (($obj: DeviceWifiP2P, peer: GObject.Object) => void)): number
    connect_after(sigName: "peer-added", callback: (($obj: DeviceWifiP2P, peer: GObject.Object) => void)): number
    emit(sigName: "peer-added", peer: GObject.Object): void
    on(sigName: "peer-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "peer-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "peer-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "peer-removed", callback: (($obj: DeviceWifiP2P, peer: GObject.Object) => void)): number
    connect_after(sigName: "peer-removed", callback: (($obj: DeviceWifiP2P, peer: GObject.Object) => void)): number
    emit(sigName: "peer-removed", peer: GObject.Object): void
    on(sigName: "peer-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "peer-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "peer-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceWifiP2P, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceWifiP2P, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::peers", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::peers", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::peers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::peers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::peers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceWifiP2P_ConstructProps)
    _init (config?: DeviceWifiP2P_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceWimax_ConstructProps extends Device_ConstructProps {
}
export class DeviceWimax {
    /* Properties of NM.DeviceWimax */
    readonly activeNsp: WimaxNsp
    readonly bsid: string
    readonly centerFrequency: number
    readonly cinr: number
    readonly hwAddress: string
    readonly nsps: WimaxNsp[]
    readonly rssi: number
    readonly txPower: number
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceWimax */
    getActiveNsp(): WimaxNsp
    getBsid(): string
    getCenterFrequency(): number
    getCinr(): number
    getHwAddress(): string
    getNspByPath(path: string): WimaxNsp
    getNsps(): WimaxNsp[]
    getRssi(): number
    getTxPower(): number
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.DeviceWimax */
    connect(sigName: "nsp-added", callback: (($obj: DeviceWimax, nsp: GObject.Object) => void)): number
    connect_after(sigName: "nsp-added", callback: (($obj: DeviceWimax, nsp: GObject.Object) => void)): number
    emit(sigName: "nsp-added", nsp: GObject.Object): void
    on(sigName: "nsp-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "nsp-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "nsp-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "nsp-removed", callback: (($obj: DeviceWimax, nsp: GObject.Object) => void)): number
    connect_after(sigName: "nsp-removed", callback: (($obj: DeviceWimax, nsp: GObject.Object) => void)): number
    emit(sigName: "nsp-removed", nsp: GObject.Object): void
    on(sigName: "nsp-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "nsp-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "nsp-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceWimax, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceWimax, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-nsp", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-nsp", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-nsp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-nsp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-nsp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bsid", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bsid", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bsid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bsid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bsid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::center-frequency", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::center-frequency", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::center-frequency", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::center-frequency", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::center-frequency", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cinr", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cinr", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cinr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cinr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cinr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nsps", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nsps", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nsps", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nsps", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nsps", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rssi", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rssi", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rssi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rssi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rssi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tx-power", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tx-power", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tx-power", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tx-power", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tx-power", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceWimax_ConstructProps)
    _init (config?: DeviceWimax_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceWireGuard_ConstructProps extends Device_ConstructProps {
}
export class DeviceWireGuard {
    /* Properties of NM.DeviceWireGuard */
    readonly fwmark: number
    readonly listenPort: number
    readonly publicKey: any
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceWireGuard */
    getFwmark(): number
    getListenPort(): number
    getPublicKey(): any
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceWireGuard, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceWireGuard, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fwmark", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fwmark", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fwmark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fwmark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fwmark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::listen-port", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::listen-port", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::listen-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::listen-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::listen-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::public-key", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-key", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::public-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::public-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::public-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceWireGuard_ConstructProps)
    _init (config?: DeviceWireGuard_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DeviceWpan_ConstructProps extends Device_ConstructProps {
}
export class DeviceWpan {
    /* Properties of NM.Device */
    readonly activeConnection: ActiveConnection
    autoconnect: boolean
    readonly availableConnections: RemoteConnection[]
    readonly capabilities: DeviceCapabilities
    readonly deviceType: DeviceType
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly driver: string
    readonly driverVersion: string
    readonly firmwareMissing: boolean
    readonly firmwareVersion: string
    readonly hwAddress: string
    readonly interface: string
    readonly interfaceFlags: number
    readonly ipInterface: string
    readonly ip4Config: IPConfig
    readonly ip4Connectivity: ConnectivityState
    readonly ip6Config: IPConfig
    readonly ip6Connectivity: ConnectivityState
    readonly lldpNeighbors: object[]
    readonly managed: boolean
    readonly metered: number
    readonly mtu: number
    readonly nmPluginMissing: boolean
    readonly path: string
    readonly physicalPortId: string
    readonly product: string
    readonly real: boolean
    readonly state: DeviceState
    readonly stateReason: number
    readonly udi: string
    readonly vendor: string
    /* Properties of NM.Object */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DeviceWpan */
    /* Methods of NM.Device */
    connectionCompatible(connection: Connection): boolean
    connectionValid(connection: Connection): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    disconnect(cancellable?: Gio.Cancellable | null): boolean
    disconnectAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(result: Gio.AsyncResult): boolean
    filterConnections(connections: Connection[]): Connection[]
    getActiveConnection(): ActiveConnection
    getAppliedConnection(flags: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAppliedConnectionAsync(flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getAppliedConnectionFinish(result: Gio.AsyncResult): [ /* returnType */ Connection, /* versionId */ number | null ]
    getAutoconnect(): boolean
    getAvailableConnections(): RemoteConnection[]
    getCapabilities(): DeviceCapabilities
    getConnectivity(addrFamily: number): ConnectivityState
    getDescription(): string
    getDeviceType(): DeviceType
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getDriver(): string
    getDriverVersion(): string
    getFirmwareMissing(): boolean
    getFirmwareVersion(): string
    getHwAddress(): string
    getIface(): string
    getInterfaceFlags(): DeviceInterfaceFlags
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getIpIface(): string
    getLldpNeighbors(): LldpNeighbor[]
    getManaged(): boolean
    getMetered(): Metered
    getMtu(): number
    getNmPluginMissing(): boolean
    getPath(): string
    getPhysicalPortId(): string
    getProduct(): string
    getSettingType(): GObject.Type
    getState(): DeviceState
    getStateReason(): DeviceStateReason
    getTypeDescription(): string
    getUdi(): string
    getVendor(): string
    isReal(): boolean
    isSoftware(): boolean
    reapply(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null): boolean
    reapplyAsync(connection: Connection | null, versionId: number, flags: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reapplyFinish(result: Gio.AsyncResult): boolean
    setAutoconnect(autoconnect: boolean): void
    setManaged(managed: boolean): void
    /* Methods of NM.Object */
    getClient(): Client
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.Device */
    connect(sigName: "state-changed", callback: (($obj: DeviceWpan, newState: number, oldState: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: DeviceWpan, newState: number, oldState: number, reason: number) => void)): number
    emit(sigName: "state-changed", newState: number, oldState: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-connection", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-connection", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::available-connections", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::available-connections", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::available-connections", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-type", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-type", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver-version", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver-version", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-missing", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-missing", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::firmware-version", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::firmware-version", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::firmware-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-flags", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-flags", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-interface", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-interface", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-connectivity", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-connectivity", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-connectivity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp-neighbors", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp-neighbors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::managed", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::managed", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::managed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nm-plugin-missing", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nm-plugin-missing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-port-id", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-port-id", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-port-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::product", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::product", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::product", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::real", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::real", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::real", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::udi", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::udi", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::udi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DeviceWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DeviceWpan_ConstructProps)
    _init (config?: DeviceWpan_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DhcpConfig_ConstructProps extends Object_ConstructProps {
}
export class DhcpConfig {
    /* Properties of NM.DhcpConfig */
    readonly family: number
    readonly options: GLib.HashTable
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.DhcpConfig */
    getFamily(): number
    getOneOption(option: string): string
    getOptions(): GLib.HashTable
    /* Methods of NM.Object */
    getClient(): Client
    getPath(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::family", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::family", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::options", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::options", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DhcpConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DhcpConfig_ConstructProps)
    _init (config?: DhcpConfig_ConstructProps): void
    static $gtype: GObject.Type
}
export interface IPConfig_ConstructProps extends Object_ConstructProps {
}
export class IPConfig {
    /* Properties of NM.IPConfig */
    readonly addresses: object[]
    readonly domains: string[]
    readonly family: number
    readonly gateway: string
    readonly nameservers: string[]
    readonly routes: IPRoute[]
    readonly searches: string[]
    readonly winsServers: string[]
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.IPConfig */
    getAddresses(): IPAddress[]
    getDomains(): string[]
    getFamily(): number
    getGateway(): string
    getNameservers(): string[]
    getRoutes(): IPRoute[]
    getSearches(): string[]
    getWinsServers(): string[]
    /* Methods of NM.Object */
    getClient(): Client
    getPath(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::addresses", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::addresses", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::addresses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::addresses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::addresses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::domains", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::domains", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::domains", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::domains", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::domains", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::family", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::family", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::gateway", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gateway", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::gateway", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::gateway", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::gateway", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nameservers", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nameservers", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nameservers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nameservers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nameservers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::routes", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::routes", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::searches", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::searches", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::searches", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::searches", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::searches", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wins-servers", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wins-servers", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wins-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wins-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wins-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: IPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IPConfig_ConstructProps)
    _init (config?: IPConfig_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Object_ConstructProps extends GObject.Object_ConstructProps {
}
export class Object {
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.Object */
    getClient(): Client
    getPath(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Object_ConstructProps)
    _init (config?: Object_ConstructProps): void
    static $gtype: GObject.Type
}
export interface RemoteConnection_ConstructProps extends Object_ConstructProps {
}
export class RemoteConnection {
    /* Properties of NM.RemoteConnection */
    readonly filename: string
    readonly flags: number
    readonly unsaved: boolean
    readonly visible: boolean
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.RemoteConnection */
    commitChanges(saveToDisk: boolean, cancellable?: Gio.Cancellable | null): boolean
    commitChangesAsync(saveToDisk: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    commitChangesFinish(result: Gio.AsyncResult): boolean
    delete(cancellable?: Gio.Cancellable | null): boolean
    deleteAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(result: Gio.AsyncResult): boolean
    getFilename(): string
    getFlags(): SettingsConnectionFlags
    getSecrets(settingName: string, cancellable?: Gio.Cancellable | null): GLib.Variant
    getSecretsAsync(settingName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getSecretsFinish(result: Gio.AsyncResult): GLib.Variant
    getUnsaved(): boolean
    getVisible(): boolean
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    saveFinish(result: Gio.AsyncResult): boolean
    update2(settings: GLib.Variant | null, flags: SettingsUpdate2Flags, args?: GLib.Variant | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    update2Finish(result: Gio.AsyncResult): GLib.Variant
    /* Methods of NM.Object */
    getClient(): Client
    getPath(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of NM.Connection */
    addSetting(setting: Setting): void
    clearSecrets(): void
    clearSecretsWithFlags(func?: SettingClearSecretsWithFlagsFn | null): void
    clearSettings(): void
    compare(b: Connection, flags: SettingCompareFlags): boolean
    diff(b: Connection, flags: SettingCompareFlags, outSettings: GLib.HashTable): boolean
    dump(): void
    forEachSettingValue(func: SettingValueIterFn): void
    getConnectionType(): string
    getId(): string
    getInterfaceName(): string
    getSetting(settingType: GObject.Type): Setting
    getSetting8021x(): Setting8021x
    getSettingAdsl(): SettingAdsl
    getSettingBluetooth(): SettingBluetooth
    getSettingBond(): SettingBond
    getSettingBridge(): SettingBridge
    getSettingBridgePort(): SettingBridgePort
    getSettingByName(name: string): Setting
    getSettingCdma(): SettingCdma
    getSettingConnection(): SettingConnection
    getSettingDcb(): SettingDcb
    getSettingDummy(): SettingDummy
    getSettingGeneric(): SettingGeneric
    getSettingGsm(): SettingGsm
    getSettingInfiniband(): SettingInfiniband
    getSettingIp4Config(): SettingIP4Config
    getSettingIp6Config(): SettingIP6Config
    getSettingIpTunnel(): SettingIPTunnel
    getSettingMacsec(): SettingMacsec
    getSettingMacvlan(): SettingMacvlan
    getSettingOlpcMesh(): SettingOlpcMesh
    getSettingOvsBridge(): SettingOvsBridge
    getSettingOvsInterface(): SettingOvsInterface
    getSettingOvsPatch(): SettingOvsPatch
    getSettingOvsPort(): SettingOvsPort
    getSettingPpp(): SettingPpp
    getSettingPppoe(): SettingPppoe
    getSettingProxy(): SettingProxy
    getSettingSerial(): SettingSerial
    getSettingTcConfig(): SettingTCConfig
    getSettingTeam(): SettingTeam
    getSettingTeamPort(): SettingTeamPort
    getSettingTun(): SettingTun
    getSettingVlan(): SettingVlan
    getSettingVpn(): SettingVpn
    getSettingVxlan(): SettingVxlan
    getSettingWimax(): SettingWimax
    getSettingWired(): SettingWired
    getSettingWireless(): SettingWireless
    getSettingWirelessSecurity(): SettingWirelessSecurity
    getSettings(): Setting[]
    getUuid(): string
    getVirtualDeviceDescription(): string
    isType(type: string): boolean
    isVirtual(): boolean
    needSecrets(): [ /* returnType */ string, /* hints */ string[] | null ]
    normalize(parameters?: GLib.HashTable | null): [ /* returnType */ boolean, /* modified */ boolean | null ]
    removeSetting(settingType: GObject.Type): void
    replaceSettings(newSettings: GLib.Variant): boolean
    replaceSettingsFromConnection(newConnection: Connection): void
    setPath(path: string): void
    toDbus(flags: ConnectionSerializationFlags): GLib.Variant
    updateSecrets(settingName: string, secrets: GLib.Variant): boolean
    verify(): boolean
    verifySecrets(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of NM.Connection */
    connect(sigName: "changed", callback: (($obj: RemoteConnection) => void)): number
    connect_after(sigName: "changed", callback: (($obj: RemoteConnection) => void)): number
    emit(sigName: "changed"): void
    on(sigName: "changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "secrets-cleared", callback: (($obj: RemoteConnection) => void)): number
    connect_after(sigName: "secrets-cleared", callback: (($obj: RemoteConnection) => void)): number
    emit(sigName: "secrets-cleared"): void
    on(sigName: "secrets-cleared", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "secrets-cleared", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "secrets-cleared", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "secrets-updated", callback: (($obj: RemoteConnection, settingName: string) => void)): number
    connect_after(sigName: "secrets-updated", callback: (($obj: RemoteConnection, settingName: string) => void)): number
    emit(sigName: "secrets-updated", settingName: string): void
    on(sigName: "secrets-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "secrets-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "secrets-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filename", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filename", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::flags", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unsaved", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unsaved", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unsaved", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unsaved", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unsaved", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visible", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: RemoteConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: RemoteConnection_ConstructProps)
    _init (config?: RemoteConnection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface SecretAgentOld_ConstructProps extends GObject.Object_ConstructProps {
    autoRegister?: boolean
    capabilities?: SecretAgentCapabilities
    dbusConnection?: Gio.DBusConnection
    identifier?: string
}
export class SecretAgentOld {
    /* Properties of NM.SecretAgentOld */
    autoRegister: boolean
    capabilities: SecretAgentCapabilities
    readonly registered: boolean
    /* Fields of NM.SecretAgentOld */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SecretAgentOld */
    deleteSecrets(connection: Connection, callback: SecretAgentOldDeleteSecretsFunc): void
    destroy(): void
    enable(enable: boolean): void
    getContextBusyWatcher(): GObject.Object
    getDbusConnection(): Gio.DBusConnection
    getDbusNameOwner(): string
    getMainContext(): GLib.MainContext
    getRegistered(): boolean
    getSecrets(connection: Connection, settingName: string, hints: string[], flags: SecretAgentGetSecretsFlags, callback: SecretAgentOldGetSecretsFunc): void
    register(cancellable?: Gio.Cancellable | null): boolean
    registerAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    registerFinish(result: Gio.AsyncResult): boolean
    saveSecrets(connection: Connection, callback: SecretAgentOldSaveSecretsFunc): void
    unregister(cancellable?: Gio.Cancellable | null): boolean
    unregisterAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    unregisterFinish(result: Gio.AsyncResult): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of NM.SecretAgentOld */
    vfuncCancelGetSecrets?(connectionPath: string, settingName: string): void
    vfuncDeleteSecrets?(connection: Connection, connectionPath: string, callback: SecretAgentOldDeleteSecretsFunc): void
    vfuncGetSecrets?(connection: Connection, connectionPath: string, settingName: string, hints: string[], flags: SecretAgentGetSecretsFlags, callback: SecretAgentOldGetSecretsFunc): void
    vfuncSaveSecrets?(connection: Connection, connectionPath: string, callback: SecretAgentOldSaveSecretsFunc): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::auto-register", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-register", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::auto-register", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::auto-register", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::auto-register", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::registered", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::registered", callback: (($obj: SecretAgentOld, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::registered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::registered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::registered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SecretAgentOld_ConstructProps)
    _init (config?: SecretAgentOld_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Setting_ConstructProps extends GObject.Object_ConstructProps {
}
export class Setting {
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Setting, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Setting, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: Setting, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Setting, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Setting_ConstructProps)
    _init (config?: Setting_ConstructProps): void
    static lookupType(name: string): GObject.Type
    static $gtype: GObject.Type
}
export interface Setting6Lowpan_ConstructProps extends Setting_ConstructProps {
    parent?: string
}
export class Setting6Lowpan {
    /* Properties of NM.Setting6Lowpan */
    parent: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.Setting6Lowpan */
    getParent(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Setting6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Setting6Lowpan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: Setting6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: Setting6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: Setting6Lowpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Setting6Lowpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Setting6Lowpan_ConstructProps)
    _init (config?: Setting6Lowpan_ConstructProps): void
    static new(): Setting6Lowpan
    static $gtype: GObject.Type
}
export interface Setting8021x_ConstructProps extends Setting_ConstructProps {
    altsubjectMatches?: string[]
    anonymousIdentity?: string
    authTimeout?: number
    caCert?: any
    caCertPassword?: string
    caCertPasswordFlags?: SettingSecretFlags
    caPath?: string
    clientCert?: any
    clientCertPassword?: string
    clientCertPasswordFlags?: SettingSecretFlags
    domainMatch?: string
    domainSuffixMatch?: string
    eap?: string[]
    identity?: string
    optional?: boolean
    pacFile?: string
    password?: string
    passwordFlags?: SettingSecretFlags
    passwordRaw?: any
    passwordRawFlags?: SettingSecretFlags
    phase1AuthFlags?: number
    phase1FastProvisioning?: string
    phase1Peaplabel?: string
    phase1Peapver?: string
    phase2AltsubjectMatches?: string[]
    phase2Auth?: string
    phase2Autheap?: string
    phase2CaCert?: any
    phase2CaCertPassword?: string
    phase2CaCertPasswordFlags?: SettingSecretFlags
    phase2CaPath?: string
    phase2ClientCert?: any
    phase2ClientCertPassword?: string
    phase2ClientCertPasswordFlags?: SettingSecretFlags
    phase2DomainMatch?: string
    phase2DomainSuffixMatch?: string
    phase2PrivateKey?: any
    phase2PrivateKeyPassword?: string
    phase2PrivateKeyPasswordFlags?: SettingSecretFlags
    phase2SubjectMatch?: string
    pin?: string
    pinFlags?: SettingSecretFlags
    privateKey?: any
    privateKeyPassword?: string
    privateKeyPasswordFlags?: SettingSecretFlags
    subjectMatch?: string
    systemCaCerts?: boolean
}
export class Setting8021x {
    /* Properties of NM.Setting8021x */
    altsubjectMatches: string[]
    anonymousIdentity: string
    authTimeout: number
    caCert: any
    caCertPassword: string
    caCertPasswordFlags: SettingSecretFlags
    caPath: string
    clientCert: any
    clientCertPassword: string
    clientCertPasswordFlags: SettingSecretFlags
    domainMatch: string
    domainSuffixMatch: string
    eap: string[]
    identity: string
    optional: boolean
    pacFile: string
    password: string
    passwordFlags: SettingSecretFlags
    passwordRaw: any
    passwordRawFlags: SettingSecretFlags
    phase1AuthFlags: number
    phase1FastProvisioning: string
    phase1Peaplabel: string
    phase1Peapver: string
    phase2AltsubjectMatches: string[]
    phase2Auth: string
    phase2Autheap: string
    phase2CaCert: any
    phase2CaCertPassword: string
    phase2CaCertPasswordFlags: SettingSecretFlags
    phase2CaPath: string
    phase2ClientCert: any
    phase2ClientCertPassword: string
    phase2ClientCertPasswordFlags: SettingSecretFlags
    phase2DomainMatch: string
    phase2DomainSuffixMatch: string
    phase2PrivateKey: any
    phase2PrivateKeyPassword: string
    phase2PrivateKeyPasswordFlags: SettingSecretFlags
    phase2SubjectMatch: string
    pin: string
    pinFlags: SettingSecretFlags
    privateKey: any
    privateKeyPassword: string
    privateKeyPasswordFlags: SettingSecretFlags
    subjectMatch: string
    systemCaCerts: boolean
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting8021x */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.Setting8021x */
    addAltsubjectMatch(altsubjectMatch: string): boolean
    addEapMethod(eap: string): boolean
    addPhase2AltsubjectMatch(phase2AltsubjectMatch: string): boolean
    clearAltsubjectMatches(): void
    clearEapMethods(): void
    clearPhase2AltsubjectMatches(): void
    getAltsubjectMatch(i: number): string
    getAnonymousIdentity(): string
    getAuthTimeout(): number
    getCaCertBlob(): any
    getCaCertPassword(): string
    getCaCertPasswordFlags(): SettingSecretFlags
    getCaCertPath(): string
    getCaCertScheme(): Setting8021xCKScheme
    getCaCertUri(): string
    getCaPath(): string
    getClientCertBlob(): any
    getClientCertPassword(): string
    getClientCertPasswordFlags(): SettingSecretFlags
    getClientCertPath(): string
    getClientCertScheme(): Setting8021xCKScheme
    getClientCertUri(): string
    getDomainMatch(): string
    getDomainSuffixMatch(): string
    getEapMethod(i: number): string
    getIdentity(): string
    getNumAltsubjectMatches(): number
    getNumEapMethods(): number
    getNumPhase2AltsubjectMatches(): number
    getOptional(): boolean
    getPacFile(): string
    getPassword(): string
    getPasswordFlags(): SettingSecretFlags
    getPasswordRaw(): any
    getPasswordRawFlags(): SettingSecretFlags
    getPhase1AuthFlags(): Setting8021xAuthFlags
    getPhase1FastProvisioning(): string
    getPhase1Peaplabel(): string
    getPhase1Peapver(): string
    getPhase2AltsubjectMatch(i: number): string
    getPhase2Auth(): string
    getPhase2Autheap(): string
    getPhase2CaCertBlob(): any
    getPhase2CaCertPassword(): string
    getPhase2CaCertPasswordFlags(): SettingSecretFlags
    getPhase2CaCertPath(): string
    getPhase2CaCertScheme(): Setting8021xCKScheme
    getPhase2CaCertUri(): string
    getPhase2CaPath(): string
    getPhase2ClientCertBlob(): any
    getPhase2ClientCertPassword(): string
    getPhase2ClientCertPasswordFlags(): SettingSecretFlags
    getPhase2ClientCertPath(): string
    getPhase2ClientCertScheme(): Setting8021xCKScheme
    getPhase2ClientCertUri(): string
    getPhase2DomainMatch(): string
    getPhase2DomainSuffixMatch(): string
    getPhase2PrivateKeyBlob(): any
    getPhase2PrivateKeyFormat(): Setting8021xCKFormat
    getPhase2PrivateKeyPassword(): string
    getPhase2PrivateKeyPasswordFlags(): SettingSecretFlags
    getPhase2PrivateKeyPath(): string
    getPhase2PrivateKeyScheme(): Setting8021xCKScheme
    getPhase2PrivateKeyUri(): string
    getPhase2SubjectMatch(): string
    getPin(): string
    getPinFlags(): SettingSecretFlags
    getPrivateKeyBlob(): any
    getPrivateKeyFormat(): Setting8021xCKFormat
    getPrivateKeyPassword(): string
    getPrivateKeyPasswordFlags(): SettingSecretFlags
    getPrivateKeyPath(): string
    getPrivateKeyScheme(): Setting8021xCKScheme
    getPrivateKeyUri(): string
    getSubjectMatch(): string
    getSystemCaCerts(): boolean
    removeAltsubjectMatch(i: number): void
    removeAltsubjectMatchByValue(altsubjectMatch: string): boolean
    removeEapMethod(i: number): void
    removeEapMethodByValue(eap: string): boolean
    removePhase2AltsubjectMatch(i: number): void
    removePhase2AltsubjectMatchByValue(phase2AltsubjectMatch: string): boolean
    setCaCert(value: string, scheme: Setting8021xCKScheme, outFormat: Setting8021xCKFormat): boolean
    setClientCert(value: string, scheme: Setting8021xCKScheme, outFormat: Setting8021xCKFormat): boolean
    setPhase2CaCert(value: string, scheme: Setting8021xCKScheme, outFormat: Setting8021xCKFormat): boolean
    setPhase2ClientCert(value: string, scheme: Setting8021xCKScheme, outFormat: Setting8021xCKFormat): boolean
    setPhase2PrivateKey(value: string, password: string, scheme: Setting8021xCKScheme, outFormat: Setting8021xCKFormat): boolean
    setPrivateKey(value: string, password: string, scheme: Setting8021xCKScheme, outFormat: Setting8021xCKFormat): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::altsubject-matches", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::altsubject-matches", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::altsubject-matches", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::altsubject-matches", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::altsubject-matches", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anonymous-identity", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anonymous-identity", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anonymous-identity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anonymous-identity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anonymous-identity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::auth-timeout", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auth-timeout", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::auth-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::auth-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::auth-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ca-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ca-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ca-cert", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ca-cert", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ca-cert", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ca-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ca-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ca-cert-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ca-cert-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ca-cert-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ca-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ca-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ca-cert-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ca-cert-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ca-cert-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ca-path", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ca-path", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ca-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ca-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ca-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-cert", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-cert", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-cert", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-cert-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-cert-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-cert-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-cert-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-cert-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-cert-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::domain-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::domain-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::domain-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::domain-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::domain-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::domain-suffix-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::domain-suffix-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::domain-suffix-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::domain-suffix-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::domain-suffix-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::eap", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::eap", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::eap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::eap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::eap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::identity", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::identity", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::identity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::identity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::identity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::optional", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::optional", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::optional", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::optional", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::optional", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pac-file", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pac-file", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pac-file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pac-file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pac-file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::password-raw", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-raw", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::password-raw", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::password-raw", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::password-raw", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::password-raw-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-raw-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::password-raw-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::password-raw-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::password-raw-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase1-auth-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase1-auth-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase1-auth-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase1-auth-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase1-auth-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase1-fast-provisioning", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase1-fast-provisioning", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase1-fast-provisioning", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase1-fast-provisioning", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase1-fast-provisioning", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase1-peaplabel", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase1-peaplabel", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase1-peaplabel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase1-peaplabel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase1-peaplabel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase1-peapver", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase1-peapver", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase1-peapver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase1-peapver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase1-peapver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-altsubject-matches", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-altsubject-matches", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-altsubject-matches", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-altsubject-matches", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-altsubject-matches", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-auth", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-auth", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-auth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-auth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-auth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-autheap", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-autheap", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-autheap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-autheap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-autheap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-ca-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-ca-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-ca-cert", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-ca-cert", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-ca-cert", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-ca-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-ca-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-ca-cert-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-ca-cert-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-ca-cert-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-ca-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-ca-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-ca-cert-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-ca-cert-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-ca-cert-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-ca-path", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-ca-path", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-ca-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-ca-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-ca-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-client-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-client-cert", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-client-cert", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-client-cert", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-client-cert", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-client-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-client-cert-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-client-cert-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-client-cert-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-client-cert-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-client-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-client-cert-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-client-cert-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-client-cert-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-client-cert-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-domain-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-domain-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-domain-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-domain-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-domain-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-domain-suffix-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-domain-suffix-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-domain-suffix-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-domain-suffix-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-domain-suffix-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-private-key", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-private-key", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-private-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-private-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-private-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-private-key-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-private-key-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-private-key-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-private-key-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-private-key-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-private-key-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-private-key-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-private-key-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-private-key-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-private-key-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::phase2-subject-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase2-subject-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::phase2-subject-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::phase2-subject-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::phase2-subject-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pin", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pin", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pin-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pin-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pin-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pin-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pin-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::private-key", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::private-key", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::private-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::private-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::private-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::private-key-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::private-key-password", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::private-key-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::private-key-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::private-key-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::private-key-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::private-key-password-flags", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::private-key-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::private-key-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::private-key-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::subject-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subject-match", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::subject-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::subject-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::subject-match", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::system-ca-certs", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-ca-certs", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::system-ca-certs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::system-ca-certs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::system-ca-certs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Setting8021x, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Setting8021x_ConstructProps)
    _init (config?: Setting8021x_ConstructProps): void
    static new(): Setting8021x
    static checkCertScheme(pdata: object | null, length: number): Setting8021xCKScheme
    static $gtype: GObject.Type
}
export interface SettingAdsl_ConstructProps extends Setting_ConstructProps {
    encapsulation?: string
    password?: string
    passwordFlags?: SettingSecretFlags
    protocol?: string
    username?: string
    vci?: number
    vpi?: number
}
export class SettingAdsl {
    /* Properties of NM.SettingAdsl */
    encapsulation: string
    password: string
    passwordFlags: SettingSecretFlags
    protocol: string
    username: string
    vci: number
    vpi: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingAdsl */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingAdsl */
    getEncapsulation(): string
    getPassword(): string
    getPasswordFlags(): SettingSecretFlags
    getProtocol(): string
    getUsername(): string
    getVci(): number
    getVpi(): number
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::encapsulation", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encapsulation", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::encapsulation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::encapsulation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::encapsulation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::password", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::password-flags", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-flags", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::protocol", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::protocol", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::username", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::username", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::username", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::username", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::username", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vci", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vci", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vci", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vci", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vci", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vpi", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vpi", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vpi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vpi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vpi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingAdsl, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingAdsl_ConstructProps)
    _init (config?: SettingAdsl_ConstructProps): void
    static new(): SettingAdsl
    static $gtype: GObject.Type
}
export interface SettingBluetooth_ConstructProps extends Setting_ConstructProps {
    bdaddr?: string
    type?: string
}
export class SettingBluetooth {
    /* Properties of NM.SettingBluetooth */
    bdaddr: string
    type: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingBluetooth */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingBluetooth */
    getBdaddr(): string
    getConnectionType(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bdaddr", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bdaddr", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bdaddr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bdaddr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bdaddr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingBluetooth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingBluetooth_ConstructProps)
    _init (config?: SettingBluetooth_ConstructProps): void
    static new(): SettingBluetooth
    static $gtype: GObject.Type
}
export interface SettingBond_ConstructProps extends Setting_ConstructProps {
    options?: GLib.HashTable
}
export class SettingBond {
    /* Properties of NM.SettingBond */
    options: GLib.HashTable
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingBond */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingBond */
    addOption(name: string, value: string): boolean
    getNumOptions(): number
    getOption(idx: number): [ /* returnType */ boolean, /* outName */ string, /* outValue */ string ]
    getOptionByName(name: string): string
    getOptionDefault(name: string): string
    getOptionNormalized(name: string): string
    getValidOptions(): string[]
    removeOption(name: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingBond, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::options", callback: (($obj: SettingBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::options", callback: (($obj: SettingBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingBond, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingBond, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingBond_ConstructProps)
    _init (config?: SettingBond_ConstructProps): void
    static new(): SettingBond
    static validateOption(name: string, value: string): boolean
    static $gtype: GObject.Type
}
export interface SettingBridge_ConstructProps extends Setting_ConstructProps {
    ageingTime?: number
    forwardDelay?: number
    groupAddress?: string
    groupForwardMask?: number
    helloTime?: number
    macAddress?: string
    maxAge?: number
    multicastHashMax?: number
    multicastLastMemberCount?: number
    multicastLastMemberInterval?: number
    multicastMembershipInterval?: number
    multicastQuerier?: boolean
    multicastQuerierInterval?: number
    multicastQueryInterval?: number
    multicastQueryResponseInterval?: number
    multicastQueryUseIfaddr?: boolean
    multicastRouter?: string
    multicastSnooping?: boolean
    multicastStartupQueryCount?: number
    multicastStartupQueryInterval?: number
    priority?: number
    stp?: boolean
    vlanDefaultPvid?: number
    vlanFiltering?: boolean
    vlanProtocol?: string
    vlanStatsEnabled?: boolean
    vlans?: BridgeVlan[]
}
export class SettingBridge {
    /* Properties of NM.SettingBridge */
    ageingTime: number
    forwardDelay: number
    groupAddress: string
    groupForwardMask: number
    helloTime: number
    macAddress: string
    maxAge: number
    multicastHashMax: number
    multicastLastMemberCount: number
    multicastLastMemberInterval: number
    multicastMembershipInterval: number
    multicastQuerier: boolean
    multicastQuerierInterval: number
    multicastQueryInterval: number
    multicastQueryResponseInterval: number
    multicastQueryUseIfaddr: boolean
    multicastRouter: string
    multicastSnooping: boolean
    multicastStartupQueryCount: number
    multicastStartupQueryInterval: number
    priority: number
    stp: boolean
    vlanDefaultPvid: number
    vlanFiltering: boolean
    vlanProtocol: string
    vlanStatsEnabled: boolean
    vlans: BridgeVlan[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingBridge */
    addVlan(vlan: BridgeVlan): void
    clearVlans(): void
    getAgeingTime(): number
    getForwardDelay(): number
    getGroupAddress(): string
    getGroupForwardMask(): number
    getHelloTime(): number
    getMacAddress(): string
    getMaxAge(): number
    getMulticastHashMax(): number
    getMulticastLastMemberCount(): number
    getMulticastLastMemberInterval(): number
    getMulticastMembershipInterval(): number
    getMulticastQuerier(): boolean
    getMulticastQuerierInterval(): number
    getMulticastQueryInterval(): number
    getMulticastQueryResponseInterval(): number
    getMulticastQueryUseIfaddr(): boolean
    getMulticastRouter(): string
    getMulticastSnooping(): boolean
    getMulticastStartupQueryCount(): number
    getMulticastStartupQueryInterval(): number
    getNumVlans(): number
    getPriority(): number
    getStp(): boolean
    getVlan(idx: number): BridgeVlan
    getVlanDefaultPvid(): number
    getVlanFiltering(): boolean
    getVlanProtocol(): string
    getVlanStatsEnabled(): boolean
    removeVlan(idx: number): void
    removeVlanByVid(vidStart: number, vidEnd: number): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ageing-time", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ageing-time", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ageing-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ageing-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ageing-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::forward-delay", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::forward-delay", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::forward-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::forward-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::forward-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::group-address", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-address", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::group-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::group-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::group-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::group-forward-mask", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-forward-mask", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::group-forward-mask", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::group-forward-mask", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::group-forward-mask", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hello-time", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hello-time", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hello-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hello-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hello-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mac-address", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-age", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-age", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-age", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-age", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-age", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multicast-hash-max", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-hash-max", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multicast-hash-max", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multicast-hash-max", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multicast-hash-max", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multicast-last-member-count", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-last-member-count", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multicast-last-member-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multicast-last-member-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multicast-last-member-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multicast-last-member-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-last-member-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multicast-last-member-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multicast-last-member-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multicast-last-member-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multicast-membership-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-membership-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multicast-membership-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multicast-membership-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multicast-membership-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multicast-querier", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-querier", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multicast-querier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multicast-querier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multicast-querier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multicast-querier-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-querier-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multicast-querier-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multicast-querier-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multicast-querier-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multicast-query-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-query-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multicast-query-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multicast-query-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multicast-query-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multicast-query-response-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-query-response-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multicast-query-response-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multicast-query-response-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multicast-query-response-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multicast-query-use-ifaddr", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-query-use-ifaddr", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multicast-query-use-ifaddr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multicast-query-use-ifaddr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multicast-query-use-ifaddr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multicast-router", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-router", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multicast-router", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multicast-router", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multicast-router", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multicast-snooping", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-snooping", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multicast-snooping", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multicast-snooping", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multicast-snooping", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multicast-startup-query-count", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-startup-query-count", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multicast-startup-query-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multicast-startup-query-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multicast-startup-query-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multicast-startup-query-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multicast-startup-query-interval", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multicast-startup-query-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multicast-startup-query-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multicast-startup-query-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::priority", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::stp", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stp", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::stp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::stp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::stp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vlan-default-pvid", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlan-default-pvid", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vlan-default-pvid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vlan-default-pvid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vlan-default-pvid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vlan-filtering", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlan-filtering", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vlan-filtering", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vlan-filtering", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vlan-filtering", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vlan-protocol", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlan-protocol", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vlan-protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vlan-protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vlan-protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vlan-stats-enabled", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlan-stats-enabled", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vlan-stats-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vlan-stats-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vlan-stats-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vlans", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlans", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vlans", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vlans", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vlans", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingBridge_ConstructProps)
    _init (config?: SettingBridge_ConstructProps): void
    static new(): SettingBridge
    static $gtype: GObject.Type
}
export interface SettingBridgePort_ConstructProps extends Setting_ConstructProps {
    hairpinMode?: boolean
    pathCost?: number
    priority?: number
    vlans?: BridgeVlan[]
}
export class SettingBridgePort {
    /* Properties of NM.SettingBridgePort */
    hairpinMode: boolean
    pathCost: number
    priority: number
    vlans: BridgeVlan[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingBridgePort */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingBridgePort */
    addVlan(vlan: BridgeVlan): void
    clearVlans(): void
    getHairpinMode(): boolean
    getNumVlans(): number
    getPathCost(): number
    getPriority(): number
    getVlan(idx: number): BridgeVlan
    removeVlan(idx: number): void
    removeVlanByVid(vidStart: number, vidEnd: number): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hairpin-mode", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hairpin-mode", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hairpin-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hairpin-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hairpin-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path-cost", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path-cost", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path-cost", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path-cost", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path-cost", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::priority", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vlans", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlans", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vlans", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vlans", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vlans", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingBridgePort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingBridgePort_ConstructProps)
    _init (config?: SettingBridgePort_ConstructProps): void
    static new(): SettingBridgePort
    static $gtype: GObject.Type
}
export interface SettingCdma_ConstructProps extends Setting_ConstructProps {
    mtu?: number
    number?: string
    password?: string
    passwordFlags?: SettingSecretFlags
    username?: string
}
export class SettingCdma {
    /* Properties of NM.SettingCdma */
    mtu: number
    number: string
    password: string
    passwordFlags: SettingSecretFlags
    username: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingCdma */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingCdma */
    getMtu(): number
    getNumber(): string
    getPassword(): string
    getPasswordFlags(): SettingSecretFlags
    getUsername(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::password", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::password-flags", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-flags", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::username", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::username", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::username", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::username", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::username", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingCdma, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingCdma_ConstructProps)
    _init (config?: SettingCdma_ConstructProps): void
    static new(): SettingCdma
    static $gtype: GObject.Type
}
export interface SettingConnection_ConstructProps extends Setting_ConstructProps {
    authRetries?: number
    autoconnect?: boolean
    autoconnectPriority?: number
    autoconnectRetries?: number
    autoconnectSlaves?: SettingConnectionAutoconnectSlaves
    gatewayPingTimeout?: number
    id?: string
    interfaceName?: string
    lldp?: number
    llmnr?: number
    master?: string
    mdns?: number
    metered?: Metered
    mudUrl?: string
    multiConnect?: number
    permissions?: string[]
    readOnly?: boolean
    secondaries?: string[]
    slaveType?: string
    stableId?: string
    timestamp?: number
    type?: string
    uuid?: string
    waitDeviceTimeout?: number
    zone?: string
}
export class SettingConnection {
    /* Properties of NM.SettingConnection */
    authRetries: number
    autoconnect: boolean
    autoconnectPriority: number
    autoconnectRetries: number
    autoconnectSlaves: SettingConnectionAutoconnectSlaves
    gatewayPingTimeout: number
    id: string
    interfaceName: string
    lldp: number
    llmnr: number
    master: string
    mdns: number
    metered: Metered
    mudUrl: string
    multiConnect: number
    permissions: string[]
    readOnly: boolean
    secondaries: string[]
    slaveType: string
    stableId: string
    timestamp: number
    type: string
    uuid: string
    waitDeviceTimeout: number
    zone: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingConnection */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingConnection */
    addPermission(ptype: string, pitem: string, detail?: string | null): boolean
    addSecondary(secUuid: string): boolean
    getAuthRetries(): number
    getAutoconnect(): boolean
    getAutoconnectPriority(): number
    getAutoconnectRetries(): number
    getAutoconnectSlaves(): SettingConnectionAutoconnectSlaves
    getConnectionType(): string
    getGatewayPingTimeout(): number
    getId(): string
    getInterfaceName(): string
    getLldp(): SettingConnectionLldp
    getLlmnr(): SettingConnectionLlmnr
    getMaster(): string
    getMdns(): SettingConnectionMdns
    getMetered(): Metered
    getMudUrl(): string
    getMultiConnect(): ConnectionMultiConnect
    getNumPermissions(): number
    getNumSecondaries(): number
    getPermission(idx: number, outPtype: string, outPitem: string, outDetail: string): boolean
    getReadOnly(): boolean
    getSecondary(idx: number): string
    getSlaveType(): string
    getStableId(): string
    getTimestamp(): number
    getUuid(): string
    getWaitDeviceTimeout(): number
    getZone(): string
    isSlaveType(type: string): boolean
    permissionsUserAllowed(uname: string): boolean
    removePermission(idx: number): void
    removePermissionByValue(ptype: string, pitem: string, detail?: string | null): boolean
    removeSecondary(idx: number): void
    removeSecondaryByValue(secUuid: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::auth-retries", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auth-retries", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::auth-retries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::auth-retries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::auth-retries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect-priority", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect-priority", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect-retries", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect-retries", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect-retries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect-retries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect-retries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoconnect-slaves", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoconnect-slaves", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoconnect-slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoconnect-slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoconnect-slaves", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::gateway-ping-timeout", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gateway-ping-timeout", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::gateway-ping-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::gateway-ping-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::gateway-ping-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-name", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-name", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lldp", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lldp", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lldp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lldp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lldp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::llmnr", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::llmnr", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::llmnr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::llmnr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::llmnr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::master", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::master", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::master", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::master", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::master", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mdns", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mdns", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mdns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mdns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mdns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metered", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metered", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mud-url", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mud-url", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mud-url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mud-url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mud-url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multi-connect", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multi-connect", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multi-connect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multi-connect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multi-connect", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::permissions", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::permissions", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::permissions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::permissions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::permissions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::secondaries", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secondaries", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::secondaries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::secondaries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::secondaries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::slave-type", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::slave-type", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::slave-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::slave-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::slave-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::stable-id", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stable-id", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::stable-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::stable-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::stable-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::timestamp", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::timestamp", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uuid", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wait-device-timeout", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wait-device-timeout", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wait-device-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wait-device-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wait-device-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::zone", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::zone", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::zone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::zone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::zone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingConnection_ConstructProps)
    _init (config?: SettingConnection_ConstructProps): void
    static new(): SettingConnection
    static $gtype: GObject.Type
}
export interface SettingDcb_ConstructProps extends Setting_ConstructProps {
    appFcoeFlags?: SettingDcbFlags
    appFcoeMode?: string
    appFcoePriority?: number
    appFipFlags?: SettingDcbFlags
    appFipPriority?: number
    appIscsiFlags?: SettingDcbFlags
    appIscsiPriority?: number
    priorityBandwidth?: number[]
    priorityFlowControl?: boolean[]
    priorityFlowControlFlags?: SettingDcbFlags
    priorityGroupBandwidth?: number[]
    priorityGroupFlags?: SettingDcbFlags
    priorityGroupId?: number[]
    priorityStrictBandwidth?: boolean[]
    priorityTrafficClass?: number[]
}
export class SettingDcb {
    /* Properties of NM.SettingDcb */
    appFcoeFlags: SettingDcbFlags
    appFcoeMode: string
    appFcoePriority: number
    appFipFlags: SettingDcbFlags
    appFipPriority: number
    appIscsiFlags: SettingDcbFlags
    appIscsiPriority: number
    priorityBandwidth: number[]
    priorityFlowControl: boolean[]
    priorityFlowControlFlags: SettingDcbFlags
    priorityGroupBandwidth: number[]
    priorityGroupFlags: SettingDcbFlags
    priorityGroupId: number[]
    priorityStrictBandwidth: boolean[]
    priorityTrafficClass: number[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingDcb */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingDcb */
    getAppFcoeFlags(): SettingDcbFlags
    getAppFcoeMode(): string
    getAppFcoePriority(): number
    getAppFipFlags(): SettingDcbFlags
    getAppFipPriority(): number
    getAppIscsiFlags(): SettingDcbFlags
    getAppIscsiPriority(): number
    getPriorityBandwidth(userPriority: number): number
    getPriorityFlowControl(userPriority: number): boolean
    getPriorityFlowControlFlags(): SettingDcbFlags
    getPriorityGroupBandwidth(groupId: number): number
    getPriorityGroupFlags(): SettingDcbFlags
    getPriorityGroupId(userPriority: number): number
    getPriorityStrictBandwidth(userPriority: number): boolean
    getPriorityTrafficClass(userPriority: number): number
    setPriorityBandwidth(userPriority: number, bandwidthPercent: number): void
    setPriorityFlowControl(userPriority: number, enabled: boolean): void
    setPriorityGroupBandwidth(groupId: number, bandwidthPercent: number): void
    setPriorityGroupId(userPriority: number, groupId: number): void
    setPriorityStrictBandwidth(userPriority: number, strict: boolean): void
    setPriorityTrafficClass(userPriority: number, trafficClass: number): void
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::app-fcoe-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-fcoe-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::app-fcoe-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::app-fcoe-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::app-fcoe-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::app-fcoe-mode", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-fcoe-mode", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::app-fcoe-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::app-fcoe-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::app-fcoe-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::app-fcoe-priority", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-fcoe-priority", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::app-fcoe-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::app-fcoe-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::app-fcoe-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::app-fip-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-fip-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::app-fip-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::app-fip-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::app-fip-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::app-fip-priority", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-fip-priority", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::app-fip-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::app-fip-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::app-fip-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::app-iscsi-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-iscsi-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::app-iscsi-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::app-iscsi-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::app-iscsi-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::app-iscsi-priority", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-iscsi-priority", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::app-iscsi-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::app-iscsi-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::app-iscsi-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::priority-bandwidth", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-bandwidth", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::priority-bandwidth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::priority-bandwidth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::priority-bandwidth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::priority-flow-control", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-flow-control", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::priority-flow-control", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::priority-flow-control", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::priority-flow-control", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::priority-flow-control-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-flow-control-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::priority-flow-control-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::priority-flow-control-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::priority-flow-control-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::priority-group-bandwidth", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-group-bandwidth", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::priority-group-bandwidth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::priority-group-bandwidth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::priority-group-bandwidth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::priority-group-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-group-flags", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::priority-group-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::priority-group-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::priority-group-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::priority-group-id", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-group-id", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::priority-group-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::priority-group-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::priority-group-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::priority-strict-bandwidth", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-strict-bandwidth", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::priority-strict-bandwidth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::priority-strict-bandwidth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::priority-strict-bandwidth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::priority-traffic-class", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority-traffic-class", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::priority-traffic-class", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::priority-traffic-class", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::priority-traffic-class", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingDcb, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingDcb_ConstructProps)
    _init (config?: SettingDcb_ConstructProps): void
    static new(): SettingDcb
    static $gtype: GObject.Type
}
export interface SettingDummy_ConstructProps extends Setting_ConstructProps {
}
export class SettingDummy {
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingDummy */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingDummy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingDummy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingDummy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingDummy_ConstructProps)
    _init (config?: SettingDummy_ConstructProps): void
    static new(): SettingDummy
    static $gtype: GObject.Type
}
export interface SettingEthtool_ConstructProps extends Setting_ConstructProps {
}
export class SettingEthtool {
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingEthtool */
    clearFeatures(): void
    getFeature(optname: string): Ternary
    getOptnames(): [ /* returnType */ string[], /* outLength */ number | null ]
    setFeature(optname: string, value: Ternary): void
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingEthtool, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingEthtool, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingEthtool, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingEthtool, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingEthtool_ConstructProps)
    _init (config?: SettingEthtool_ConstructProps): void
    static new(): SettingEthtool
    static $gtype: GObject.Type
}
export interface SettingGeneric_ConstructProps extends Setting_ConstructProps {
}
export class SettingGeneric {
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingGeneric */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingGeneric, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingGeneric, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingGeneric, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingGeneric_ConstructProps)
    _init (config?: SettingGeneric_ConstructProps): void
    static new(): SettingGeneric
    static $gtype: GObject.Type
}
export interface SettingGsm_ConstructProps extends Setting_ConstructProps {
    apn?: string
    autoConfig?: boolean
    deviceId?: string
    homeOnly?: boolean
    mtu?: number
    networkId?: string
    number?: string
    password?: string
    passwordFlags?: SettingSecretFlags
    pin?: string
    pinFlags?: SettingSecretFlags
    simId?: string
    simOperatorId?: string
    username?: string
}
export class SettingGsm {
    /* Properties of NM.SettingGsm */
    apn: string
    autoConfig: boolean
    deviceId: string
    homeOnly: boolean
    mtu: number
    networkId: string
    number: string
    password: string
    passwordFlags: SettingSecretFlags
    pin: string
    pinFlags: SettingSecretFlags
    simId: string
    simOperatorId: string
    username: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingGsm */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingGsm */
    getApn(): string
    getAutoConfig(): boolean
    getDeviceId(): string
    getHomeOnly(): boolean
    getMtu(): number
    getNetworkId(): string
    getNumber(): string
    getPassword(): string
    getPasswordFlags(): SettingSecretFlags
    getPin(): string
    getPinFlags(): SettingSecretFlags
    getSimId(): string
    getSimOperatorId(): string
    getUsername(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::apn", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::apn", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::apn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::apn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::apn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::auto-config", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-config", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::auto-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::auto-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::auto-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::home-only", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::home-only", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::home-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::home-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::home-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::network-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::network-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::network-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::network-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::password", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::password-flags", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-flags", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pin", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pin", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pin-flags", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pin-flags", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pin-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pin-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pin-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sim-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sim-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sim-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sim-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sim-operator-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim-operator-id", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sim-operator-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sim-operator-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sim-operator-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::username", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::username", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::username", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::username", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::username", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingGsm, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingGsm_ConstructProps)
    _init (config?: SettingGsm_ConstructProps): void
    static new(): SettingGsm
    static $gtype: GObject.Type
}
export interface SettingHostname_ConstructProps extends Setting_ConstructProps {
    fromDhcp?: Ternary
    fromDnsLookup?: Ternary
    onlyFromDefault?: Ternary
    priority?: number
}
export class SettingHostname {
    /* Properties of NM.SettingHostname */
    fromDhcp: Ternary
    fromDnsLookup: Ternary
    onlyFromDefault: Ternary
    priority: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingHostname */
    getFromDhcp(): Ternary
    getFromDnsLookup(): Ternary
    getOnlyFromDefault(): Ternary
    getPriority(): number
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingHostname, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingHostname, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::from-dhcp", callback: (($obj: SettingHostname, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::from-dhcp", callback: (($obj: SettingHostname, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::from-dhcp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::from-dhcp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::from-dhcp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::from-dns-lookup", callback: (($obj: SettingHostname, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::from-dns-lookup", callback: (($obj: SettingHostname, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::from-dns-lookup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::from-dns-lookup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::from-dns-lookup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::only-from-default", callback: (($obj: SettingHostname, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::only-from-default", callback: (($obj: SettingHostname, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::only-from-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::only-from-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::only-from-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::priority", callback: (($obj: SettingHostname, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority", callback: (($obj: SettingHostname, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingHostname, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingHostname, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingHostname_ConstructProps)
    _init (config?: SettingHostname_ConstructProps): void
    static new(): SettingHostname
    static $gtype: GObject.Type
}
export interface SettingIP4Config_ConstructProps extends SettingIPConfig_ConstructProps {
    dhcpClientId?: string
    dhcpFqdn?: string
    dhcpVendorClassIdentifier?: string
}
export class SettingIP4Config {
    /* Properties of NM.SettingIP4Config */
    dhcpClientId: string
    dhcpFqdn: string
    dhcpVendorClassIdentifier: string
    /* Properties of NM.SettingIPConfig */
    addresses: IPAddress[]
    dadTimeout: number
    dhcpHostname: string
    dhcpHostnameFlags: number
    dhcpIaid: string
    dhcpRejectServers: string[]
    dhcpSendHostname: boolean
    dhcpTimeout: number
    dns: string[]
    dnsOptions: string[]
    dnsPriority: number
    dnsSearch: string[]
    gateway: string
    ignoreAutoDns: boolean
    ignoreAutoRoutes: boolean
    mayFail: boolean
    method: string
    neverDefault: boolean
    routeMetric: number
    routeTable: number
    routes: IPRoute[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingIP4Config */
    parent: SettingIPConfig
    /* Fields of NM.SettingIPConfig */
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingIP4Config */
    getDhcpClientId(): string
    getDhcpFqdn(): string
    getDhcpVendorClassIdentifier(): string
    /* Methods of NM.SettingIPConfig */
    addAddress(address: IPAddress): boolean
    addDhcpRejectServer(server: string): void
    addDns(dns: string): boolean
    addDnsOption(dnsOption: string): boolean
    addDnsSearch(dnsSearch: string): boolean
    addRoute(route: IPRoute): boolean
    addRoutingRule(routingRule: IPRoutingRule): void
    clearAddresses(): void
    clearDhcpRejectServers(): void
    clearDns(): void
    clearDnsOptions(isSet: boolean): void
    clearDnsSearches(): void
    clearRoutes(): void
    clearRoutingRules(): void
    getAddress(idx: number): IPAddress
    getDadTimeout(): number
    getDhcpHostname(): string
    getDhcpHostnameFlags(): DhcpHostnameFlags
    getDhcpIaid(): string
    getDhcpRejectServers(): string[]
    getDhcpSendHostname(): boolean
    getDhcpTimeout(): number
    getDns(idx: number): string
    getDnsOption(idx: number): string
    getDnsPriority(): number
    getDnsSearch(idx: number): string
    getGateway(): string
    getIgnoreAutoDns(): boolean
    getIgnoreAutoRoutes(): boolean
    getMayFail(): boolean
    getMethod(): string
    getNeverDefault(): boolean
    getNumAddresses(): number
    getNumDns(): number
    getNumDnsOptions(): number
    getNumDnsSearches(): number
    getNumRoutes(): number
    getNumRoutingRules(): number
    getRoute(idx: number): IPRoute
    getRouteMetric(): number
    getRouteTable(): number
    getRoutingRule(idx: number): IPRoutingRule
    hasDnsOptions(): boolean
    removeAddress(idx: number): void
    removeAddressByValue(address: IPAddress): boolean
    removeDhcpRejectServer(idx: number): void
    removeDns(idx: number): void
    removeDnsByValue(dns: string): boolean
    removeDnsOption(idx: number): void
    removeDnsOptionByValue(dnsOption: string): boolean
    removeDnsSearch(idx: number): void
    removeDnsSearchByValue(dnsSearch: string): boolean
    removeRoute(idx: number): void
    removeRouteByValue(route: IPRoute): boolean
    removeRoutingRule(idx: number): void
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-client-id", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-client-id", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-client-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-client-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-client-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-fqdn", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-fqdn", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-fqdn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-fqdn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-fqdn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-vendor-class-identifier", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-vendor-class-identifier", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-vendor-class-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-vendor-class-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-vendor-class-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::addresses", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::addresses", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::addresses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::addresses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::addresses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dad-timeout", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dad-timeout", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dad-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dad-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dad-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-hostname", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-hostname", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-hostname-flags", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-hostname-flags", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-hostname-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-hostname-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-hostname-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-iaid", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-iaid", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-iaid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-iaid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-iaid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-reject-servers", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-reject-servers", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-reject-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-reject-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-reject-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-send-hostname", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-send-hostname", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-send-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-send-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-send-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-timeout", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-timeout", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dns", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dns-options", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-options", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dns-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dns-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dns-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dns-priority", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-priority", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dns-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dns-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dns-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dns-search", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-search", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dns-search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dns-search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dns-search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::gateway", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gateway", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::gateway", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::gateway", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::gateway", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ignore-auto-dns", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignore-auto-dns", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignore-auto-dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignore-auto-dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignore-auto-dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ignore-auto-routes", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignore-auto-routes", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignore-auto-routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignore-auto-routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignore-auto-routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::may-fail", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::may-fail", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::may-fail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::may-fail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::may-fail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::method", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::method", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::never-default", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::never-default", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::never-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::never-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::never-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::route-metric", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::route-metric", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::route-metric", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::route-metric", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::route-metric", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::route-table", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::route-table", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::route-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::route-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::route-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::routes", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::routes", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingIP4Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingIP4Config_ConstructProps)
    _init (config?: SettingIP4Config_ConstructProps): void
    static new(): SettingIP4Config
    static $gtype: GObject.Type
}
export interface SettingIP6Config_ConstructProps extends SettingIPConfig_ConstructProps {
    addrGenMode?: number
    dhcpDuid?: string
    ip6Privacy?: SettingIP6ConfigPrivacy
    raTimeout?: number
    token?: string
}
export class SettingIP6Config {
    /* Properties of NM.SettingIP6Config */
    addrGenMode: number
    dhcpDuid: string
    ip6Privacy: SettingIP6ConfigPrivacy
    raTimeout: number
    token: string
    /* Properties of NM.SettingIPConfig */
    addresses: IPAddress[]
    dadTimeout: number
    dhcpHostname: string
    dhcpHostnameFlags: number
    dhcpIaid: string
    dhcpRejectServers: string[]
    dhcpSendHostname: boolean
    dhcpTimeout: number
    dns: string[]
    dnsOptions: string[]
    dnsPriority: number
    dnsSearch: string[]
    gateway: string
    ignoreAutoDns: boolean
    ignoreAutoRoutes: boolean
    mayFail: boolean
    method: string
    neverDefault: boolean
    routeMetric: number
    routeTable: number
    routes: IPRoute[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingIP6Config */
    parent: SettingIPConfig
    /* Fields of NM.SettingIPConfig */
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingIP6Config */
    getAddrGenMode(): SettingIP6ConfigAddrGenMode
    getDhcpDuid(): string
    getIp6Privacy(): SettingIP6ConfigPrivacy
    getRaTimeout(): number
    getToken(): string
    /* Methods of NM.SettingIPConfig */
    addAddress(address: IPAddress): boolean
    addDhcpRejectServer(server: string): void
    addDns(dns: string): boolean
    addDnsOption(dnsOption: string): boolean
    addDnsSearch(dnsSearch: string): boolean
    addRoute(route: IPRoute): boolean
    addRoutingRule(routingRule: IPRoutingRule): void
    clearAddresses(): void
    clearDhcpRejectServers(): void
    clearDns(): void
    clearDnsOptions(isSet: boolean): void
    clearDnsSearches(): void
    clearRoutes(): void
    clearRoutingRules(): void
    getAddress(idx: number): IPAddress
    getDadTimeout(): number
    getDhcpHostname(): string
    getDhcpHostnameFlags(): DhcpHostnameFlags
    getDhcpIaid(): string
    getDhcpRejectServers(): string[]
    getDhcpSendHostname(): boolean
    getDhcpTimeout(): number
    getDns(idx: number): string
    getDnsOption(idx: number): string
    getDnsPriority(): number
    getDnsSearch(idx: number): string
    getGateway(): string
    getIgnoreAutoDns(): boolean
    getIgnoreAutoRoutes(): boolean
    getMayFail(): boolean
    getMethod(): string
    getNeverDefault(): boolean
    getNumAddresses(): number
    getNumDns(): number
    getNumDnsOptions(): number
    getNumDnsSearches(): number
    getNumRoutes(): number
    getNumRoutingRules(): number
    getRoute(idx: number): IPRoute
    getRouteMetric(): number
    getRouteTable(): number
    getRoutingRule(idx: number): IPRoutingRule
    hasDnsOptions(): boolean
    removeAddress(idx: number): void
    removeAddressByValue(address: IPAddress): boolean
    removeDhcpRejectServer(idx: number): void
    removeDns(idx: number): void
    removeDnsByValue(dns: string): boolean
    removeDnsOption(idx: number): void
    removeDnsOptionByValue(dnsOption: string): boolean
    removeDnsSearch(idx: number): void
    removeDnsSearchByValue(dnsSearch: string): boolean
    removeRoute(idx: number): void
    removeRouteByValue(route: IPRoute): boolean
    removeRoutingRule(idx: number): void
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::addr-gen-mode", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::addr-gen-mode", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::addr-gen-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::addr-gen-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::addr-gen-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-duid", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-duid", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-duid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-duid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-duid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-privacy", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-privacy", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-privacy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-privacy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-privacy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ra-timeout", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ra-timeout", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ra-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ra-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ra-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::token", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::token", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::token", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::token", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::token", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::addresses", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::addresses", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::addresses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::addresses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::addresses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dad-timeout", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dad-timeout", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dad-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dad-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dad-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-hostname", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-hostname", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-hostname-flags", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-hostname-flags", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-hostname-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-hostname-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-hostname-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-iaid", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-iaid", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-iaid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-iaid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-iaid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-reject-servers", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-reject-servers", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-reject-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-reject-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-reject-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-send-hostname", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-send-hostname", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-send-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-send-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-send-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-timeout", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-timeout", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dns", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dns-options", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-options", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dns-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dns-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dns-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dns-priority", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-priority", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dns-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dns-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dns-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dns-search", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-search", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dns-search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dns-search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dns-search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::gateway", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gateway", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::gateway", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::gateway", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::gateway", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ignore-auto-dns", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignore-auto-dns", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignore-auto-dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignore-auto-dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignore-auto-dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ignore-auto-routes", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignore-auto-routes", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignore-auto-routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignore-auto-routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignore-auto-routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::may-fail", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::may-fail", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::may-fail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::may-fail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::may-fail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::method", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::method", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::never-default", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::never-default", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::never-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::never-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::never-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::route-metric", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::route-metric", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::route-metric", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::route-metric", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::route-metric", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::route-table", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::route-table", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::route-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::route-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::route-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::routes", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::routes", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingIP6Config, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingIP6Config_ConstructProps)
    _init (config?: SettingIP6Config_ConstructProps): void
    static new(): SettingIP6Config
    static $gtype: GObject.Type
}
export interface SettingIPConfig_ConstructProps extends Setting_ConstructProps {
    addresses?: IPAddress[]
    dadTimeout?: number
    dhcpHostname?: string
    dhcpHostnameFlags?: number
    dhcpIaid?: string
    dhcpRejectServers?: string[]
    dhcpSendHostname?: boolean
    dhcpTimeout?: number
    dns?: string[]
    dnsOptions?: string[]
    dnsPriority?: number
    dnsSearch?: string[]
    gateway?: string
    ignoreAutoDns?: boolean
    ignoreAutoRoutes?: boolean
    mayFail?: boolean
    method?: string
    neverDefault?: boolean
    routeMetric?: number
    routeTable?: number
    routes?: IPRoute[]
}
export class SettingIPConfig {
    /* Properties of NM.SettingIPConfig */
    addresses: IPAddress[]
    dadTimeout: number
    dhcpHostname: string
    dhcpHostnameFlags: number
    dhcpIaid: string
    dhcpRejectServers: string[]
    dhcpSendHostname: boolean
    dhcpTimeout: number
    dns: string[]
    dnsOptions: string[]
    dnsPriority: number
    dnsSearch: string[]
    gateway: string
    ignoreAutoDns: boolean
    ignoreAutoRoutes: boolean
    mayFail: boolean
    method: string
    neverDefault: boolean
    routeMetric: number
    routeTable: number
    routes: IPRoute[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingIPConfig */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingIPConfig */
    addAddress(address: IPAddress): boolean
    addDhcpRejectServer(server: string): void
    addDns(dns: string): boolean
    addDnsOption(dnsOption: string): boolean
    addDnsSearch(dnsSearch: string): boolean
    addRoute(route: IPRoute): boolean
    addRoutingRule(routingRule: IPRoutingRule): void
    clearAddresses(): void
    clearDhcpRejectServers(): void
    clearDns(): void
    clearDnsOptions(isSet: boolean): void
    clearDnsSearches(): void
    clearRoutes(): void
    clearRoutingRules(): void
    getAddress(idx: number): IPAddress
    getDadTimeout(): number
    getDhcpHostname(): string
    getDhcpHostnameFlags(): DhcpHostnameFlags
    getDhcpIaid(): string
    getDhcpRejectServers(): string[]
    getDhcpSendHostname(): boolean
    getDhcpTimeout(): number
    getDns(idx: number): string
    getDnsOption(idx: number): string
    getDnsPriority(): number
    getDnsSearch(idx: number): string
    getGateway(): string
    getIgnoreAutoDns(): boolean
    getIgnoreAutoRoutes(): boolean
    getMayFail(): boolean
    getMethod(): string
    getNeverDefault(): boolean
    getNumAddresses(): number
    getNumDns(): number
    getNumDnsOptions(): number
    getNumDnsSearches(): number
    getNumRoutes(): number
    getNumRoutingRules(): number
    getRoute(idx: number): IPRoute
    getRouteMetric(): number
    getRouteTable(): number
    getRoutingRule(idx: number): IPRoutingRule
    hasDnsOptions(): boolean
    removeAddress(idx: number): void
    removeAddressByValue(address: IPAddress): boolean
    removeDhcpRejectServer(idx: number): void
    removeDns(idx: number): void
    removeDnsByValue(dns: string): boolean
    removeDnsOption(idx: number): void
    removeDnsOptionByValue(dnsOption: string): boolean
    removeDnsSearch(idx: number): void
    removeDnsSearchByValue(dnsSearch: string): boolean
    removeRoute(idx: number): void
    removeRouteByValue(route: IPRoute): boolean
    removeRoutingRule(idx: number): void
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::addresses", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::addresses", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::addresses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::addresses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::addresses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dad-timeout", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dad-timeout", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dad-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dad-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dad-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-hostname", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-hostname", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-hostname-flags", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-hostname-flags", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-hostname-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-hostname-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-hostname-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-iaid", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-iaid", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-iaid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-iaid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-iaid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-reject-servers", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-reject-servers", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-reject-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-reject-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-reject-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-send-hostname", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-send-hostname", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-send-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-send-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-send-hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-timeout", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-timeout", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dns", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dns-options", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-options", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dns-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dns-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dns-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dns-priority", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-priority", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dns-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dns-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dns-priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dns-search", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dns-search", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dns-search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dns-search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dns-search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::gateway", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gateway", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::gateway", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::gateway", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::gateway", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ignore-auto-dns", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignore-auto-dns", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignore-auto-dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignore-auto-dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignore-auto-dns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ignore-auto-routes", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignore-auto-routes", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignore-auto-routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignore-auto-routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignore-auto-routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::may-fail", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::may-fail", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::may-fail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::may-fail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::may-fail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::method", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::method", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::never-default", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::never-default", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::never-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::never-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::never-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::route-metric", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::route-metric", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::route-metric", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::route-metric", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::route-metric", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::route-table", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::route-table", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::route-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::route-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::route-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::routes", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::routes", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingIPConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingIPConfig_ConstructProps)
    _init (config?: SettingIPConfig_ConstructProps): void
    static $gtype: GObject.Type
}
export interface SettingIPTunnel_ConstructProps extends Setting_ConstructProps {
    encapsulationLimit?: number
    flags?: number
    flowLabel?: number
    inputKey?: string
    local?: string
    mode?: number
    mtu?: number
    outputKey?: string
    parent?: string
    pathMtuDiscovery?: boolean
    remote?: string
    tos?: number
    ttl?: number
}
export class SettingIPTunnel {
    /* Properties of NM.SettingIPTunnel */
    encapsulationLimit: number
    flags: number
    flowLabel: number
    inputKey: string
    local: string
    mode: number
    mtu: number
    outputKey: string
    parent: string
    pathMtuDiscovery: boolean
    remote: string
    tos: number
    ttl: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingIPTunnel */
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingIPTunnel */
    getEncapsulationLimit(): number
    getFlags(): IPTunnelFlags
    getFlowLabel(): number
    getInputKey(): string
    getLocal(): string
    getMode(): IPTunnelMode
    getMtu(): number
    getOutputKey(): string
    getParent(): string
    getPathMtuDiscovery(): boolean
    getRemote(): string
    getTos(): number
    getTtl(): number
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::encapsulation-limit", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encapsulation-limit", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::encapsulation-limit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::encapsulation-limit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::encapsulation-limit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::flags", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::flow-label", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flow-label", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::flow-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::flow-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::flow-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::input-key", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-key", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::input-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::input-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::input-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mode", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::output-key", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::output-key", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::output-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::output-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::output-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path-mtu-discovery", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path-mtu-discovery", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path-mtu-discovery", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path-mtu-discovery", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path-mtu-discovery", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::remote", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::remote", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::remote", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::remote", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::remote", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tos", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tos", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tos", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tos", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tos", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ttl", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ttl", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ttl", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ttl", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ttl", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingIPTunnel, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingIPTunnel_ConstructProps)
    _init (config?: SettingIPTunnel_ConstructProps): void
    static new(): SettingIPTunnel
    static $gtype: GObject.Type
}
export interface SettingInfiniband_ConstructProps extends Setting_ConstructProps {
    macAddress?: string
    mtu?: number
    pKey?: number
    parent?: string
    transportMode?: string
}
export class SettingInfiniband {
    /* Properties of NM.SettingInfiniband */
    macAddress: string
    mtu: number
    pKey: number
    parent: string
    transportMode: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingInfiniband */
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingInfiniband */
    getMacAddress(): string
    getMtu(): number
    getPKey(): number
    getParent(): string
    getTransportMode(): string
    getVirtualInterfaceName(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mac-address", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::p-key", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::p-key", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::p-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::p-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::p-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::transport-mode", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transport-mode", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::transport-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::transport-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::transport-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingInfiniband, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingInfiniband_ConstructProps)
    _init (config?: SettingInfiniband_ConstructProps): void
    static new(): SettingInfiniband
    static $gtype: GObject.Type
}
export interface SettingMacsec_ConstructProps extends Setting_ConstructProps {
    encrypt?: boolean
    mkaCak?: string
    mkaCakFlags?: SettingSecretFlags
    mkaCkn?: string
    mode?: number
    parent?: string
    port?: number
    sendSci?: boolean
    validation?: number
}
export class SettingMacsec {
    /* Properties of NM.SettingMacsec */
    encrypt: boolean
    mkaCak: string
    mkaCakFlags: SettingSecretFlags
    mkaCkn: string
    mode: number
    parent: string
    port: number
    sendSci: boolean
    validation: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingMacsec */
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingMacsec */
    getEncrypt(): boolean
    getMkaCak(): string
    getMkaCakFlags(): SettingSecretFlags
    getMkaCkn(): string
    getMode(): SettingMacsecMode
    getParent(): string
    getPort(): number
    getSendSci(): boolean
    getValidation(): SettingMacsecValidation
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::encrypt", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encrypt", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::encrypt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::encrypt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::encrypt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mka-cak", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mka-cak", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mka-cak", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mka-cak", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mka-cak", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mka-cak-flags", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mka-cak-flags", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mka-cak-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mka-cak-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mka-cak-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mka-ckn", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mka-ckn", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mka-ckn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mka-ckn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mka-ckn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mode", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::port", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::port", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::send-sci", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::send-sci", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::send-sci", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::send-sci", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::send-sci", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validation", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validation", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingMacsec, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingMacsec_ConstructProps)
    _init (config?: SettingMacsec_ConstructProps): void
    static new(): SettingMacsec
    static $gtype: GObject.Type
}
export interface SettingMacvlan_ConstructProps extends Setting_ConstructProps {
    mode?: number
    parent?: string
    promiscuous?: boolean
    tap?: boolean
}
export class SettingMacvlan {
    /* Properties of NM.SettingMacvlan */
    mode: number
    parent: string
    promiscuous: boolean
    tap: boolean
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingMacvlan */
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingMacvlan */
    getMode(): SettingMacvlanMode
    getParent(): string
    getPromiscuous(): boolean
    getTap(): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mode", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::promiscuous", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::promiscuous", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::promiscuous", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::promiscuous", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::promiscuous", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tap", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tap", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingMacvlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingMacvlan_ConstructProps)
    _init (config?: SettingMacvlan_ConstructProps): void
    static new(): SettingMacvlan
    static $gtype: GObject.Type
}
export interface SettingMatch_ConstructProps extends Setting_ConstructProps {
    driver?: string[]
    interfaceName?: string[]
    kernelCommandLine?: string[]
    path?: string[]
}
export class SettingMatch {
    /* Properties of NM.SettingMatch */
    driver: string[]
    interfaceName: string[]
    kernelCommandLine: string[]
    path: string[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingMatch */
    addDriver(driver: string): void
    addInterfaceName(interfaceName: string): void
    addKernelCommandLine(kernelCommandLine: string): void
    addPath(path: string): void
    clearDrivers(): void
    clearInterfaceNames(): void
    clearKernelCommandLines(): void
    clearPaths(): void
    getDriver(idx: number): string
    getDrivers(): string[]
    getInterfaceName(idx: number): string
    getInterfaceNames(): string[]
    getKernelCommandLine(idx: number): string
    getKernelCommandLines(): string[]
    getNumDrivers(): number
    getNumInterfaceNames(): number
    getNumKernelCommandLines(): number
    getNumPaths(): number
    getPath(idx: number): string
    getPaths(): string[]
    removeDriver(idx: number): void
    removeDriverByValue(driver: string): boolean
    removeInterfaceName(idx: number): void
    removeInterfaceNameByValue(interfaceName: string): boolean
    removeKernelCommandLine(idx: number): void
    removeKernelCommandLineByValue(kernelCommandLine: string): boolean
    removePath(idx: number): void
    removePathByValue(path: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::driver", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::driver", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::driver", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface-name", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-name", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::kernel-command-line", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::kernel-command-line", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::kernel-command-line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::kernel-command-line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::kernel-command-line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingMatch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingMatch_ConstructProps)
    _init (config?: SettingMatch_ConstructProps): void
    static new(): SettingMatch
    static $gtype: GObject.Type
}
export interface SettingOlpcMesh_ConstructProps extends Setting_ConstructProps {
    channel?: number
    dhcpAnycastAddress?: string
    ssid?: any
}
export class SettingOlpcMesh {
    /* Properties of NM.SettingOlpcMesh */
    channel: number
    dhcpAnycastAddress: string
    ssid: any
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingOlpcMesh */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingOlpcMesh */
    getChannel(): number
    getDhcpAnycastAddress(): string
    getSsid(): any
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::channel", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::channel", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::channel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::channel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::channel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp-anycast-address", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp-anycast-address", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp-anycast-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp-anycast-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp-anycast-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ssid", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ssid", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ssid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ssid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ssid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingOlpcMesh, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingOlpcMesh_ConstructProps)
    _init (config?: SettingOlpcMesh_ConstructProps): void
    static new(): SettingOlpcMesh
    static $gtype: GObject.Type
}
export interface SettingOvsBridge_ConstructProps extends Setting_ConstructProps {
    datapathType?: string
    failMode?: string
    mcastSnoopingEnable?: boolean
    rstpEnable?: boolean
    stpEnable?: boolean
}
export class SettingOvsBridge {
    /* Properties of NM.SettingOvsBridge */
    datapathType: string
    failMode: string
    mcastSnoopingEnable: boolean
    rstpEnable: boolean
    stpEnable: boolean
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingOvsBridge */
    getDatapathType(): string
    getFailMode(): string
    getMcastSnoopingEnable(): boolean
    getRstpEnable(): boolean
    getStpEnable(): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::datapath-type", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::datapath-type", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::datapath-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::datapath-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::datapath-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fail-mode", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fail-mode", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fail-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fail-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fail-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mcast-snooping-enable", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mcast-snooping-enable", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mcast-snooping-enable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mcast-snooping-enable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mcast-snooping-enable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rstp-enable", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rstp-enable", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rstp-enable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rstp-enable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rstp-enable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::stp-enable", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stp-enable", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::stp-enable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::stp-enable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::stp-enable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingOvsBridge, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingOvsBridge_ConstructProps)
    _init (config?: SettingOvsBridge_ConstructProps): void
    static new(): SettingOvsBridge
    static $gtype: GObject.Type
}
export interface SettingOvsDpdk_ConstructProps extends Setting_ConstructProps {
    devargs?: string
}
export class SettingOvsDpdk {
    /* Properties of NM.SettingOvsDpdk */
    devargs: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingOvsDpdk */
    getDevargs(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingOvsDpdk, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingOvsDpdk, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::devargs", callback: (($obj: SettingOvsDpdk, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::devargs", callback: (($obj: SettingOvsDpdk, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::devargs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::devargs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::devargs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingOvsDpdk, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingOvsDpdk, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingOvsDpdk_ConstructProps)
    _init (config?: SettingOvsDpdk_ConstructProps): void
    static new(): SettingOvsDpdk
    static $gtype: GObject.Type
}
export interface SettingOvsExternalIDs_ConstructProps extends Setting_ConstructProps {
    data?: GLib.HashTable
}
export class SettingOvsExternalIDs {
    /* Properties of NM.SettingOvsExternalIDs */
    data: GLib.HashTable
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingOvsExternalIDs */
    getData(key: string): string
    getDataKeys(): string[]
    setData(key: string, val?: string | null): void
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingOvsExternalIDs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingOvsExternalIDs, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: SettingOvsExternalIDs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: SettingOvsExternalIDs, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingOvsExternalIDs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingOvsExternalIDs, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingOvsExternalIDs_ConstructProps)
    _init (config?: SettingOvsExternalIDs_ConstructProps): void
    static new(): SettingOvsExternalIDs
    static checkKey(key?: string | null): boolean
    static checkVal(val?: string | null): boolean
    static $gtype: GObject.Type
}
export interface SettingOvsInterface_ConstructProps extends Setting_ConstructProps {
    type?: string
}
export class SettingOvsInterface {
    /* Properties of NM.SettingOvsInterface */
    type: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingOvsInterface */
    getInterfaceType(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingOvsInterface, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: SettingOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: SettingOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingOvsInterface, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingOvsInterface, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingOvsInterface_ConstructProps)
    _init (config?: SettingOvsInterface_ConstructProps): void
    static new(): SettingOvsInterface
    static $gtype: GObject.Type
}
export interface SettingOvsPatch_ConstructProps extends Setting_ConstructProps {
    peer?: string
}
export class SettingOvsPatch {
    /* Properties of NM.SettingOvsPatch */
    peer: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingOvsPatch */
    getPeer(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingOvsPatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingOvsPatch, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::peer", callback: (($obj: SettingOvsPatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::peer", callback: (($obj: SettingOvsPatch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::peer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::peer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::peer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingOvsPatch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingOvsPatch, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingOvsPatch_ConstructProps)
    _init (config?: SettingOvsPatch_ConstructProps): void
    static new(): SettingOvsPatch
    static $gtype: GObject.Type
}
export interface SettingOvsPort_ConstructProps extends Setting_ConstructProps {
    bondDowndelay?: number
    bondMode?: string
    bondUpdelay?: number
    lacp?: string
    tag?: number
    vlanMode?: string
}
export class SettingOvsPort {
    /* Properties of NM.SettingOvsPort */
    bondDowndelay: number
    bondMode: string
    bondUpdelay: number
    lacp: string
    tag: number
    vlanMode: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingOvsPort */
    getBondDowndelay(): number
    getBondMode(): string
    getBondUpdelay(): number
    getLacp(): string
    getTag(): number
    getVlanMode(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bond-downdelay", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bond-downdelay", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bond-downdelay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bond-downdelay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bond-downdelay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bond-mode", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bond-mode", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bond-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bond-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bond-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bond-updelay", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bond-updelay", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bond-updelay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bond-updelay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bond-updelay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lacp", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lacp", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lacp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lacp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lacp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vlan-mode", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlan-mode", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vlan-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vlan-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vlan-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingOvsPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingOvsPort_ConstructProps)
    _init (config?: SettingOvsPort_ConstructProps): void
    static new(): SettingOvsPort
    static $gtype: GObject.Type
}
export interface SettingPpp_ConstructProps extends Setting_ConstructProps {
    baud?: number
    crtscts?: boolean
    lcpEchoFailure?: number
    lcpEchoInterval?: number
    mppeStateful?: boolean
    mru?: number
    mtu?: number
    noVjComp?: boolean
    noauth?: boolean
    nobsdcomp?: boolean
    nodeflate?: boolean
    refuseChap?: boolean
    refuseEap?: boolean
    refuseMschap?: boolean
    refuseMschapv2?: boolean
    refusePap?: boolean
    requireMppe?: boolean
    requireMppe128?: boolean
}
export class SettingPpp {
    /* Properties of NM.SettingPpp */
    baud: number
    crtscts: boolean
    lcpEchoFailure: number
    lcpEchoInterval: number
    mppeStateful: boolean
    mru: number
    mtu: number
    noVjComp: boolean
    noauth: boolean
    nobsdcomp: boolean
    nodeflate: boolean
    refuseChap: boolean
    refuseEap: boolean
    refuseMschap: boolean
    refuseMschapv2: boolean
    refusePap: boolean
    requireMppe: boolean
    requireMppe128: boolean
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingPpp */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingPpp */
    getBaud(): number
    getCrtscts(): boolean
    getLcpEchoFailure(): number
    getLcpEchoInterval(): number
    getMppeStateful(): boolean
    getMru(): number
    getMtu(): number
    getNoVjComp(): boolean
    getNoauth(): boolean
    getNobsdcomp(): boolean
    getNodeflate(): boolean
    getRefuseChap(): boolean
    getRefuseEap(): boolean
    getRefuseMschap(): boolean
    getRefuseMschapv2(): boolean
    getRefusePap(): boolean
    getRequireMppe(): boolean
    getRequireMppe128(): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::baud", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::baud", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::baud", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::baud", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::baud", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::crtscts", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::crtscts", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::crtscts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::crtscts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::crtscts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lcp-echo-failure", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lcp-echo-failure", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lcp-echo-failure", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lcp-echo-failure", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lcp-echo-failure", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lcp-echo-interval", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lcp-echo-interval", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lcp-echo-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lcp-echo-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lcp-echo-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mppe-stateful", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mppe-stateful", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mppe-stateful", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mppe-stateful", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mppe-stateful", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mru", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mru", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mru", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mru", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mru", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::no-vj-comp", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-vj-comp", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::no-vj-comp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::no-vj-comp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::no-vj-comp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::noauth", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::noauth", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::noauth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::noauth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::noauth", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nobsdcomp", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nobsdcomp", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nobsdcomp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nobsdcomp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nobsdcomp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodeflate", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodeflate", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodeflate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodeflate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodeflate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::refuse-chap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::refuse-chap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::refuse-chap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::refuse-chap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::refuse-chap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::refuse-eap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::refuse-eap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::refuse-eap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::refuse-eap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::refuse-eap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::refuse-mschap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::refuse-mschap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::refuse-mschap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::refuse-mschap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::refuse-mschap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::refuse-mschapv2", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::refuse-mschapv2", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::refuse-mschapv2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::refuse-mschapv2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::refuse-mschapv2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::refuse-pap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::refuse-pap", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::refuse-pap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::refuse-pap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::refuse-pap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::require-mppe", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::require-mppe", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::require-mppe", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::require-mppe", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::require-mppe", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::require-mppe-128", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::require-mppe-128", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::require-mppe-128", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::require-mppe-128", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::require-mppe-128", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingPpp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingPpp_ConstructProps)
    _init (config?: SettingPpp_ConstructProps): void
    static new(): SettingPpp
    static $gtype: GObject.Type
}
export interface SettingPppoe_ConstructProps extends Setting_ConstructProps {
    parent?: string
    password?: string
    passwordFlags?: SettingSecretFlags
    service?: string
    username?: string
}
export class SettingPppoe {
    /* Properties of NM.SettingPppoe */
    parent: string
    password: string
    passwordFlags: SettingSecretFlags
    service: string
    username: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingPppoe */
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingPppoe */
    getParent(): string
    getPassword(): string
    getPasswordFlags(): SettingSecretFlags
    getService(): string
    getUsername(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::password", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::password-flags", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-flags", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::service", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::service", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::username", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::username", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::username", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::username", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::username", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingPppoe, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingPppoe_ConstructProps)
    _init (config?: SettingPppoe_ConstructProps): void
    static new(): SettingPppoe
    static $gtype: GObject.Type
}
export interface SettingProxy_ConstructProps extends Setting_ConstructProps {
    browserOnly?: boolean
    method?: number
    pacScript?: string
    pacUrl?: string
}
export class SettingProxy {
    /* Properties of NM.SettingProxy */
    browserOnly: boolean
    method: number
    pacScript: string
    pacUrl: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingProxy */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingProxy */
    getBrowserOnly(): boolean
    getMethod(): SettingProxyMethod
    getPacScript(): string
    getPacUrl(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::browser-only", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::browser-only", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::browser-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::browser-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::browser-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::method", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::method", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pac-script", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pac-script", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pac-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pac-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pac-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pac-url", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pac-url", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pac-url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pac-url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pac-url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingProxy_ConstructProps)
    _init (config?: SettingProxy_ConstructProps): void
    static new(): SettingProxy
    static $gtype: GObject.Type
}
export interface SettingSerial_ConstructProps extends Setting_ConstructProps {
    baud?: number
    bits?: number
    parity?: SettingSerialParity
    sendDelay?: number
    stopbits?: number
}
export class SettingSerial {
    /* Properties of NM.SettingSerial */
    baud: number
    bits: number
    parity: SettingSerialParity
    sendDelay: number
    stopbits: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingSerial */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingSerial */
    getBaud(): number
    getBits(): number
    getParity(): SettingSerialParity
    getSendDelay(): number
    getStopbits(): number
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::baud", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::baud", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::baud", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::baud", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::baud", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bits", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bits", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parity", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parity", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::send-delay", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::send-delay", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::send-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::send-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::send-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::stopbits", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stopbits", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::stopbits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::stopbits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::stopbits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingSerial, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingSerial_ConstructProps)
    _init (config?: SettingSerial_ConstructProps): void
    static new(): SettingSerial
    static $gtype: GObject.Type
}
export interface SettingSriov_ConstructProps extends Setting_ConstructProps {
    autoprobeDrivers?: Ternary
    totalVfs?: number
    vfs?: SriovVF[]
}
export class SettingSriov {
    /* Properties of NM.SettingSriov */
    autoprobeDrivers: Ternary
    totalVfs: number
    vfs: SriovVF[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingSriov */
    addVf(vf: SriovVF): void
    clearVfs(): void
    getAutoprobeDrivers(): Ternary
    getNumVfs(): number
    getTotalVfs(): number
    getVf(idx: number): SriovVF
    removeVf(idx: number): void
    removeVfByIndex(index: number): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoprobe-drivers", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoprobe-drivers", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoprobe-drivers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoprobe-drivers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoprobe-drivers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::total-vfs", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::total-vfs", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::total-vfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::total-vfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::total-vfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vfs", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vfs", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingSriov, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingSriov_ConstructProps)
    _init (config?: SettingSriov_ConstructProps): void
    static new(): SettingSriov
    static $gtype: GObject.Type
}
export interface SettingTCConfig_ConstructProps extends Setting_ConstructProps {
    qdiscs?: TCQdisc[]
    tfilters?: TCTfilter[]
}
export class SettingTCConfig {
    /* Properties of NM.SettingTCConfig */
    qdiscs: TCQdisc[]
    tfilters: TCTfilter[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingTCConfig */
    addQdisc(qdisc: TCQdisc): boolean
    addTfilter(tfilter: TCTfilter): boolean
    clearQdiscs(): void
    clearTfilters(): void
    getNumQdiscs(): number
    getNumTfilters(): number
    getQdisc(idx: number): TCQdisc
    getTfilter(idx: number): TCTfilter
    removeQdisc(idx: number): void
    removeQdiscByValue(qdisc: TCQdisc): boolean
    removeTfilter(idx: number): void
    removeTfilterByValue(tfilter: TCTfilter): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::qdiscs", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::qdiscs", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::qdiscs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::qdiscs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::qdiscs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tfilters", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tfilters", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tfilters", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tfilters", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tfilters", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingTCConfig, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingTCConfig_ConstructProps)
    _init (config?: SettingTCConfig_ConstructProps): void
    static new(): SettingTCConfig
    static $gtype: GObject.Type
}
export interface SettingTeam_ConstructProps extends Setting_ConstructProps {
    config?: string
    linkWatchers?: TeamLinkWatcher[]
    mcastRejoinCount?: number
    mcastRejoinInterval?: number
    notifyPeersCount?: number
    notifyPeersInterval?: number
    runner?: string
    runnerActive?: boolean
    runnerAggSelectPolicy?: string
    runnerFastRate?: boolean
    runnerHwaddrPolicy?: string
    runnerMinPorts?: number
    runnerSysPrio?: number
    runnerTxBalancer?: string
    runnerTxBalancerInterval?: number
    runnerTxHash?: string[]
}
export class SettingTeam {
    /* Properties of NM.SettingTeam */
    config: string
    linkWatchers: TeamLinkWatcher[]
    mcastRejoinCount: number
    mcastRejoinInterval: number
    notifyPeersCount: number
    notifyPeersInterval: number
    runner: string
    runnerActive: boolean
    runnerAggSelectPolicy: string
    runnerFastRate: boolean
    runnerHwaddrPolicy: string
    runnerMinPorts: number
    runnerSysPrio: number
    runnerTxBalancer: string
    runnerTxBalancerInterval: number
    runnerTxHash: string[]
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingTeam */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingTeam */
    addLinkWatcher(linkWatcher: TeamLinkWatcher): boolean
    addRunnerTxHash(txhash: string): boolean
    clearLinkWatchers(): void
    getConfig(): string
    getLinkWatcher(idx: number): TeamLinkWatcher
    getMcastRejoinCount(): number
    getMcastRejoinInterval(): number
    getNotifyPeersCount(): number
    getNotifyPeersInterval(): number
    getNumLinkWatchers(): number
    getNumRunnerTxHash(): number
    getRunner(): string
    getRunnerActive(): boolean
    getRunnerAggSelectPolicy(): string
    getRunnerFastRate(): boolean
    getRunnerHwaddrPolicy(): string
    getRunnerMinPorts(): number
    getRunnerSysPrio(): number
    getRunnerTxBalancer(): string
    getRunnerTxBalancerInterval(): number
    getRunnerTxHash(idx: number): string
    removeLinkWatcher(idx: number): void
    removeLinkWatcherByValue(linkWatcher: TeamLinkWatcher): boolean
    removeRunnerTxHash(idx: number): void
    removeRunnerTxHashByValue(txhash: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::config", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::config", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::link-watchers", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::link-watchers", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::link-watchers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::link-watchers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::link-watchers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mcast-rejoin-count", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mcast-rejoin-count", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mcast-rejoin-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mcast-rejoin-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mcast-rejoin-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mcast-rejoin-interval", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mcast-rejoin-interval", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mcast-rejoin-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mcast-rejoin-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mcast-rejoin-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::notify-peers-count", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::notify-peers-count", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::notify-peers-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::notify-peers-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::notify-peers-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::notify-peers-interval", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::notify-peers-interval", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::notify-peers-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::notify-peers-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::notify-peers-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::runner", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::runner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::runner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::runner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::runner-active", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-active", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::runner-active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::runner-active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::runner-active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::runner-agg-select-policy", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-agg-select-policy", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::runner-agg-select-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::runner-agg-select-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::runner-agg-select-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::runner-fast-rate", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-fast-rate", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::runner-fast-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::runner-fast-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::runner-fast-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::runner-hwaddr-policy", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-hwaddr-policy", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::runner-hwaddr-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::runner-hwaddr-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::runner-hwaddr-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::runner-min-ports", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-min-ports", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::runner-min-ports", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::runner-min-ports", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::runner-min-ports", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::runner-sys-prio", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-sys-prio", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::runner-sys-prio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::runner-sys-prio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::runner-sys-prio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::runner-tx-balancer", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-tx-balancer", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::runner-tx-balancer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::runner-tx-balancer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::runner-tx-balancer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::runner-tx-balancer-interval", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-tx-balancer-interval", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::runner-tx-balancer-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::runner-tx-balancer-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::runner-tx-balancer-interval", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::runner-tx-hash", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runner-tx-hash", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::runner-tx-hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::runner-tx-hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::runner-tx-hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingTeam, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingTeam_ConstructProps)
    _init (config?: SettingTeam_ConstructProps): void
    static new(): SettingTeam
    static $gtype: GObject.Type
}
export interface SettingTeamPort_ConstructProps extends Setting_ConstructProps {
    config?: string
    lacpKey?: number
    lacpPrio?: number
    linkWatchers?: TeamLinkWatcher[]
    prio?: number
    queueId?: number
    sticky?: boolean
}
export class SettingTeamPort {
    /* Properties of NM.SettingTeamPort */
    config: string
    lacpKey: number
    lacpPrio: number
    linkWatchers: TeamLinkWatcher[]
    prio: number
    queueId: number
    sticky: boolean
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingTeamPort */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingTeamPort */
    addLinkWatcher(linkWatcher: TeamLinkWatcher): boolean
    clearLinkWatchers(): void
    getConfig(): string
    getLacpKey(): number
    getLacpPrio(): number
    getLinkWatcher(idx: number): TeamLinkWatcher
    getNumLinkWatchers(): number
    getPrio(): number
    getQueueId(): number
    getSticky(): boolean
    removeLinkWatcher(idx: number): void
    removeLinkWatcherByValue(linkWatcher: TeamLinkWatcher): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::config", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::config", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lacp-key", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lacp-key", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lacp-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lacp-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lacp-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lacp-prio", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lacp-prio", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lacp-prio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lacp-prio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lacp-prio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::link-watchers", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::link-watchers", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::link-watchers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::link-watchers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::link-watchers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prio", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prio", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::queue-id", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::queue-id", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::queue-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::queue-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::queue-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sticky", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sticky", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sticky", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sticky", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sticky", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingTeamPort, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingTeamPort_ConstructProps)
    _init (config?: SettingTeamPort_ConstructProps): void
    static new(): SettingTeamPort
    static $gtype: GObject.Type
}
export interface SettingTun_ConstructProps extends Setting_ConstructProps {
    group?: string
    mode?: number
    multiQueue?: boolean
    owner?: string
    pi?: boolean
    vnetHdr?: boolean
}
export class SettingTun {
    /* Properties of NM.SettingTun */
    group: string
    mode: number
    multiQueue: boolean
    owner: string
    pi: boolean
    vnetHdr: boolean
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingTun */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingTun */
    getGroup(): string
    getMode(): SettingTunMode
    getMultiQueue(): boolean
    getOwner(): string
    getPi(): boolean
    getVnetHdr(): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::group", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mode", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multi-queue", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multi-queue", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multi-queue", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multi-queue", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multi-queue", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pi", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pi", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vnet-hdr", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vnet-hdr", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vnet-hdr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vnet-hdr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vnet-hdr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingTun, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingTun_ConstructProps)
    _init (config?: SettingTun_ConstructProps): void
    static new(): SettingTun
    static $gtype: GObject.Type
}
export interface SettingUser_ConstructProps extends Setting_ConstructProps {
    data?: GLib.HashTable
}
export class SettingUser {
    /* Properties of NM.SettingUser */
    data: GLib.HashTable
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingUser */
    getData(key: string): string
    getKeys(): string[]
    setData(key: string, val?: string | null): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingUser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingUser, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: SettingUser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: SettingUser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingUser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingUser, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingUser_ConstructProps)
    _init (config?: SettingUser_ConstructProps): void
    static new(): SettingUser
    static checkKey(key: string): boolean
    static checkVal(val: string): boolean
    static $gtype: GObject.Type
}
export interface SettingVeth_ConstructProps extends Setting_ConstructProps {
    peer?: string
}
export class SettingVeth {
    /* Properties of NM.SettingVeth */
    peer: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingVeth */
    getPeer(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingVeth, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::peer", callback: (($obj: SettingVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::peer", callback: (($obj: SettingVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::peer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::peer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::peer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingVeth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingVeth, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingVeth_ConstructProps)
    _init (config?: SettingVeth_ConstructProps): void
    static new(): SettingVeth
    static $gtype: GObject.Type
}
export interface SettingVlan_ConstructProps extends Setting_ConstructProps {
    egressPriorityMap?: string[]
    flags?: VlanFlags
    id?: number
    ingressPriorityMap?: string[]
    parent?: string
}
export class SettingVlan {
    /* Properties of NM.SettingVlan */
    egressPriorityMap: string[]
    flags: VlanFlags
    id: number
    ingressPriorityMap: string[]
    parent: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingVlan */
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingVlan */
    addPriority(map: VlanPriorityMap, from: number, to: number): boolean
    addPriorityStr(map: VlanPriorityMap, str: string): boolean
    clearPriorities(map: VlanPriorityMap): void
    getFlags(): number
    getId(): number
    getNumPriorities(map: VlanPriorityMap): number
    getParent(): string
    getPriority(map: VlanPriorityMap, idx: number): [ /* returnType */ boolean, /* outFrom */ number | null, /* outTo */ number | null ]
    removePriority(map: VlanPriorityMap, idx: number): void
    removePriorityByValue(map: VlanPriorityMap, from: number, to: number): boolean
    removePriorityStrByValue(map: VlanPriorityMap, str: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::egress-priority-map", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::egress-priority-map", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::egress-priority-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::egress-priority-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::egress-priority-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::flags", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ingress-priority-map", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ingress-priority-map", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ingress-priority-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ingress-priority-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ingress-priority-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingVlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingVlan_ConstructProps)
    _init (config?: SettingVlan_ConstructProps): void
    static new(): SettingVlan
    static $gtype: GObject.Type
}
export interface SettingVpn_ConstructProps extends Setting_ConstructProps {
    data?: GLib.HashTable
    persistent?: boolean
    secrets?: GLib.HashTable
    serviceType?: string
    timeout?: number
    userName?: string
}
export class SettingVpn {
    /* Properties of NM.SettingVpn */
    data: GLib.HashTable
    persistent: boolean
    secrets: GLib.HashTable
    serviceType: string
    timeout: number
    userName: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingVpn */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingVpn */
    addDataItem(key: string, item?: string | null): void
    addSecret(key: string, secret?: string | null): void
    foreachDataItem(func: VpnIterFunc): void
    foreachSecret(func: VpnIterFunc): void
    getDataItem(key: string): string
    getDataKeys(): string[]
    getNumDataItems(): number
    getNumSecrets(): number
    getPersistent(): boolean
    getSecret(key: string): string
    getSecretKeys(): string[]
    getServiceType(): string
    getTimeout(): number
    getUserName(): string
    removeDataItem(key: string): boolean
    removeSecret(key: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::persistent", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::persistent", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::persistent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::persistent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::persistent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::secrets", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secrets", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::secrets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::secrets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::secrets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::service-type", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::service-type", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::service-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::service-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::service-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::timeout", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::timeout", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::user-name", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-name", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::user-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::user-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::user-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingVpn, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingVpn_ConstructProps)
    _init (config?: SettingVpn_ConstructProps): void
    static new(): SettingVpn
    static $gtype: GObject.Type
}
export interface SettingVrf_ConstructProps extends Setting_ConstructProps {
    table?: number
}
export class SettingVrf {
    /* Properties of NM.SettingVrf */
    table: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingVrf */
    getTable(): number
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingVrf, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::table", callback: (($obj: SettingVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::table", callback: (($obj: SettingVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingVrf, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingVrf, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingVrf_ConstructProps)
    _init (config?: SettingVrf_ConstructProps): void
    static new(): SettingVrf
    static $gtype: GObject.Type
}
export interface SettingVxlan_ConstructProps extends Setting_ConstructProps {
    ageing?: number
    destinationPort?: number
    id?: number
    l2Miss?: boolean
    l3Miss?: boolean
    learning?: boolean
    limit?: number
    local?: string
    parent?: string
    proxy?: boolean
    remote?: string
    rsc?: boolean
    sourcePortMax?: number
    sourcePortMin?: number
    tos?: number
    ttl?: number
}
export class SettingVxlan {
    /* Properties of NM.SettingVxlan */
    ageing: number
    destinationPort: number
    id: number
    l2Miss: boolean
    l3Miss: boolean
    learning: boolean
    limit: number
    local: string
    parent: string
    proxy: boolean
    remote: string
    rsc: boolean
    sourcePortMax: number
    sourcePortMin: number
    tos: number
    ttl: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingVxlan */
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingVxlan */
    getAgeing(): number
    getDestinationPort(): number
    getId(): number
    getL2Miss(): boolean
    getL3Miss(): boolean
    getLearning(): boolean
    getLimit(): number
    getLocal(): string
    getParent(): string
    getProxy(): boolean
    getRemote(): string
    getRsc(): boolean
    getSourcePortMax(): number
    getSourcePortMin(): number
    getTos(): number
    getTtl(): number
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ageing", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ageing", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ageing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ageing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ageing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::destination-port", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::destination-port", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::destination-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::destination-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::destination-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::l2-miss", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::l2-miss", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::l2-miss", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::l2-miss", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::l2-miss", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::l3-miss", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::l3-miss", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::l3-miss", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::l3-miss", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::l3-miss", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::learning", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::learning", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::learning", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::learning", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::learning", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::limit", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::limit", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::limit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::limit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::limit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::proxy", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::proxy", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::proxy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::proxy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::proxy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::remote", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::remote", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::remote", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::remote", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::remote", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rsc", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rsc", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rsc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rsc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rsc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::source-port-max", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::source-port-max", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::source-port-max", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::source-port-max", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::source-port-max", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::source-port-min", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::source-port-min", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::source-port-min", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::source-port-min", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::source-port-min", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tos", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tos", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tos", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tos", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tos", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ttl", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ttl", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ttl", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ttl", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ttl", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingVxlan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingVxlan_ConstructProps)
    _init (config?: SettingVxlan_ConstructProps): void
    static new(): SettingVxlan
    static $gtype: GObject.Type
}
export interface SettingWifiP2P_ConstructProps extends Setting_ConstructProps {
    peer?: string
    wfdIes?: any
    wpsMethod?: number
}
export class SettingWifiP2P {
    /* Properties of NM.SettingWifiP2P */
    peer: string
    wfdIes: any
    wpsMethod: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingWifiP2P */
    getPeer(): string
    getWfdIes(): any
    getWpsMethod(): SettingWirelessSecurityWpsMethod
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::peer", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::peer", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::peer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::peer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::peer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wfd-ies", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wfd-ies", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wfd-ies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wfd-ies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wfd-ies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wps-method", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wps-method", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wps-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wps-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wps-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingWifiP2P, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingWifiP2P_ConstructProps)
    _init (config?: SettingWifiP2P_ConstructProps): void
    static new(): SettingWifiP2P
    static $gtype: GObject.Type
}
export interface SettingWimax_ConstructProps extends Setting_ConstructProps {
    macAddress?: string
    networkName?: string
}
export class SettingWimax {
    /* Properties of NM.SettingWimax */
    macAddress: string
    networkName: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingWimax */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingWimax */
    getMacAddress(): string
    getNetworkName(): string
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mac-address", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::network-name", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-name", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::network-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::network-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::network-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingWimax, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingWimax_ConstructProps)
    _init (config?: SettingWimax_ConstructProps): void
    static new(): SettingWimax
    static $gtype: GObject.Type
}
export interface SettingWireGuard_ConstructProps extends Setting_ConstructProps {
    fwmark?: number
    ip4AutoDefaultRoute?: Ternary
    ip6AutoDefaultRoute?: Ternary
    listenPort?: number
    mtu?: number
    peerRoutes?: boolean
    privateKey?: string
    privateKeyFlags?: SettingSecretFlags
}
export class SettingWireGuard {
    /* Properties of NM.SettingWireGuard */
    fwmark: number
    ip4AutoDefaultRoute: Ternary
    ip6AutoDefaultRoute: Ternary
    listenPort: number
    mtu: number
    peerRoutes: boolean
    privateKey: string
    privateKeyFlags: SettingSecretFlags
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingWireGuard */
    appendPeer(peer: WireGuardPeer): void
    clearPeers(): number
    getFwmark(): number
    getIp4AutoDefaultRoute(): Ternary
    getIp6AutoDefaultRoute(): Ternary
    getListenPort(): number
    getMtu(): number
    getPeer(idx: number): WireGuardPeer
    getPeerByPublicKey(publicKey: string): [ /* returnType */ WireGuardPeer, /* outIdx */ number | null ]
    getPeerRoutes(): boolean
    getPeersLen(): number
    getPrivateKey(): string
    getPrivateKeyFlags(): SettingSecretFlags
    removePeer(idx: number): boolean
    setPeer(peer: WireGuardPeer, idx: number): void
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fwmark", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fwmark", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fwmark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fwmark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fwmark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-auto-default-route", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-auto-default-route", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-auto-default-route", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-auto-default-route", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-auto-default-route", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-auto-default-route", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-auto-default-route", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-auto-default-route", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-auto-default-route", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-auto-default-route", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::listen-port", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::listen-port", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::listen-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::listen-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::listen-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::peer-routes", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::peer-routes", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::peer-routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::peer-routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::peer-routes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::private-key", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::private-key", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::private-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::private-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::private-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::private-key-flags", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::private-key-flags", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::private-key-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::private-key-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::private-key-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingWireGuard, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingWireGuard_ConstructProps)
    _init (config?: SettingWireGuard_ConstructProps): void
    static new(): SettingWireGuard
    static $gtype: GObject.Type
}
export interface SettingWired_ConstructProps extends Setting_ConstructProps {
    autoNegotiate?: boolean
    clonedMacAddress?: string
    duplex?: string
    generateMacAddressMask?: string
    macAddress?: string
    macAddressBlacklist?: string[]
    mtu?: number
    port?: string
    s390Nettype?: string
    s390Options?: GLib.HashTable
    s390Subchannels?: string[]
    speed?: number
    wakeOnLan?: number
    wakeOnLanPassword?: string
}
export class SettingWired {
    /* Properties of NM.SettingWired */
    autoNegotiate: boolean
    clonedMacAddress: string
    duplex: string
    generateMacAddressMask: string
    macAddress: string
    macAddressBlacklist: string[]
    mtu: number
    port: string
    s390Nettype: string
    s390Options: GLib.HashTable
    s390Subchannels: string[]
    speed: number
    wakeOnLan: number
    wakeOnLanPassword: string
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingWired */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingWired */
    addMacBlacklistItem(mac: string): boolean
    addS390Option(key: string, value: string): boolean
    clearMacBlacklistItems(): void
    getAutoNegotiate(): boolean
    getClonedMacAddress(): string
    getDuplex(): string
    getGenerateMacAddressMask(): string
    getMacAddress(): string
    getMacAddressBlacklist(): string[]
    getMacBlacklistItem(idx: number): string
    getMtu(): number
    getNumMacBlacklistItems(): number
    getNumS390Options(): number
    getPort(): string
    getS390Nettype(): string
    getS390Option(idx: number): [ /* returnType */ boolean, /* outKey */ string, /* outValue */ string ]
    getS390OptionByKey(key: string): string
    getS390Subchannels(): string[]
    getSpeed(): number
    getValidS390Options(): string[]
    getWakeOnLan(): SettingWiredWakeOnLan
    getWakeOnLanPassword(): string
    removeMacBlacklistItem(idx: number): void
    removeMacBlacklistItemByValue(mac: string): boolean
    removeS390Option(key: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::auto-negotiate", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-negotiate", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::auto-negotiate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::auto-negotiate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::auto-negotiate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cloned-mac-address", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cloned-mac-address", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cloned-mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cloned-mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cloned-mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::duplex", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::duplex", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::duplex", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::duplex", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::duplex", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::generate-mac-address-mask", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::generate-mac-address-mask", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::generate-mac-address-mask", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::generate-mac-address-mask", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::generate-mac-address-mask", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mac-address", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mac-address-blacklist", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address-blacklist", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mac-address-blacklist", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mac-address-blacklist", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mac-address-blacklist", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::port", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::port", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::s390-nettype", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::s390-nettype", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::s390-nettype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::s390-nettype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::s390-nettype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::s390-options", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::s390-options", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::s390-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::s390-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::s390-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::s390-subchannels", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::s390-subchannels", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::s390-subchannels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::s390-subchannels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::s390-subchannels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::speed", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::speed", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::speed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::speed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::speed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wake-on-lan", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wake-on-lan", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wake-on-lan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wake-on-lan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wake-on-lan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wake-on-lan-password", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wake-on-lan-password", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wake-on-lan-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wake-on-lan-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wake-on-lan-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingWired, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingWired_ConstructProps)
    _init (config?: SettingWired_ConstructProps): void
    static new(): SettingWired
    static $gtype: GObject.Type
}
export interface SettingWireless_ConstructProps extends Setting_ConstructProps {
    apIsolation?: Ternary
    band?: string
    bssid?: string
    channel?: number
    clonedMacAddress?: string
    generateMacAddressMask?: string
    hidden?: boolean
    macAddress?: string
    macAddressBlacklist?: string[]
    macAddressRandomization?: number
    mode?: string
    mtu?: number
    powersave?: number
    rate?: number
    seenBssids?: string[]
    ssid?: any
    txPower?: number
    wakeOnWlan?: number
}
export class SettingWireless {
    /* Properties of NM.SettingWireless */
    apIsolation: Ternary
    band: string
    bssid: string
    channel: number
    clonedMacAddress: string
    generateMacAddressMask: string
    hidden: boolean
    macAddress: string
    macAddressBlacklist: string[]
    macAddressRandomization: number
    mode: string
    mtu: number
    powersave: number
    rate: number
    seenBssids: string[]
    ssid: any
    txPower: number
    wakeOnWlan: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingWireless */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingWireless */
    addMacBlacklistItem(mac: string): boolean
    addSeenBssid(bssid: string): boolean
    apSecurityCompatible(sWirelessSec: SettingWirelessSecurity, apFlags: TODO_80211ApFlags, apWpa: TODO_80211ApSecurityFlags, apRsn: TODO_80211ApSecurityFlags, apMode: TODO_80211Mode): boolean
    clearMacBlacklistItems(): void
    getApIsolation(): Ternary
    getBand(): string
    getBssid(): string
    getChannel(): number
    getClonedMacAddress(): string
    getGenerateMacAddressMask(): string
    getHidden(): boolean
    getMacAddress(): string
    getMacAddressBlacklist(): string[]
    getMacAddressRandomization(): SettingMacRandomization
    getMacBlacklistItem(idx: number): string
    getMode(): string
    getMtu(): number
    getNumMacBlacklistItems(): number
    getNumSeenBssids(): number
    getPowersave(): number
    getRate(): number
    getSeenBssid(i: number): string
    getSsid(): any
    getTxPower(): number
    getWakeOnWlan(): SettingWirelessWakeOnWLan
    removeMacBlacklistItem(idx: number): void
    removeMacBlacklistItemByValue(mac: string): boolean
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ap-isolation", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ap-isolation", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ap-isolation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ap-isolation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ap-isolation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::band", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::band", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::band", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::band", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::band", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bssid", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bssid", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bssid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bssid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bssid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::channel", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::channel", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::channel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::channel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::channel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cloned-mac-address", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cloned-mac-address", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cloned-mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cloned-mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cloned-mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::generate-mac-address-mask", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::generate-mac-address-mask", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::generate-mac-address-mask", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::generate-mac-address-mask", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::generate-mac-address-mask", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mac-address", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mac-address-blacklist", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address-blacklist", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mac-address-blacklist", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mac-address-blacklist", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mac-address-blacklist", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mac-address-randomization", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address-randomization", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mac-address-randomization", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mac-address-randomization", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mac-address-randomization", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mode", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mtu", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtu", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::powersave", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::powersave", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::powersave", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::powersave", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::powersave", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rate", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rate", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::seen-bssids", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::seen-bssids", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::seen-bssids", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::seen-bssids", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::seen-bssids", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ssid", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ssid", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ssid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ssid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ssid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tx-power", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tx-power", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tx-power", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tx-power", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tx-power", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wake-on-wlan", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wake-on-wlan", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wake-on-wlan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wake-on-wlan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wake-on-wlan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingWireless, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingWireless_ConstructProps)
    _init (config?: SettingWireless_ConstructProps): void
    static new(): SettingWireless
    static $gtype: GObject.Type
}
export interface SettingWirelessSecurity_ConstructProps extends Setting_ConstructProps {
    authAlg?: string
    fils?: number
    group?: string[]
    keyMgmt?: string
    leapPassword?: string
    leapPasswordFlags?: SettingSecretFlags
    leapUsername?: string
    pairwise?: string[]
    pmf?: number
    proto?: string[]
    psk?: string
    pskFlags?: SettingSecretFlags
    wepKeyFlags?: SettingSecretFlags
    wepKeyType?: WepKeyType
    wepKey0?: string
    wepKey1?: string
    wepKey2?: string
    wepKey3?: string
    wepTxKeyidx?: number
    wpsMethod?: number
}
export class SettingWirelessSecurity {
    /* Properties of NM.SettingWirelessSecurity */
    authAlg: string
    fils: number
    group: string[]
    keyMgmt: string
    leapPassword: string
    leapPasswordFlags: SettingSecretFlags
    leapUsername: string
    pairwise: string[]
    pmf: number
    proto: string[]
    psk: string
    pskFlags: SettingSecretFlags
    wepKeyFlags: SettingSecretFlags
    wepKeyType: WepKeyType
    wepKey0: string
    wepKey1: string
    wepKey2: string
    wepKey3: string
    wepTxKeyidx: number
    wpsMethod: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.SettingWirelessSecurity */
    parent: Setting
    /* Fields of NM.Setting */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingWirelessSecurity */
    addGroup(group: string): boolean
    addPairwise(pairwise: string): boolean
    addProto(proto: string): boolean
    clearGroups(): void
    clearPairwise(): void
    clearProtos(): void
    getAuthAlg(): string
    getFils(): SettingWirelessSecurityFils
    getGroup(i: number): string
    getKeyMgmt(): string
    getLeapPassword(): string
    getLeapPasswordFlags(): SettingSecretFlags
    getLeapUsername(): string
    getNumGroups(): number
    getNumPairwise(): number
    getNumProtos(): number
    getPairwise(i: number): string
    getPmf(): SettingWirelessSecurityPmf
    getProto(i: number): string
    getPsk(): string
    getPskFlags(): SettingSecretFlags
    getWepKey(idx: number): string
    getWepKeyFlags(): SettingSecretFlags
    getWepKeyType(): WepKeyType
    getWepTxKeyidx(): number
    getWpsMethod(): SettingWirelessSecurityWpsMethod
    removeGroup(i: number): void
    removeGroupByValue(group: string): boolean
    removePairwise(i: number): void
    removePairwiseByValue(pairwise: string): boolean
    removeProto(i: number): void
    removeProtoByValue(proto: string): boolean
    setWepKey(idx: number, key: string): void
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::auth-alg", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auth-alg", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::auth-alg", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::auth-alg", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::auth-alg", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fils", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fils", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fils", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fils", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fils", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::group", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::key-mgmt", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-mgmt", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key-mgmt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key-mgmt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key-mgmt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::leap-password", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::leap-password", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::leap-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::leap-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::leap-password", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::leap-password-flags", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::leap-password-flags", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::leap-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::leap-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::leap-password-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::leap-username", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::leap-username", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::leap-username", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::leap-username", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::leap-username", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pairwise", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pairwise", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pairwise", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pairwise", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pairwise", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pmf", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pmf", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pmf", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pmf", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pmf", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::proto", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::proto", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::proto", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::proto", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::proto", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::psk", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::psk", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::psk", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::psk", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::psk", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::psk-flags", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::psk-flags", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::psk-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::psk-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::psk-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wep-key-flags", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wep-key-flags", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wep-key-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wep-key-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wep-key-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wep-key-type", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wep-key-type", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wep-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wep-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wep-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wep-key0", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wep-key0", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wep-key0", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wep-key0", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wep-key0", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wep-key1", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wep-key1", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wep-key1", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wep-key1", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wep-key1", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wep-key2", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wep-key2", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wep-key2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wep-key2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wep-key2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wep-key3", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wep-key3", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wep-key3", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wep-key3", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wep-key3", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wep-tx-keyidx", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wep-tx-keyidx", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wep-tx-keyidx", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wep-tx-keyidx", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wep-tx-keyidx", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wps-method", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wps-method", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wps-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wps-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wps-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingWirelessSecurity, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingWirelessSecurity_ConstructProps)
    _init (config?: SettingWirelessSecurity_ConstructProps): void
    static new(): SettingWirelessSecurity
    static $gtype: GObject.Type
}
export interface SettingWpan_ConstructProps extends Setting_ConstructProps {
    channel?: number
    macAddress?: string
    page?: number
    panId?: number
    shortAddress?: number
}
export class SettingWpan {
    /* Properties of NM.SettingWpan */
    channel: number
    macAddress: string
    page: number
    panId: number
    shortAddress: number
    /* Properties of NM.Setting */
    readonly name: string
    /* Fields of NM.Setting */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.SettingWpan */
    getChannel(): number
    getMacAddress(): string
    getPage(): number
    getPanId(): number
    getShortAddress(): number
    /* Methods of NM.Setting */
    compare(b: Setting, flags: SettingCompareFlags): boolean
    diff(b: Setting, flags: SettingCompareFlags, invertResults: boolean, results: GLib.HashTable): boolean
    duplicate(): Setting
    enumerateValues(func: SettingValueIterFn): void
    getDbusPropertyType(propertyName: string): GLib.VariantType
    getName(): string
    getSecretFlags(secretName: string, outFlags: SettingSecretFlags): boolean
    optionClearByName(predicate?: UtilsPredicateStr | null): void
    optionGet(optName: string): GLib.Variant
    optionGetAllNames(): string[]
    optionGetBoolean(optName: string): [ /* returnType */ boolean, /* outValue */ boolean | null ]
    optionGetUint32(optName: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    optionSet(optName: string, variant?: GLib.Variant | null): void
    optionSetBoolean(optName: string, value: boolean): void
    optionSetUint32(optName: string, value: number): void
    setSecretFlags(secretName: string, flags: SettingSecretFlags): boolean
    verify(connection?: Connection | null): boolean
    verifySecrets(connection?: Connection | null): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of NM.Setting */
    vfuncAggregate?(typeI: number, arg?: object | null): boolean
    vfuncGetSecretFlags?(secretName: string, outFlags: SettingSecretFlags): boolean
    vfuncInitFromDbus?(keys: GLib.HashTable, settingDict: GLib.Variant, connectionDict: GLib.Variant, parseFlags: number): boolean
    vfuncSetSecretFlags?(secretName: string, flags: SettingSecretFlags): boolean
    vfuncUpdateOneSecret?(key: string, value: GLib.Variant): number
    vfuncVerify?(connection: Connection): number
    vfuncVerifySecrets?(connection?: Connection | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::channel", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::channel", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::channel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::channel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::channel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mac-address", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mac-address", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mac-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pan-id", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pan-id", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pan-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pan-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pan-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::short-address", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::short-address", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::short-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::short-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::short-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SettingWpan, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SettingWpan_ConstructProps)
    _init (config?: SettingWpan_ConstructProps): void
    static new(): SettingWpan
    static $gtype: GObject.Type
}
export interface SimpleConnection_ConstructProps extends GObject.Object_ConstructProps {
}
export class SimpleConnection {
    /* Fields of NM.SimpleConnection */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of NM.Connection */
    addSetting(setting: Setting): void
    clearSecrets(): void
    clearSecretsWithFlags(func?: SettingClearSecretsWithFlagsFn | null): void
    clearSettings(): void
    compare(b: Connection, flags: SettingCompareFlags): boolean
    diff(b: Connection, flags: SettingCompareFlags, outSettings: GLib.HashTable): boolean
    dump(): void
    forEachSettingValue(func: SettingValueIterFn): void
    getConnectionType(): string
    getId(): string
    getInterfaceName(): string
    getPath(): string
    getSetting(settingType: GObject.Type): Setting
    getSetting8021x(): Setting8021x
    getSettingAdsl(): SettingAdsl
    getSettingBluetooth(): SettingBluetooth
    getSettingBond(): SettingBond
    getSettingBridge(): SettingBridge
    getSettingBridgePort(): SettingBridgePort
    getSettingByName(name: string): Setting
    getSettingCdma(): SettingCdma
    getSettingConnection(): SettingConnection
    getSettingDcb(): SettingDcb
    getSettingDummy(): SettingDummy
    getSettingGeneric(): SettingGeneric
    getSettingGsm(): SettingGsm
    getSettingInfiniband(): SettingInfiniband
    getSettingIp4Config(): SettingIP4Config
    getSettingIp6Config(): SettingIP6Config
    getSettingIpTunnel(): SettingIPTunnel
    getSettingMacsec(): SettingMacsec
    getSettingMacvlan(): SettingMacvlan
    getSettingOlpcMesh(): SettingOlpcMesh
    getSettingOvsBridge(): SettingOvsBridge
    getSettingOvsInterface(): SettingOvsInterface
    getSettingOvsPatch(): SettingOvsPatch
    getSettingOvsPort(): SettingOvsPort
    getSettingPpp(): SettingPpp
    getSettingPppoe(): SettingPppoe
    getSettingProxy(): SettingProxy
    getSettingSerial(): SettingSerial
    getSettingTcConfig(): SettingTCConfig
    getSettingTeam(): SettingTeam
    getSettingTeamPort(): SettingTeamPort
    getSettingTun(): SettingTun
    getSettingVlan(): SettingVlan
    getSettingVpn(): SettingVpn
    getSettingVxlan(): SettingVxlan
    getSettingWimax(): SettingWimax
    getSettingWired(): SettingWired
    getSettingWireless(): SettingWireless
    getSettingWirelessSecurity(): SettingWirelessSecurity
    getSettings(): Setting[]
    getUuid(): string
    getVirtualDeviceDescription(): string
    isType(type: string): boolean
    isVirtual(): boolean
    needSecrets(): [ /* returnType */ string, /* hints */ string[] | null ]
    normalize(parameters?: GLib.HashTable | null): [ /* returnType */ boolean, /* modified */ boolean | null ]
    removeSetting(settingType: GObject.Type): void
    replaceSettings(newSettings: GLib.Variant): boolean
    replaceSettingsFromConnection(newConnection: Connection): void
    setPath(path: string): void
    toDbus(flags: ConnectionSerializationFlags): GLib.Variant
    updateSecrets(settingName: string, secrets: GLib.Variant): boolean
    verify(): boolean
    verifySecrets(): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SimpleConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SimpleConnection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of NM.Connection */
    connect(sigName: "changed", callback: (($obj: SimpleConnection) => void)): number
    connect_after(sigName: "changed", callback: (($obj: SimpleConnection) => void)): number
    emit(sigName: "changed"): void
    on(sigName: "changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "secrets-cleared", callback: (($obj: SimpleConnection) => void)): number
    connect_after(sigName: "secrets-cleared", callback: (($obj: SimpleConnection) => void)): number
    emit(sigName: "secrets-cleared"): void
    on(sigName: "secrets-cleared", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "secrets-cleared", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "secrets-cleared", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "secrets-updated", callback: (($obj: SimpleConnection, settingName: string) => void)): number
    connect_after(sigName: "secrets-updated", callback: (($obj: SimpleConnection, settingName: string) => void)): number
    emit(sigName: "secrets-updated", settingName: string): void
    on(sigName: "secrets-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "secrets-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "secrets-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SimpleConnection_ConstructProps)
    _init (config?: SimpleConnection_ConstructProps): void
    static newClone(connection: Connection): Connection
    static newFromDbus(dict: GLib.Variant): Connection
    static $gtype: GObject.Type
}
export interface VpnConnection_ConstructProps extends ActiveConnection_ConstructProps {
}
export class VpnConnection {
    /* Properties of NM.VpnConnection */
    readonly banner: string
    readonly vpnState: VpnConnectionState
    /* Properties of NM.ActiveConnection */
    readonly connection: RemoteConnection
    readonly "default": boolean
    readonly default6: boolean
    readonly devices: Device[]
    readonly dhcp4Config: DhcpConfig
    readonly dhcp6Config: DhcpConfig
    readonly id: string
    readonly ip4Config: IPConfig
    readonly ip6Config: IPConfig
    readonly master: Device
    readonly specificObjectPath: string
    readonly state: ActiveConnectionState
    readonly stateFlags: number
    readonly type: string
    readonly uuid: string
    readonly vpn: boolean
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.VpnConnection */
    getBanner(): string
    getVpnState(): VpnConnectionState
    /* Methods of NM.ActiveConnection */
    getConnection(): RemoteConnection
    getConnectionType(): string
    getDefault(): boolean
    getDefault6(): boolean
    getDevices(): Device[]
    getDhcp4Config(): DhcpConfig
    getDhcp6Config(): DhcpConfig
    getId(): string
    getIp4Config(): IPConfig
    getIp6Config(): IPConfig
    getMaster(): Device
    getSpecificObjectPath(): string
    getState(): ActiveConnectionState
    getStateFlags(): ActivationStateFlags
    getStateReason(): ActiveConnectionStateReason
    getUuid(): string
    getVpn(): boolean
    /* Methods of NM.Object */
    getClient(): Client
    getPath(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.VpnConnection */
    connect(sigName: "vpn-state-changed", callback: (($obj: VpnConnection, object: number, p0: number) => void)): number
    connect_after(sigName: "vpn-state-changed", callback: (($obj: VpnConnection, object: number, p0: number) => void)): number
    emit(sigName: "vpn-state-changed", object: number, p0: number): void
    on(sigName: "vpn-state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "vpn-state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "vpn-state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of NM.ActiveConnection */
    connect(sigName: "state-changed", callback: (($obj: VpnConnection, state: number, reason: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: VpnConnection, state: number, reason: number) => void)): number
    emit(sigName: "state-changed", state: number, reason: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::banner", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::banner", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::banner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::banner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::banner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vpn-state", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vpn-state", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vpn-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vpn-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vpn-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connection", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default6", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default6", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default6", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default6", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default6", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::devices", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::devices", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp4-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp4-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dhcp6-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dhcp6-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dhcp6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::master", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::master", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::master", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::master", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::master", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::specific-object-path", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::specific-object-path", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::specific-object-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::specific-object-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::specific-object-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-flags", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-flags", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uuid", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vpn", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vpn", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vpn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vpn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vpn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: VpnConnection, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: VpnConnection_ConstructProps)
    _init (config?: VpnConnection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface VpnPluginInfo_ConstructProps extends GObject.Object_ConstructProps {
    filename?: string
    keyfile?: GLib.KeyFile
}
export class VpnPluginInfo {
    /* Properties of NM.VpnPluginInfo */
    readonly name: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.VpnPluginInfo */
    getAliases(): string[]
    getAuthDialog(): string
    getEditorPlugin(): VpnEditorPlugin
    getFilename(): string
    getName(): string
    getPlugin(): string
    getProgram(): string
    getService(): string
    loadEditorPlugin(): VpnEditorPlugin
    lookupProperty(group: string, key: string): string
    setEditorPlugin(plugin?: VpnEditorPlugin | null): void
    supportsHints(): boolean
    supportsMultiple(): boolean
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: VpnPluginInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VpnPluginInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: VpnPluginInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: VpnPluginInfo, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: VpnPluginInfo_ConstructProps)
    _init (config?: VpnPluginInfo_ConstructProps): void
    static newFromFile(filename: string): VpnPluginInfo
    static newSearchFile(name?: string | null, service?: string | null): VpnPluginInfo
    static newWithData(filename: string, keyfile: GLib.KeyFile): VpnPluginInfo
    static listAdd(list: VpnPluginInfo[], pluginInfo: VpnPluginInfo): boolean
    static listFindByFilename(list: VpnPluginInfo[], filename: string): VpnPluginInfo
    static listFindByName(list: VpnPluginInfo[], name: string): VpnPluginInfo
    static listFindByService(list: VpnPluginInfo[], service: string): VpnPluginInfo
    static listFindServiceType(list: VpnPluginInfo[], name: string): string
    static listGetServiceTypes(list: VpnPluginInfo[], onlyExisting: boolean, withAbbreviations: boolean): string[]
    static listLoad(): VpnPluginInfo[]
    static listRemove(list: VpnPluginInfo[], pluginInfo: VpnPluginInfo): boolean
    static validateFilename(filename: string): boolean
    static $gtype: GObject.Type
}
export interface VpnPluginOld_ConstructProps extends GObject.Object_ConstructProps {
    serviceName?: string
    state?: VpnServiceState
}
export class VpnPluginOld {
    /* Properties of NM.VpnPluginOld */
    state: VpnServiceState
    /* Fields of NM.VpnPluginOld */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.VpnPluginOld */
    disconnect(): boolean
    failure(reason: VpnPluginFailure): void
    getConnection(): Gio.DBusConnection
    getState(): VpnServiceState
    secretsRequired(message: string, hints: string): void
    setConfig(config: GLib.Variant): void
    setIp4Config(ip4Config: GLib.Variant): void
    setIp6Config(ip6Config: GLib.Variant): void
    setLoginBanner(banner: string): void
    setState(state: VpnServiceState): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of NM.VpnPluginOld */
    vfuncConfig?(config: GLib.Variant): void
    vfuncConnect?(connection: Connection): boolean
    vfuncConnectInteractive?(connection: Connection, details: GLib.Variant): boolean
    vfuncDisconnect?(): boolean
    vfuncFailure?(reason: VpnPluginFailure): void
    vfuncIp4Config?(ip4Config: GLib.Variant): void
    vfuncIp6Config?(config: GLib.Variant): void
    vfuncLoginBanner?(banner: string): void
    vfuncNeedSecrets?(connection: Connection, settingName: string): boolean
    vfuncNewSecrets?(connection: Connection): boolean
    vfuncQuit?(): void
    vfuncStateChanged?(state: VpnServiceState): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.VpnPluginOld */
    connect(sigName: "config", callback: (($obj: VpnPluginOld, object: GLib.Variant) => void)): number
    connect_after(sigName: "config", callback: (($obj: VpnPluginOld, object: GLib.Variant) => void)): number
    emit(sigName: "config", object: GLib.Variant): void
    on(sigName: "config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "failure", callback: (($obj: VpnPluginOld, object: number) => void)): number
    connect_after(sigName: "failure", callback: (($obj: VpnPluginOld, object: number) => void)): number
    emit(sigName: "failure", object: number): void
    on(sigName: "failure", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "failure", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "failure", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "ip4-config", callback: (($obj: VpnPluginOld, object: GLib.Variant) => void)): number
    connect_after(sigName: "ip4-config", callback: (($obj: VpnPluginOld, object: GLib.Variant) => void)): number
    emit(sigName: "ip4-config", object: GLib.Variant): void
    on(sigName: "ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "ip6-config", callback: (($obj: VpnPluginOld, object: GLib.Variant) => void)): number
    connect_after(sigName: "ip6-config", callback: (($obj: VpnPluginOld, object: GLib.Variant) => void)): number
    emit(sigName: "ip6-config", object: GLib.Variant): void
    on(sigName: "ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "login-banner", callback: (($obj: VpnPluginOld, object: string) => void)): number
    connect_after(sigName: "login-banner", callback: (($obj: VpnPluginOld, object: string) => void)): number
    emit(sigName: "login-banner", object: string): void
    on(sigName: "login-banner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "login-banner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "login-banner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "quit", callback: (($obj: VpnPluginOld) => void)): number
    connect_after(sigName: "quit", callback: (($obj: VpnPluginOld) => void)): number
    emit(sigName: "quit"): void
    on(sigName: "quit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "quit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "quit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "secrets-required", callback: (($obj: VpnPluginOld, object: string, p0: string[]) => void)): number
    connect_after(sigName: "secrets-required", callback: (($obj: VpnPluginOld, object: string, p0: string[]) => void)): number
    emit(sigName: "secrets-required", object: string, p0: string[]): void
    on(sigName: "secrets-required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "secrets-required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "secrets-required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "state-changed", callback: (($obj: VpnPluginOld, object: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: VpnPluginOld, object: number) => void)): number
    emit(sigName: "state-changed", object: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: VpnPluginOld, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VpnPluginOld, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: VpnPluginOld, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: VpnPluginOld, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: VpnPluginOld_ConstructProps)
    _init (config?: VpnPluginOld_ConstructProps): void
    static getSecretFlags(data: GLib.HashTable, secretName: string): [ /* returnType */ boolean, /* outFlags */ SettingSecretFlags ]
    static readVpnDetails(fd: number): [ /* returnType */ boolean, /* outData */ GLib.HashTable, /* outSecrets */ GLib.HashTable ]
    static $gtype: GObject.Type
}
export interface VpnServicePlugin_ConstructProps extends GObject.Object_ConstructProps {
    serviceName?: string
    state?: VpnServiceState
    watchPeer?: boolean
}
export class VpnServicePlugin {
    /* Properties of NM.VpnServicePlugin */
    state: VpnServiceState
    /* Fields of NM.VpnServicePlugin */
    parent: GObject.Object
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.VpnServicePlugin */
    disconnect(): boolean
    failure(reason: VpnPluginFailure): void
    getConnection(): Gio.DBusConnection
    secretsRequired(message: string, hints: string): void
    setConfig(config: GLib.Variant): void
    setIp4Config(ip4Config: GLib.Variant): void
    setIp6Config(ip6Config: GLib.Variant): void
    setLoginBanner(banner: string): void
    shutdown(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of NM.VpnServicePlugin */
    vfuncConfig?(config: GLib.Variant): void
    vfuncConnect?(connection: Connection): boolean
    vfuncConnectInteractive?(connection: Connection, details: GLib.Variant): boolean
    vfuncDisconnect?(): boolean
    vfuncFailure?(reason: VpnPluginFailure): void
    vfuncIp4Config?(ip4Config: GLib.Variant): void
    vfuncIp6Config?(config: GLib.Variant): void
    vfuncLoginBanner?(banner: string): void
    vfuncNeedSecrets?(connection: Connection, settingName: string): boolean
    vfuncNewSecrets?(connection: Connection): boolean
    vfuncQuit?(): void
    vfuncStateChanged?(state: VpnServiceState): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of NM.VpnServicePlugin */
    connect(sigName: "config", callback: (($obj: VpnServicePlugin, object: GLib.Variant) => void)): number
    connect_after(sigName: "config", callback: (($obj: VpnServicePlugin, object: GLib.Variant) => void)): number
    emit(sigName: "config", object: GLib.Variant): void
    on(sigName: "config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "failure", callback: (($obj: VpnServicePlugin, object: number) => void)): number
    connect_after(sigName: "failure", callback: (($obj: VpnServicePlugin, object: number) => void)): number
    emit(sigName: "failure", object: number): void
    on(sigName: "failure", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "failure", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "failure", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "ip4-config", callback: (($obj: VpnServicePlugin, object: GLib.Variant) => void)): number
    connect_after(sigName: "ip4-config", callback: (($obj: VpnServicePlugin, object: GLib.Variant) => void)): number
    emit(sigName: "ip4-config", object: GLib.Variant): void
    on(sigName: "ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "ip6-config", callback: (($obj: VpnServicePlugin, object: GLib.Variant) => void)): number
    connect_after(sigName: "ip6-config", callback: (($obj: VpnServicePlugin, object: GLib.Variant) => void)): number
    emit(sigName: "ip6-config", object: GLib.Variant): void
    on(sigName: "ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "login-banner", callback: (($obj: VpnServicePlugin, object: string) => void)): number
    connect_after(sigName: "login-banner", callback: (($obj: VpnServicePlugin, object: string) => void)): number
    emit(sigName: "login-banner", object: string): void
    on(sigName: "login-banner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "login-banner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "login-banner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "quit", callback: (($obj: VpnServicePlugin) => void)): number
    connect_after(sigName: "quit", callback: (($obj: VpnServicePlugin) => void)): number
    emit(sigName: "quit"): void
    on(sigName: "quit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "quit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "quit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "secrets-required", callback: (($obj: VpnServicePlugin, object: string, p0: string[]) => void)): number
    connect_after(sigName: "secrets-required", callback: (($obj: VpnServicePlugin, object: string, p0: string[]) => void)): number
    emit(sigName: "secrets-required", object: string, p0: string[]): void
    on(sigName: "secrets-required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "secrets-required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "secrets-required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "state-changed", callback: (($obj: VpnServicePlugin, object: number) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: VpnServicePlugin, object: number) => void)): number
    emit(sigName: "state-changed", object: number): void
    on(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: VpnServicePlugin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VpnServicePlugin, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: VpnServicePlugin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: VpnServicePlugin, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: VpnServicePlugin_ConstructProps)
    _init (config?: VpnServicePlugin_ConstructProps): void
    static getSecretFlags(data: GLib.HashTable, secretName: string): [ /* returnType */ boolean, /* outFlags */ SettingSecretFlags ]
    static readVpnDetails(fd: number): [ /* returnType */ boolean, /* outData */ GLib.HashTable, /* outSecrets */ GLib.HashTable ]
    static $gtype: GObject.Type
}
export interface WifiP2PPeer_ConstructProps extends Object_ConstructProps {
}
export class WifiP2PPeer {
    /* Properties of NM.WifiP2PPeer */
    readonly flags: TODO_80211ApFlags
    readonly hwAddress: string
    readonly lastSeen: number
    readonly manufacturer: string
    readonly model: string
    readonly modelNumber: string
    readonly name: string
    readonly serial: string
    readonly strength: number
    readonly wfdIes: any
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.WifiP2PPeer */
    connectionValid(connection: Connection): boolean
    filterConnections(connections: Connection[]): Connection[]
    getFlags(): TODO_80211ApFlags
    getHwAddress(): string
    getLastSeen(): number
    getManufacturer(): string
    getModel(): string
    getModelNumber(): string
    getName(): string
    getSerial(): string
    getStrength(): number
    getWfdIes(): any
    /* Methods of NM.Object */
    getClient(): Client
    getPath(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::flags", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hw-address", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hw-address", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hw-address", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-seen", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-seen", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-seen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-seen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-seen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manufacturer", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manufacturer", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manufacturer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manufacturer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manufacturer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::model", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::model", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::model-number", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::model-number", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::model-number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::model-number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::model-number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serial", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serial", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serial", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serial", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serial", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::strength", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::strength", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::strength", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::strength", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::strength", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wfd-ies", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wfd-ies", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wfd-ies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wfd-ies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wfd-ies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: WifiP2PPeer, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WifiP2PPeer_ConstructProps)
    _init (config?: WifiP2PPeer_ConstructProps): void
    static $gtype: GObject.Type
}
export interface WimaxNsp_ConstructProps extends Object_ConstructProps {
}
export class WimaxNsp {
    /* Properties of NM.WimaxNsp */
    readonly name: string
    readonly networkType: WimaxNspNetworkType
    readonly signalQuality: number
    /* Properties of NM.Object */
    readonly path: string
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of NM.WimaxNsp */
    connectionValid(connection: Connection): boolean
    filterConnections(connections: Connection[]): Connection[]
    getName(): string
    getNetworkType(): WimaxNspNetworkType
    getSignalQuality(): number
    /* Methods of NM.Object */
    getClient(): Client
    getPath(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::network-type", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-type", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::network-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::network-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::network-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::signal-quality", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::signal-quality", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::signal-quality", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::signal-quality", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::signal-quality", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::path", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: WimaxNsp, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WimaxNsp_ConstructProps)
    _init (config?: WimaxNsp_ConstructProps): void
    static $gtype: GObject.Type
}
export abstract class AccessPointClass {
    static name: string
}
export abstract class ActiveConnectionClass {
    static name: string
}
export class BridgeVlan {
    /* Methods of NM.BridgeVlan */
    cmp(b: BridgeVlan): number
    getVidRange(): [ /* returnType */ boolean, /* vidStart */ number, /* vidEnd */ number ]
    isPvid(): boolean
    isSealed(): boolean
    isUntagged(): boolean
    newClone(): BridgeVlan
    ref(): BridgeVlan
    seal(): void
    setPvid(value: boolean): void
    setUntagged(value: boolean): void
    toStr(): string
    unref(): void
    static name: string
    static new(vidStart: number, vidEnd: number): BridgeVlan
    constructor(vidStart: number, vidEnd: number)
    static new(vidStart: number, vidEnd: number): BridgeVlan
    static fromStr(str: string): BridgeVlan
}
export abstract class CheckpointClass {
    static name: string
}
export abstract class ClientClass {
    static name: string
}
export abstract class ConnectionInterface {
    /* Fields of NM.ConnectionInterface */
    parent: GObject.TypeInterface
    secretsUpdated: any
    secretsCleared: any
    changed: any
    static name: string
}
export abstract class Device6LowpanClass {
    static name: string
}
export abstract class DeviceAdslClass {
    static name: string
}
export abstract class DeviceBondClass {
    static name: string
}
export abstract class DeviceBridgeClass {
    static name: string
}
export abstract class DeviceBtClass {
    static name: string
}
export abstract class DeviceClass {
    static name: string
}
export abstract class DeviceDummyClass {
    static name: string
}
export abstract class DeviceEthernetClass {
    static name: string
}
export abstract class DeviceGenericClass {
    static name: string
}
export abstract class DeviceIPTunnelClass {
    static name: string
}
export abstract class DeviceInfinibandClass {
    static name: string
}
export abstract class DeviceMacsecClass {
    static name: string
}
export abstract class DeviceMacvlanClass {
    static name: string
}
export abstract class DeviceModemClass {
    static name: string
}
export abstract class DeviceOlpcMeshClass {
    static name: string
}
export abstract class DeviceOvsBridgeClass {
    static name: string
}
export abstract class DeviceOvsInterfaceClass {
    static name: string
}
export abstract class DeviceOvsPortClass {
    static name: string
}
export abstract class DevicePppClass {
    static name: string
}
export abstract class DeviceTeamClass {
    static name: string
}
export abstract class DeviceTunClass {
    static name: string
}
export abstract class DeviceVethClass {
    static name: string
}
export abstract class DeviceVlanClass {
    static name: string
}
export abstract class DeviceVrfClass {
    static name: string
}
export abstract class DeviceVxlanClass {
    static name: string
}
export abstract class DeviceWifiClass {
    static name: string
}
export abstract class DeviceWifiP2PClass {
    static name: string
}
export abstract class DeviceWimaxClass {
    static name: string
}
export abstract class DeviceWireGuardClass {
    static name: string
}
export abstract class DeviceWpanClass {
    static name: string
}
export abstract class DhcpConfigClass {
    static name: string
}
export class DnsEntry {
    /* Methods of NM.DnsEntry */
    getDomains(): string[]
    getInterface(): string
    getNameservers(): string[]
    getPriority(): number
    getVpn(): boolean
    unref(): void
    static name: string
}
export class IPAddress {
    /* Methods of NM.IPAddress */
    cmpFull(b: IPAddress, cmpFlags: IPAddressCmpFlags): number
    dup(): IPAddress
    equal(other: IPAddress): boolean
    getAddress(): string
    getAttribute(name: string): GLib.Variant
    getAttributeNames(): string[]
    getFamily(): number
    getPrefix(): number
    ref(): void
    setAddress(addr: string): void
    setAttribute(name: string, value?: GLib.Variant | null): void
    setPrefix(prefix: number): void
    unref(): void
    static name: string
    static new(family: number, addr: string, prefix: number): IPAddress
    constructor(family: number, addr: string, prefix: number)
    static new(family: number, addr: string, prefix: number): IPAddress
    static newBinary(family: number, addr: object | null, prefix: number): IPAddress
}
export abstract class IPConfigClass {
    static name: string
}
export class IPRoute {
    /* Methods of NM.IPRoute */
    dup(): IPRoute
    equal(other: IPRoute): boolean
    equalFull(other: IPRoute, cmpFlags: number): boolean
    getAttribute(name: string): GLib.Variant
    getAttributeNames(): string[]
    getDest(): string
    getFamily(): number
    getMetric(): number
    getNextHop(): string
    getPrefix(): number
    ref(): void
    setAttribute(name: string, value?: GLib.Variant | null): void
    setDest(dest: string): void
    setMetric(metric: number): void
    setNextHop(nextHop?: string | null): void
    setPrefix(prefix: number): void
    unref(): void
    static name: string
    static new(family: number, dest: string, prefix: number, nextHop: string | null, metric: number): IPRoute
    constructor(family: number, dest: string, prefix: number, nextHop: string | null, metric: number)
    static new(family: number, dest: string, prefix: number, nextHop: string | null, metric: number): IPRoute
    static newBinary(family: number, dest: object | null, prefix: number, nextHop: object | null, metric: number): IPRoute
    static attributeValidate(name: string, value: GLib.Variant, family: number): [ /* returnType */ boolean, /* known */ boolean ]
    static getVariantAttributeSpec(): VariantAttributeSpec
}
export class IPRoutingRule {
    /* Methods of NM.IPRoutingRule */
    cmp(other?: IPRoutingRule | null): number
    getAction(): number
    getAddrFamily(): number
    getDestinationPortEnd(): number
    getDestinationPortStart(): number
    getFrom(): string
    getFromLen(): number
    getFwmark(): number
    getFwmask(): number
    getIifname(): string
    getInvert(): boolean
    getIpproto(): number
    getOifname(): string
    getPriority(): number
    getSourcePortEnd(): number
    getSourcePortStart(): number
    getSuppressPrefixlength(): number
    getTable(): number
    getTo(): string
    getToLen(): number
    getTos(): number
    isSealed(): boolean
    newClone(): IPRoutingRule
    ref(): IPRoutingRule
    seal(): void
    setAction(action: number): void
    setDestinationPort(start: number, end: number): void
    setFrom(from: string | null, len: number): void
    setFwmark(fwmark: number, fwmask: number): void
    setIifname(iifname?: string | null): void
    setInvert(invert: boolean): void
    setIpproto(ipproto: number): void
    setOifname(oifname?: string | null): void
    setPriority(priority: number): void
    setSourcePort(start: number, end: number): void
    setSuppressPrefixlength(suppressPrefixlength: number): void
    setTable(table: number): void
    setTo(to: string | null, len: number): void
    setTos(tos: number): void
    unref(): void
    validate(): boolean
    static name: string
    static new(addrFamily: number): IPRoutingRule
    constructor(addrFamily: number)
    static new(addrFamily: number): IPRoutingRule
    static fromString(str: string, toStringFlags: IPRoutingRuleAsStringFlags, extraArgs?: GLib.HashTable | null): IPRoutingRule
}
export class KeyfileHandlerData {
    /* Methods of NM.KeyfileHandlerData */
    failWithError(src: GLib.Error): void
    getContext(): [ /* outKfGroupName */ string | null, /* outKfKeyName */ string | null, /* outCurSetting */ Setting | null, /* outCurPropertyName */ string | null ]
    warnGet(): [ /* outMessage */ string | null, /* outSeverity */ KeyfileWarnSeverity | null ]
    static name: string
}
export class LldpNeighbor {
    /* Methods of NM.LldpNeighbor */
    getAttrNames(): string[]
    getAttrStringValue(name: string): [ /* returnType */ boolean, /* outValue */ string | null ]
    getAttrType(name: string): GLib.VariantType
    getAttrUintValue(name: string): [ /* returnType */ boolean, /* outValue */ number | null ]
    getAttrValue(name: string): GLib.Variant
    ref(): void
    unref(): void
    static name: string
    static new(): LldpNeighbor
    constructor()
    static new(): LldpNeighbor
}
export abstract class ObjectClass {
    static name: string
}
export abstract class RemoteConnectionClass {
    static name: string
}
export abstract class SecretAgentOldClass {
    /* Fields of NM.SecretAgentOldClass */
    parent: GObject.ObjectClass
    getSecrets: any
    cancelGetSecrets: any
    saveSecrets: any
    deleteSecrets: any
    static name: string
}
export abstract class Setting6LowpanClass {
    static name: string
}
export abstract class Setting8021xClass {
    /* Fields of NM.Setting8021xClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingAdslClass {
    /* Fields of NM.SettingAdslClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingBluetoothClass {
    /* Fields of NM.SettingBluetoothClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingBondClass {
    /* Fields of NM.SettingBondClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingBridgeClass {
    static name: string
}
export abstract class SettingBridgePortClass {
    /* Fields of NM.SettingBridgePortClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingCdmaClass {
    /* Fields of NM.SettingCdmaClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingClass {
    /* Fields of NM.SettingClass */
    parent: GObject.ObjectClass
    verify: any
    verifySecrets: any
    updateOneSecret: any
    getSecretFlags: any
    setSecretFlags: any
    compareProperty: any
    duplicateCopyProperties: any
    aggregate: any
    initFromDbus: any
    settingInfo: object
    static name: string
}
export abstract class SettingConnectionClass {
    /* Fields of NM.SettingConnectionClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingDcbClass {
    /* Fields of NM.SettingDcbClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingDummyClass {
    /* Fields of NM.SettingDummyClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingEthtoolClass {
    static name: string
}
export abstract class SettingGenericClass {
    /* Fields of NM.SettingGenericClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingGsmClass {
    /* Fields of NM.SettingGsmClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingHostnameClass {
    static name: string
}
export abstract class SettingIP4ConfigClass {
    /* Fields of NM.SettingIP4ConfigClass */
    parent: SettingIPConfigClass
    static name: string
}
export abstract class SettingIP6ConfigClass {
    /* Fields of NM.SettingIP6ConfigClass */
    parent: SettingIPConfigClass
    static name: string
}
export abstract class SettingIPConfigClass {
    /* Fields of NM.SettingIPConfigClass */
    parent: SettingClass
    padding: object[]
    static name: string
}
export abstract class SettingIPTunnelClass {
    /* Fields of NM.SettingIPTunnelClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingInfinibandClass {
    /* Fields of NM.SettingInfinibandClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingMacsecClass {
    /* Fields of NM.SettingMacsecClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingMacvlanClass {
    /* Fields of NM.SettingMacvlanClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingMatchClass {
    static name: string
}
export abstract class SettingOlpcMeshClass {
    /* Fields of NM.SettingOlpcMeshClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingOvsBridgeClass {
    static name: string
}
export abstract class SettingOvsDpdkClass {
    static name: string
}
export abstract class SettingOvsExternalIDsClass {
    static name: string
}
export abstract class SettingOvsInterfaceClass {
    static name: string
}
export abstract class SettingOvsPatchClass {
    static name: string
}
export abstract class SettingOvsPortClass {
    static name: string
}
export abstract class SettingPppClass {
    /* Fields of NM.SettingPppClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingPppoeClass {
    /* Fields of NM.SettingPppoeClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingProxyClass {
    /* Fields of NM.SettingProxyClass */
    parent: SettingClass
    padding: object[]
    static name: string
}
export abstract class SettingSerialClass {
    /* Fields of NM.SettingSerialClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingSriovClass {
    static name: string
}
export abstract class SettingTCConfigClass {
    static name: string
}
export abstract class SettingTeamClass {
    /* Fields of NM.SettingTeamClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingTeamPortClass {
    /* Fields of NM.SettingTeamPortClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingTunClass {
    /* Fields of NM.SettingTunClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingUserClass {
    static name: string
}
export abstract class SettingVethClass {
    static name: string
}
export abstract class SettingVlanClass {
    /* Fields of NM.SettingVlanClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingVpnClass {
    /* Fields of NM.SettingVpnClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingVrfClass {
    static name: string
}
export abstract class SettingVxlanClass {
    /* Fields of NM.SettingVxlanClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingWifiP2PClass {
    static name: string
}
export abstract class SettingWimaxClass {
    /* Fields of NM.SettingWimaxClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingWireGuardClass {
    static name: string
}
export abstract class SettingWiredClass {
    /* Fields of NM.SettingWiredClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingWirelessClass {
    /* Fields of NM.SettingWirelessClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingWirelessSecurityClass {
    /* Fields of NM.SettingWirelessSecurityClass */
    parent: SettingClass
    static name: string
}
export abstract class SettingWpanClass {
    static name: string
}
export abstract class SimpleConnectionClass {
    /* Fields of NM.SimpleConnectionClass */
    parentClass: GObject.ObjectClass
    static name: string
}
export class SriovVF {
    /* Methods of NM.SriovVF */
    addVlan(vlanId: number): boolean
    dup(): SriovVF
    equal(other: SriovVF): boolean
    getAttribute(name: string): GLib.Variant
    getAttributeNames(): string[]
    getIndex(): number
    getVlanIds(): number[]
    getVlanProtocol(vlanId: number): SriovVFVlanProtocol
    getVlanQos(vlanId: number): number
    ref(): void
    removeVlan(vlanId: number): boolean
    setAttribute(name: string, value?: GLib.Variant | null): void
    setVlanProtocol(vlanId: number, protocol: SriovVFVlanProtocol): void
    setVlanQos(vlanId: number, qos: number): void
    unref(): void
    static name: string
    static new(index: number): SriovVF
    constructor(index: number)
    static new(index: number): SriovVF
    static attributeValidate(name: string, value: GLib.Variant): [ /* returnType */ boolean, /* known */ boolean ]
}
export class TCAction {
    /* Methods of NM.TCAction */
    dup(): TCAction
    equal(other: TCAction): boolean
    getAttribute(name: string): GLib.Variant
    getAttributeNames(): string[]
    getKind(): string
    ref(): void
    setAttribute(name: string, value?: GLib.Variant | null): void
    unref(): void
    static name: string
    static new(kind: string): TCAction
    constructor(kind: string)
    static new(kind: string): TCAction
}
export class TCQdisc {
    /* Methods of NM.TCQdisc */
    dup(): TCQdisc
    equal(other: TCQdisc): boolean
    getAttribute(name: string): GLib.Variant
    getAttributeNames(): string[]
    getHandle(): number
    getKind(): string
    getParent(): number
    ref(): void
    setAttribute(name: string, value?: GLib.Variant | null): void
    setHandle(handle: number): void
    unref(): void
    static name: string
    static new(kind: string, parent: number): TCQdisc
    constructor(kind: string, parent: number)
    static new(kind: string, parent: number): TCQdisc
}
export class TCTfilter {
    /* Methods of NM.TCTfilter */
    dup(): TCTfilter
    equal(other: TCTfilter): boolean
    getAction(): TCAction
    getHandle(): number
    getKind(): string
    getParent(): number
    ref(): void
    setAction(action: TCAction): void
    setHandle(handle: number): void
    unref(): void
    static name: string
    static new(kind: string, parent: number): TCTfilter
    constructor(kind: string, parent: number)
    static new(kind: string, parent: number): TCTfilter
}
export class TeamLinkWatcher {
    /* Methods of NM.TeamLinkWatcher */
    dup(): TeamLinkWatcher
    equal(other: TeamLinkWatcher): boolean
    getDelayDown(): number
    getDelayUp(): number
    getFlags(): TeamLinkWatcherArpPingFlags
    getInitWait(): number
    getInterval(): number
    getMissedMax(): number
    getName(): string
    getSourceHost(): string
    getTargetHost(): string
    getVlanid(): number
    ref(): void
    unref(): void
    static name: string
    static newArpPing(initWait: number, interval: number, missedMax: number, targetHost: string, sourceHost: string, flags: TeamLinkWatcherArpPingFlags): TeamLinkWatcher
    static newArpPing2(initWait: number, interval: number, missedMax: number, vlanid: number, targetHost: string, sourceHost: string, flags: TeamLinkWatcherArpPingFlags): TeamLinkWatcher
    static newEthtool(delayUp: number, delayDown: number): TeamLinkWatcher
    static newNsnaPing(initWait: number, interval: number, missedMax: number, targetHost: string): TeamLinkWatcher
}
export class VariantAttributeSpec {
    static name: string
}
export abstract class VpnConnectionClass {
    static name: string
}
export abstract class VpnEditorInterface {
    /* Fields of NM.VpnEditorInterface */
    gIface: GObject.TypeInterface
    getWidget: any
    placeholder: any
    updateConnection: any
    changed: any
    static name: string
}
export abstract class VpnEditorPluginInterface {
    /* Fields of NM.VpnEditorPluginInterface */
    gIface: GObject.TypeInterface
    getEditor: any
    getCapabilities: any
    exportToFile: any
    getSuggestedFilename: any
    notifyPluginInfoSet: any
    getVt: any
    static name: string
}
export class VpnEditorPluginVT {
    static name: string
}
export abstract class VpnPluginInfoClass {
    static name: string
}
export abstract class VpnPluginOldClass {
    /* Fields of NM.VpnPluginOldClass */
    parent: GObject.ObjectClass
    stateChanged: any
    ip4Config: any
    loginBanner: any
    failure: any
    quit: any
    config: any
    ip6Config: any
    connect: any
    needSecrets: any
    disconnect: any
    newSecrets: any
    connectInteractive: any
    static name: string
}
export abstract class VpnServicePluginClass {
    /* Fields of NM.VpnServicePluginClass */
    parent: GObject.ObjectClass
    stateChanged: any
    ip4Config: any
    loginBanner: any
    failure: any
    quit: any
    config: any
    ip6Config: any
    connect: any
    needSecrets: any
    disconnect: any
    newSecrets: any
    connectInteractive: any
    static name: string
}
export abstract class WifiP2PPeerClass {
    static name: string
}
export abstract class WimaxNspClass {
    static name: string
}
export class WireGuardPeer {
    /* Methods of NM.WireGuardPeer */
    appendAllowedIp(allowedIp: string, acceptInvalid: boolean): boolean
    clearAllowedIps(): void
    cmp(b: WireGuardPeer | null, compareFlags: SettingCompareFlags): number
    getAllowedIp(idx: number, outIsValid?: boolean | null): string
    getAllowedIpsLen(): number
    getEndpoint(): string
    getPersistentKeepalive(): number
    getPresharedKey(): string
    getPresharedKeyFlags(): SettingSecretFlags
    getPublicKey(): string
    isSealed(): boolean
    isValid(checkNonSecrets: boolean, checkSecrets: boolean): boolean
    newClone(withSecrets: boolean): WireGuardPeer
    ref(): WireGuardPeer
    removeAllowedIp(idx: number): boolean
    seal(): void
    setEndpoint(endpoint: string, allowInvalid: boolean): boolean
    setPersistentKeepalive(persistentKeepalive: number): void
    setPresharedKey(presharedKey: string | null, acceptInvalid: boolean): boolean
    setPresharedKeyFlags(presharedKeyFlags: SettingSecretFlags): void
    setPublicKey(publicKey: string | null, acceptInvalid: boolean): boolean
    unref(): void
    static name: string
    static new(): WireGuardPeer
    constructor()
    static new(): WireGuardPeer
}
}