/**
 * UDisks-2.0
 */

/// <reference types="node" />
/// <reference path="Gio-2.0.d.ts" />
/// <reference path="GObject-2.0.d.ts" />
/// <reference path="GLib-2.0.d.ts" />

declare namespace UDisks {

export enum Error {
    FAILED,
    CANCELLED,
    ALREADY_CANCELLED,
    NOT_AUTHORIZED,
    NOT_AUTHORIZED_CAN_OBTAIN,
    NOT_AUTHORIZED_DISMISSED,
    ALREADY_MOUNTED,
    NOT_MOUNTED,
    OPTION_NOT_PERMITTED,
    MOUNTED_BY_OTHER_USER,
    ALREADY_UNMOUNTING,
    NOT_SUPPORTED,
    TIMED_OUT,
    WOULD_WAKEUP,
    DEVICE_BUSY,
    ISCSI_DAEMON_TRANSPORT_FAILED,
    ISCSI_HOST_NOT_FOUND,
    ISCSI_IDMB,
    ISCSI_LOGIN_FAILED,
    ISCSI_LOGIN_AUTH_FAILED,
    ISCSI_LOGIN_FATAL,
    ISCSI_LOGOUT_FAILED,
    ISCSI_NO_FIRMWARE,
    ISCSI_NO_OBJECTS_FOUND,
    ISCSI_NOT_CONNECTED,
    ISCSI_TRANSPORT_FAILED,
    ISCSI_UNKNOWN_DISCOVERY_TYPE,
}
export enum PartitionTypeInfoFlags {
    NONE,
    SWAP,
    RAID,
    HIDDEN,
    CREATE_ONLY,
    SYSTEM,
}
export const ERROR_NUM_ENTRIES: number
export const MAJOR_VERSION: number
export const MICRO_VERSION: number
export const MINOR_VERSION: number
export function blockBcacheInterfaceInfo(): Gio.DBusInterfaceInfo
export function blockBcacheOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function blockInterfaceInfo(): Gio.DBusInterfaceInfo
export function blockLvm2InterfaceInfo(): Gio.DBusInterfaceInfo
export function blockLvm2OverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function blockOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function blockZramInterfaceInfo(): Gio.DBusInterfaceInfo
export function blockZramOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function driveAtaInterfaceInfo(): Gio.DBusInterfaceInfo
export function driveAtaOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function driveInterfaceInfo(): Gio.DBusInterfaceInfo
export function driveOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function encryptedInterfaceInfo(): Gio.DBusInterfaceInfo
export function encryptedOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function errorQuark(): GLib.Quark
export function filesystemBtrfsInterfaceInfo(): Gio.DBusInterfaceInfo
export function filesystemBtrfsOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function filesystemInterfaceInfo(): Gio.DBusInterfaceInfo
export function filesystemOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function jobInterfaceInfo(): Gio.DBusInterfaceInfo
export function jobOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function logicalVolumeInterfaceInfo(): Gio.DBusInterfaceInfo
export function logicalVolumeOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function loopInterfaceInfo(): Gio.DBusInterfaceInfo
export function loopOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function managerBcacheInterfaceInfo(): Gio.DBusInterfaceInfo
export function managerBcacheOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function managerBtrfsInterfaceInfo(): Gio.DBusInterfaceInfo
export function managerBtrfsOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function managerInterfaceInfo(): Gio.DBusInterfaceInfo
export function managerLvm2InterfaceInfo(): Gio.DBusInterfaceInfo
export function managerLvm2OverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function managerOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function managerZramInterfaceInfo(): Gio.DBusInterfaceInfo
export function managerZramOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function mdraidInterfaceInfo(): Gio.DBusInterfaceInfo
export function mdraidOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function partitionInterfaceInfo(): Gio.DBusInterfaceInfo
export function partitionOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function partitionTableInterfaceInfo(): Gio.DBusInterfaceInfo
export function partitionTableOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function physicalVolumeInterfaceInfo(): Gio.DBusInterfaceInfo
export function physicalVolumeOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function swapspaceInterfaceInfo(): Gio.DBusInterfaceInfo
export function swapspaceOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function vdoVolumeInterfaceInfo(): Gio.DBusInterfaceInfo
export function vdoVolumeOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export function volumeGroupInterfaceInfo(): Gio.DBusInterfaceInfo
export function volumeGroupOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
export class Block {
    /* Properties of UDisks.Block */
    configuration: GLib.Variant
    cryptoBackingDevice: string
    device: string
    deviceNumber: number
    drive: string
    hintAuto: boolean
    hintIconName: string
    hintIgnore: boolean
    hintName: string
    hintPartitionable: boolean
    hintSymbolicIconName: string
    hintSystem: boolean
    id: string
    idLabel: string
    idType: string
    idUsage: string
    idUuid: string
    idVersion: string
    mdraid: string
    mdraidMember: string
    preferredDevice: string
    readOnly: boolean
    size: number
    symlinks: string[]
    userspaceMountOptions: string[]
    /* Methods of UDisks.Block */
    callAddConfigurationItem(argItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAddConfigurationItemFinish(res: Gio.AsyncResult): boolean
    callAddConfigurationItemSync(argItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callFormat(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFormatFinish(res: Gio.AsyncResult): boolean
    callFormatSync(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callGetSecretConfiguration(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetSecretConfigurationFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outConfiguration */ GLib.Variant | null ]
    callGetSecretConfigurationSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outConfiguration */ GLib.Variant | null ]
    callOpenDevice(argMode: string, argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callOpenDeviceFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList | null ]
    callOpenDeviceSync(argMode: string, argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList ]
    callOpenForBackup(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callOpenForBackupFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList | null ]
    callOpenForBackupSync(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList ]
    callOpenForBenchmark(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callOpenForBenchmarkFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList | null ]
    callOpenForBenchmarkSync(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList ]
    callOpenForRestore(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callOpenForRestoreFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList | null ]
    callOpenForRestoreSync(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList ]
    callRemoveConfigurationItem(argItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRemoveConfigurationItemFinish(res: Gio.AsyncResult): boolean
    callRemoveConfigurationItemSync(argItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRescan(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRescanFinish(res: Gio.AsyncResult): boolean
    callRescanSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callUpdateConfigurationItem(argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callUpdateConfigurationItemFinish(res: Gio.AsyncResult): boolean
    callUpdateConfigurationItemSync(argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeAddConfigurationItem(invocation: Gio.DBusMethodInvocation): void
    completeFormat(invocation: Gio.DBusMethodInvocation): void
    completeGetSecretConfiguration(invocation: Gio.DBusMethodInvocation, configuration: GLib.Variant): void
    completeOpenDevice(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, fd: GLib.Variant): void
    completeOpenForBackup(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, fd: GLib.Variant): void
    completeOpenForBenchmark(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, fd: GLib.Variant): void
    completeOpenForRestore(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, fd: GLib.Variant): void
    completeRemoveConfigurationItem(invocation: Gio.DBusMethodInvocation): void
    completeRescan(invocation: Gio.DBusMethodInvocation): void
    completeUpdateConfigurationItem(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of UDisks.Block */
    vfuncHandleAddConfigurationItem?(invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant): boolean
    vfuncHandleFormat?(invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant): boolean
    vfuncHandleGetSecretConfiguration?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleOpenDevice?(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList, argMode: string, argOptions: GLib.Variant): boolean
    vfuncHandleOpenForBackup?(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList, argOptions: GLib.Variant): boolean
    vfuncHandleOpenForBenchmark?(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList, argOptions: GLib.Variant): boolean
    vfuncHandleOpenForRestore?(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList, argOptions: GLib.Variant): boolean
    vfuncHandleRemoveConfigurationItem?(invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant): boolean
    vfuncHandleRescan?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleUpdateConfigurationItem?(invocation: Gio.DBusMethodInvocation, argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.Block */
    connect(sigName: "handle-add-configuration-item", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-add-configuration-item", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-add-configuration-item", invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-add-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-add-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-add-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-format", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-format", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-format", invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant): void
    on(sigName: "handle-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-get-secret-configuration", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-get-secret-configuration", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-get-secret-configuration", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-get-secret-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-get-secret-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-get-secret-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-open-device", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argMode: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-open-device", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argMode: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-open-device", invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argMode: string, argOptions: GLib.Variant): void
    on(sigName: "handle-open-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-open-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-open-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-open-for-backup", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-open-for-backup", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-open-for-backup", invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant): void
    on(sigName: "handle-open-for-backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-open-for-backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-open-for-backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-open-for-benchmark", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-open-for-benchmark", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-open-for-benchmark", invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant): void
    on(sigName: "handle-open-for-benchmark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-open-for-benchmark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-open-for-benchmark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-open-for-restore", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-open-for-restore", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-open-for-restore", invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant): void
    on(sigName: "handle-open-for-restore", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-open-for-restore", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-open-for-restore", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-remove-configuration-item", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-remove-configuration-item", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-remove-configuration-item", invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-remove-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-remove-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-remove-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-rescan", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-rescan", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-rescan", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-rescan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-rescan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-rescan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-update-configuration-item", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-update-configuration-item", callback: (($obj: Block, invocation: Gio.DBusMethodInvocation, argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-update-configuration-item", invocation: Gio.DBusMethodInvocation, argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-update-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-update-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-update-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class BlockBcache {
    /* Properties of UDisks.BlockBcache */
    blockSize: number
    bypassHits: number
    bypassMisses: number
    cacheSize: number
    cacheUsed: number
    hits: number
    misses: number
    mode: string
    state: string
    /* Methods of UDisks.BlockBcache */
    callBcacheDestroy(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callBcacheDestroyFinish(res: Gio.AsyncResult): boolean
    callBcacheDestroySync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetMode(argMode: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetModeFinish(res: Gio.AsyncResult): boolean
    callSetModeSync(argMode: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeBcacheDestroy(invocation: Gio.DBusMethodInvocation): void
    completeSetMode(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of UDisks.BlockBcache */
    vfuncHandleBcacheDestroy?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleSetMode?(invocation: Gio.DBusMethodInvocation, argMode: string, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.BlockBcache */
    connect(sigName: "handle-bcache-destroy", callback: (($obj: BlockBcache, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-bcache-destroy", callback: (($obj: BlockBcache, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-bcache-destroy", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-bcache-destroy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-bcache-destroy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-bcache-destroy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-mode", callback: (($obj: BlockBcache, invocation: Gio.DBusMethodInvocation, argMode: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-mode", callback: (($obj: BlockBcache, invocation: Gio.DBusMethodInvocation, argMode: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-mode", invocation: Gio.DBusMethodInvocation, argMode: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class BlockLVM2 {
    /* Properties of UDisks.BlockLVM2 */
    logicalVolume: string
    /* Methods of UDisks.BlockLVM2 */
    /* Virtual methods of UDisks.BlockLVM2 */
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class BlockZRAM {
    /* Properties of UDisks.BlockZRAM */
    active: boolean
    compAlgorithm: string
    comprDataSize: number
    disksize: number
    invalidIo: number
    maxCompStreams: number
    memUsedTotal: number
    numReads: number
    numWrites: number
    origDataSize: number
    zeroPages: number
    /* Methods of UDisks.BlockZRAM */
    callActivate(argPriority: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateFinish(res: Gio.AsyncResult): boolean
    callActivateLabeled(argPriority: number, argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateLabeledFinish(res: Gio.AsyncResult): boolean
    callActivateLabeledSync(argPriority: number, argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callActivateSync(argPriority: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callDeactivate(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeactivateFinish(res: Gio.AsyncResult): boolean
    callDeactivateSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRefresh(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRefreshFinish(res: Gio.AsyncResult): boolean
    callRefreshSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeActivate(invocation: Gio.DBusMethodInvocation): void
    completeActivateLabeled(invocation: Gio.DBusMethodInvocation): void
    completeDeactivate(invocation: Gio.DBusMethodInvocation): void
    completeRefresh(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of UDisks.BlockZRAM */
    vfuncHandleActivate?(invocation: Gio.DBusMethodInvocation, argPriority: number, argOptions: GLib.Variant): boolean
    vfuncHandleActivateLabeled?(invocation: Gio.DBusMethodInvocation, argPriority: number, argLabel: string, argOptions: GLib.Variant): boolean
    vfuncHandleDeactivate?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleRefresh?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.BlockZRAM */
    connect(sigName: "handle-activate", callback: (($obj: BlockZRAM, invocation: Gio.DBusMethodInvocation, argPriority: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-activate", callback: (($obj: BlockZRAM, invocation: Gio.DBusMethodInvocation, argPriority: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-activate", invocation: Gio.DBusMethodInvocation, argPriority: number, argOptions: GLib.Variant): void
    on(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-activate-labeled", callback: (($obj: BlockZRAM, invocation: Gio.DBusMethodInvocation, argPriority: number, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-activate-labeled", callback: (($obj: BlockZRAM, invocation: Gio.DBusMethodInvocation, argPriority: number, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-activate-labeled", invocation: Gio.DBusMethodInvocation, argPriority: number, argLabel: string, argOptions: GLib.Variant): void
    on(sigName: "handle-activate-labeled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-activate-labeled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-activate-labeled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-deactivate", callback: (($obj: BlockZRAM, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-deactivate", callback: (($obj: BlockZRAM, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-deactivate", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-refresh", callback: (($obj: BlockZRAM, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-refresh", callback: (($obj: BlockZRAM, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-refresh", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-refresh", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-refresh", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-refresh", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class Drive {
    /* Properties of UDisks.Drive */
    canPowerOff: boolean
    configuration: GLib.Variant
    connectionBus: string
    ejectable: boolean
    id: string
    media: string
    mediaAvailable: boolean
    mediaChangeDetected: boolean
    mediaCompatibility: string[]
    mediaRemovable: boolean
    model: string
    optical: boolean
    opticalBlank: boolean
    opticalNumAudioTracks: number
    opticalNumDataTracks: number
    opticalNumSessions: number
    opticalNumTracks: number
    removable: boolean
    revision: string
    rotationRate: number
    seat: string
    serial: string
    siblingId: string
    size: number
    sortKey: string
    timeDetected: number
    timeMediaDetected: number
    vendor: string
    wwn: string
    /* Methods of UDisks.Drive */
    callEject(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEjectFinish(res: Gio.AsyncResult): boolean
    callEjectSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callPowerOff(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callPowerOffFinish(res: Gio.AsyncResult): boolean
    callPowerOffSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetConfiguration(argValue: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetConfigurationFinish(res: Gio.AsyncResult): boolean
    callSetConfigurationSync(argValue: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeEject(invocation: Gio.DBusMethodInvocation): void
    completePowerOff(invocation: Gio.DBusMethodInvocation): void
    completeSetConfiguration(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of UDisks.Drive */
    vfuncHandleEject?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandlePowerOff?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleSetConfiguration?(invocation: Gio.DBusMethodInvocation, argValue: GLib.Variant, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.Drive */
    connect(sigName: "handle-eject", callback: (($obj: Drive, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-eject", callback: (($obj: Drive, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-eject", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-eject", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-eject", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-eject", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-power-off", callback: (($obj: Drive, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-power-off", callback: (($obj: Drive, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-power-off", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-power-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-power-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-power-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-configuration", callback: (($obj: Drive, invocation: Gio.DBusMethodInvocation, argValue: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-configuration", callback: (($obj: Drive, invocation: Gio.DBusMethodInvocation, argValue: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-configuration", invocation: Gio.DBusMethodInvocation, argValue: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-set-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class DriveAta {
    /* Properties of UDisks.DriveAta */
    aamEnabled: boolean
    aamSupported: boolean
    aamVendorRecommendedValue: number
    apmEnabled: boolean
    apmSupported: boolean
    pmEnabled: boolean
    pmSupported: boolean
    readLookaheadEnabled: boolean
    readLookaheadSupported: boolean
    securityEnhancedEraseUnitMinutes: number
    securityEraseUnitMinutes: number
    securityFrozen: boolean
    smartEnabled: boolean
    smartFailing: boolean
    smartNumAttributesFailedInThePast: number
    smartNumAttributesFailing: number
    smartNumBadSectors: number
    smartPowerOnSeconds: number
    smartSelftestPercentRemaining: number
    smartSelftestStatus: string
    smartSupported: boolean
    smartTemperature: number
    smartUpdated: number
    writeCacheEnabled: boolean
    writeCacheSupported: boolean
    /* Methods of UDisks.DriveAta */
    callPmGetState(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callPmGetStateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outState */ number | null ]
    callPmGetStateSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outState */ number | null ]
    callPmStandby(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callPmStandbyFinish(res: Gio.AsyncResult): boolean
    callPmStandbySync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callPmWakeup(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callPmWakeupFinish(res: Gio.AsyncResult): boolean
    callPmWakeupSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSecurityEraseUnit(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSecurityEraseUnitFinish(res: Gio.AsyncResult): boolean
    callSecurityEraseUnitSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSmartGetAttributes(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSmartGetAttributesFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outAttributes */ GLib.Variant | null ]
    callSmartGetAttributesSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outAttributes */ GLib.Variant | null ]
    callSmartSelftestAbort(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSmartSelftestAbortFinish(res: Gio.AsyncResult): boolean
    callSmartSelftestAbortSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSmartSelftestStart(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSmartSelftestStartFinish(res: Gio.AsyncResult): boolean
    callSmartSelftestStartSync(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSmartSetEnabled(argValue: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSmartSetEnabledFinish(res: Gio.AsyncResult): boolean
    callSmartSetEnabledSync(argValue: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSmartUpdate(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSmartUpdateFinish(res: Gio.AsyncResult): boolean
    callSmartUpdateSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completePmGetState(invocation: Gio.DBusMethodInvocation, state: number): void
    completePmStandby(invocation: Gio.DBusMethodInvocation): void
    completePmWakeup(invocation: Gio.DBusMethodInvocation): void
    completeSecurityEraseUnit(invocation: Gio.DBusMethodInvocation): void
    completeSmartGetAttributes(invocation: Gio.DBusMethodInvocation, attributes: GLib.Variant): void
    completeSmartSelftestAbort(invocation: Gio.DBusMethodInvocation): void
    completeSmartSelftestStart(invocation: Gio.DBusMethodInvocation): void
    completeSmartSetEnabled(invocation: Gio.DBusMethodInvocation): void
    completeSmartUpdate(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of UDisks.DriveAta */
    vfuncHandlePmGetState?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandlePmStandby?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandlePmWakeup?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleSecurityEraseUnit?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleSmartGetAttributes?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleSmartSelftestAbort?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleSmartSelftestStart?(invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant): boolean
    vfuncHandleSmartSetEnabled?(invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant): boolean
    vfuncHandleSmartUpdate?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.DriveAta */
    connect(sigName: "handle-pm-get-state", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-pm-get-state", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-pm-get-state", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-pm-get-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-pm-get-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-pm-get-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-pm-standby", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-pm-standby", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-pm-standby", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-pm-standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-pm-standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-pm-standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-pm-wakeup", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-pm-wakeup", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-pm-wakeup", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-pm-wakeup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-pm-wakeup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-pm-wakeup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-security-erase-unit", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-security-erase-unit", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-security-erase-unit", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-security-erase-unit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-security-erase-unit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-security-erase-unit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-smart-get-attributes", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-smart-get-attributes", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-smart-get-attributes", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-smart-get-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-smart-get-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-smart-get-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-smart-selftest-abort", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-smart-selftest-abort", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-smart-selftest-abort", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-smart-selftest-abort", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-smart-selftest-abort", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-smart-selftest-abort", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-smart-selftest-start", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-smart-selftest-start", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-smart-selftest-start", invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant): void
    on(sigName: "handle-smart-selftest-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-smart-selftest-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-smart-selftest-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-smart-set-enabled", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-smart-set-enabled", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-smart-set-enabled", invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-smart-set-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-smart-set-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-smart-set-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-smart-update", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-smart-update", callback: (($obj: DriveAta, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-smart-update", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-smart-update", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-smart-update", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-smart-update", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class Encrypted {
    /* Properties of UDisks.Encrypted */
    childConfiguration: GLib.Variant
    cleartextDevice: string
    hintEncryptionType: string
    metadataSize: number
    /* Methods of UDisks.Encrypted */
    callChangePassphrase(argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callChangePassphraseFinish(res: Gio.AsyncResult): boolean
    callChangePassphraseSync(argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callLock(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callLockFinish(res: Gio.AsyncResult): boolean
    callLockSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callResize(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeFinish(res: Gio.AsyncResult): boolean
    callResizeSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callUnlock(argPassphrase: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callUnlockFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outCleartextDevice */ string | null ]
    callUnlockSync(argPassphrase: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outCleartextDevice */ string | null ]
    completeChangePassphrase(invocation: Gio.DBusMethodInvocation): void
    completeLock(invocation: Gio.DBusMethodInvocation): void
    completeResize(invocation: Gio.DBusMethodInvocation): void
    completeUnlock(invocation: Gio.DBusMethodInvocation, cleartextDevice: string): void
    /* Virtual methods of UDisks.Encrypted */
    vfuncHandleChangePassphrase?(invocation: Gio.DBusMethodInvocation, argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant): boolean
    vfuncHandleLock?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleResize?(invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): boolean
    vfuncHandleUnlock?(invocation: Gio.DBusMethodInvocation, argPassphrase: string, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.Encrypted */
    connect(sigName: "handle-change-passphrase", callback: (($obj: Encrypted, invocation: Gio.DBusMethodInvocation, argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-change-passphrase", callback: (($obj: Encrypted, invocation: Gio.DBusMethodInvocation, argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-change-passphrase", invocation: Gio.DBusMethodInvocation, argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant): void
    on(sigName: "handle-change-passphrase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-change-passphrase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-change-passphrase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-lock", callback: (($obj: Encrypted, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-lock", callback: (($obj: Encrypted, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-lock", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-lock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-lock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-lock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize", callback: (($obj: Encrypted, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize", callback: (($obj: Encrypted, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-unlock", callback: (($obj: Encrypted, invocation: Gio.DBusMethodInvocation, argPassphrase: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-unlock", callback: (($obj: Encrypted, invocation: Gio.DBusMethodInvocation, argPassphrase: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-unlock", invocation: Gio.DBusMethodInvocation, argPassphrase: string, argOptions: GLib.Variant): void
    on(sigName: "handle-unlock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-unlock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-unlock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class Filesystem {
    /* Properties of UDisks.Filesystem */
    mountPoints: string[]
    size: number
    /* Methods of UDisks.Filesystem */
    callCheck(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCheckFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outConsistent */ boolean | null ]
    callCheckSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outConsistent */ boolean | null ]
    callMount(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callMountFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outMountPath */ string | null ]
    callMountSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outMountPath */ string | null ]
    callRepair(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRepairFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outRepaired */ boolean | null ]
    callRepairSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outRepaired */ boolean | null ]
    callResize(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeFinish(res: Gio.AsyncResult): boolean
    callResizeSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetLabel(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetLabelFinish(res: Gio.AsyncResult): boolean
    callSetLabelSync(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callTakeOwnership(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callTakeOwnershipFinish(res: Gio.AsyncResult): boolean
    callTakeOwnershipSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callUnmount(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callUnmountFinish(res: Gio.AsyncResult): boolean
    callUnmountSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeCheck(invocation: Gio.DBusMethodInvocation, consistent: boolean): void
    completeMount(invocation: Gio.DBusMethodInvocation, mountPath: string): void
    completeRepair(invocation: Gio.DBusMethodInvocation, repaired: boolean): void
    completeResize(invocation: Gio.DBusMethodInvocation): void
    completeSetLabel(invocation: Gio.DBusMethodInvocation): void
    completeTakeOwnership(invocation: Gio.DBusMethodInvocation): void
    completeUnmount(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of UDisks.Filesystem */
    vfuncHandleCheck?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleMount?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleRepair?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleResize?(invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): boolean
    vfuncHandleSetLabel?(invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant): boolean
    vfuncHandleTakeOwnership?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleUnmount?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.Filesystem */
    connect(sigName: "handle-check", callback: (($obj: Filesystem, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-check", callback: (($obj: Filesystem, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-check", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-mount", callback: (($obj: Filesystem, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-mount", callback: (($obj: Filesystem, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-mount", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-mount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-mount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-mount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-repair", callback: (($obj: Filesystem, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-repair", callback: (($obj: Filesystem, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-repair", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize", callback: (($obj: Filesystem, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize", callback: (($obj: Filesystem, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-label", callback: (($obj: Filesystem, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-label", callback: (($obj: Filesystem, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-label", invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-take-ownership", callback: (($obj: Filesystem, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-take-ownership", callback: (($obj: Filesystem, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-take-ownership", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-take-ownership", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-take-ownership", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-take-ownership", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-unmount", callback: (($obj: Filesystem, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-unmount", callback: (($obj: Filesystem, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-unmount", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-unmount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-unmount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-unmount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class FilesystemBTRFS {
    /* Properties of UDisks.FilesystemBTRFS */
    label: string
    numDevices: number
    used: number
    uuid: string
    /* Methods of UDisks.FilesystemBTRFS */
    callAddDevice(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAddDeviceFinish(res: Gio.AsyncResult): boolean
    callAddDeviceSync(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCreateSnapshot(argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateSnapshotFinish(res: Gio.AsyncResult): boolean
    callCreateSnapshotSync(argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCreateSubvolume(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateSubvolumeFinish(res: Gio.AsyncResult): boolean
    callCreateSubvolumeSync(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callGetSubvolumes(argSnapshotsOnly: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetSubvolumesFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outSubvolumes */ GLib.Variant | null, /* outSubvolumesCnt */ number | null ]
    callGetSubvolumesSync(argSnapshotsOnly: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outSubvolumes */ GLib.Variant | null, /* outSubvolumesCnt */ number | null ]
    callRemoveDevice(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRemoveDeviceFinish(res: Gio.AsyncResult): boolean
    callRemoveDeviceSync(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRemoveSubvolume(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRemoveSubvolumeFinish(res: Gio.AsyncResult): boolean
    callRemoveSubvolumeSync(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRepair(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRepairFinish(res: Gio.AsyncResult): boolean
    callRepairSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callResize(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeFinish(res: Gio.AsyncResult): boolean
    callResizeSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetLabel(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetLabelFinish(res: Gio.AsyncResult): boolean
    callSetLabelSync(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeAddDevice(invocation: Gio.DBusMethodInvocation): void
    completeCreateSnapshot(invocation: Gio.DBusMethodInvocation): void
    completeCreateSubvolume(invocation: Gio.DBusMethodInvocation): void
    completeGetSubvolumes(invocation: Gio.DBusMethodInvocation, subvolumes: GLib.Variant, subvolumesCnt: number): void
    completeRemoveDevice(invocation: Gio.DBusMethodInvocation): void
    completeRemoveSubvolume(invocation: Gio.DBusMethodInvocation): void
    completeRepair(invocation: Gio.DBusMethodInvocation): void
    completeResize(invocation: Gio.DBusMethodInvocation): void
    completeSetLabel(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of UDisks.FilesystemBTRFS */
    vfuncHandleAddDevice?(invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): boolean
    vfuncHandleCreateSnapshot?(invocation: Gio.DBusMethodInvocation, argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant): boolean
    vfuncHandleCreateSubvolume?(invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant): boolean
    vfuncHandleGetSubvolumes?(invocation: Gio.DBusMethodInvocation, argSnapshotsOnly: boolean, argOptions: GLib.Variant): boolean
    vfuncHandleRemoveDevice?(invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): boolean
    vfuncHandleRemoveSubvolume?(invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant): boolean
    vfuncHandleRepair?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleResize?(invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): boolean
    vfuncHandleSetLabel?(invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.FilesystemBTRFS */
    connect(sigName: "handle-add-device", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-add-device", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-add-device", invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): void
    on(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-snapshot", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-snapshot", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-snapshot", invocation: Gio.DBusMethodInvocation, argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-subvolume", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-subvolume", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-subvolume", invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-create-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-get-subvolumes", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argSnapshotsOnly: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-get-subvolumes", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argSnapshotsOnly: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-get-subvolumes", invocation: Gio.DBusMethodInvocation, argSnapshotsOnly: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-get-subvolumes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-get-subvolumes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-get-subvolumes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-remove-device", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-remove-device", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-remove-device", invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): void
    on(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-remove-subvolume", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-remove-subvolume", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-remove-subvolume", invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-remove-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-remove-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-remove-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-repair", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-repair", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-repair", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-label", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-label", callback: (($obj: FilesystemBTRFS, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-label", invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class Job {
    /* Properties of UDisks.Job */
    bytes: number
    cancelable: boolean
    expectedEndTime: number
    objects: string[]
    operation: string
    progress: number
    progressValid: boolean
    rate: number
    startTime: number
    startedByUid: number
    /* Methods of UDisks.Job */
    callCancel(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCancelFinish(res: Gio.AsyncResult): boolean
    callCancelSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeCancel(invocation: Gio.DBusMethodInvocation): void
    emitCompleted(argSuccess: boolean, argMessage: string): void
    /* Virtual methods of UDisks.Job */
    vfuncCompleted?(argSuccess: boolean, argMessage: string): void
    vfuncHandleCancel?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.Job */
    connect(sigName: "completed", callback: (($obj: Job, argSuccess: boolean, argMessage: string) => void)): number
    connect_after(sigName: "completed", callback: (($obj: Job, argSuccess: boolean, argMessage: string) => void)): number
    emit(sigName: "completed", argSuccess: boolean, argMessage: string): void
    on(sigName: "completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-cancel", callback: (($obj: Job, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-cancel", callback: (($obj: Job, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-cancel", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-cancel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-cancel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-cancel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class LogicalVolume {
    /* Properties of UDisks.LogicalVolume */
    active: boolean
    blockDevice: string
    childConfiguration: GLib.Variant
    dataAllocatedRatio: number
    metadataAllocatedRatio: number
    name: string
    origin: string
    size: number
    thinPool: string
    type: string
    uuid: string
    volumeGroup: string
    /* Methods of UDisks.LogicalVolume */
    callActivate(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callActivateSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCacheAttach(argCacheName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCacheAttachFinish(res: Gio.AsyncResult): boolean
    callCacheAttachSync(argCacheName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCacheDetach(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCacheDetachFinish(res: Gio.AsyncResult): boolean
    callCacheDetachSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCacheSplit(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCacheSplitFinish(res: Gio.AsyncResult): boolean
    callCacheSplitSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCreateSnapshot(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateSnapshotFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateSnapshotSync(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callDeactivate(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeactivateFinish(res: Gio.AsyncResult): boolean
    callDeactivateSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callDelete(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRename(argNewName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRenameFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callRenameSync(argNewName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callResize(argNewSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeFinish(res: Gio.AsyncResult): boolean
    callResizeSync(argNewSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeActivate(invocation: Gio.DBusMethodInvocation, result: string): void
    completeCacheAttach(invocation: Gio.DBusMethodInvocation): void
    completeCacheDetach(invocation: Gio.DBusMethodInvocation): void
    completeCacheSplit(invocation: Gio.DBusMethodInvocation): void
    completeCreateSnapshot(invocation: Gio.DBusMethodInvocation, result: string): void
    completeDeactivate(invocation: Gio.DBusMethodInvocation): void
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeRename(invocation: Gio.DBusMethodInvocation, result: string): void
    completeResize(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of UDisks.LogicalVolume */
    vfuncHandleActivate?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleCacheAttach?(invocation: Gio.DBusMethodInvocation, argCacheName: string, argOptions: GLib.Variant): boolean
    vfuncHandleCacheDetach?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleCacheSplit?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleCreateSnapshot?(invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant): boolean
    vfuncHandleDeactivate?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleDelete?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleRename?(invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant): boolean
    vfuncHandleResize?(invocation: Gio.DBusMethodInvocation, argNewSize: number, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.LogicalVolume */
    connect(sigName: "handle-activate", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-activate", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-activate", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-cache-attach", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argCacheName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-cache-attach", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argCacheName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-cache-attach", invocation: Gio.DBusMethodInvocation, argCacheName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-cache-attach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-cache-attach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-cache-attach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-cache-detach", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-cache-detach", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-cache-detach", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-cache-detach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-cache-detach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-cache-detach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-cache-split", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-cache-split", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-cache-split", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-cache-split", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-cache-split", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-cache-split", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-snapshot", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-snapshot", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-snapshot", invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-deactivate", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-deactivate", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-deactivate", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-delete", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-delete", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-rename", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-rename", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-rename", invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argNewSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize", callback: (($obj: LogicalVolume, invocation: Gio.DBusMethodInvocation, argNewSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize", invocation: Gio.DBusMethodInvocation, argNewSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class Loop {
    /* Properties of UDisks.Loop */
    autoclear: boolean
    backingFile: string
    setupByUid: number
    /* Methods of UDisks.Loop */
    callDelete(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetAutoclear(argValue: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetAutoclearFinish(res: Gio.AsyncResult): boolean
    callSetAutoclearSync(argValue: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeSetAutoclear(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of UDisks.Loop */
    vfuncHandleDelete?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleSetAutoclear?(invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.Loop */
    connect(sigName: "handle-delete", callback: (($obj: Loop, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-delete", callback: (($obj: Loop, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-autoclear", callback: (($obj: Loop, invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-autoclear", callback: (($obj: Loop, invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-autoclear", invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-set-autoclear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-autoclear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-autoclear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class MDRaid {
    /* Properties of UDisks.MDRaid */
    activeDevices: GLib.Variant
    bitmapLocation: string
    childConfiguration: GLib.Variant
    chunkSize: number
    degraded: number
    level: string
    name: string
    numDevices: number
    running: boolean
    size: number
    syncAction: string
    syncCompleted: number
    syncRate: number
    syncRemainingTime: number
    uuid: string
    /* Methods of UDisks.MDRaid */
    callAddDevice(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAddDeviceFinish(res: Gio.AsyncResult): boolean
    callAddDeviceSync(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callDelete(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRemoveDevice(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRemoveDeviceFinish(res: Gio.AsyncResult): boolean
    callRemoveDeviceSync(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRequestSyncAction(argSyncAction: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRequestSyncActionFinish(res: Gio.AsyncResult): boolean
    callRequestSyncActionSync(argSyncAction: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetBitmapLocation(argValue: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetBitmapLocationFinish(res: Gio.AsyncResult): boolean
    callSetBitmapLocationSync(argValue: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callStart(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStartFinish(res: Gio.AsyncResult): boolean
    callStartSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callStop(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStopFinish(res: Gio.AsyncResult): boolean
    callStopSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeAddDevice(invocation: Gio.DBusMethodInvocation): void
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeRemoveDevice(invocation: Gio.DBusMethodInvocation): void
    completeRequestSyncAction(invocation: Gio.DBusMethodInvocation): void
    completeSetBitmapLocation(invocation: Gio.DBusMethodInvocation): void
    completeStart(invocation: Gio.DBusMethodInvocation): void
    completeStop(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of UDisks.MDRaid */
    vfuncHandleAddDevice?(invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): boolean
    vfuncHandleDelete?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleRemoveDevice?(invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): boolean
    vfuncHandleRequestSyncAction?(invocation: Gio.DBusMethodInvocation, argSyncAction: string, argOptions: GLib.Variant): boolean
    vfuncHandleSetBitmapLocation?(invocation: Gio.DBusMethodInvocation, argValue: string, argOptions: GLib.Variant): boolean
    vfuncHandleStart?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleStop?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.MDRaid */
    connect(sigName: "handle-add-device", callback: (($obj: MDRaid, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-add-device", callback: (($obj: MDRaid, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-add-device", invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): void
    on(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-delete", callback: (($obj: MDRaid, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-delete", callback: (($obj: MDRaid, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-remove-device", callback: (($obj: MDRaid, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-remove-device", callback: (($obj: MDRaid, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-remove-device", invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): void
    on(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-request-sync-action", callback: (($obj: MDRaid, invocation: Gio.DBusMethodInvocation, argSyncAction: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-request-sync-action", callback: (($obj: MDRaid, invocation: Gio.DBusMethodInvocation, argSyncAction: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-request-sync-action", invocation: Gio.DBusMethodInvocation, argSyncAction: string, argOptions: GLib.Variant): void
    on(sigName: "handle-request-sync-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-request-sync-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-request-sync-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-bitmap-location", callback: (($obj: MDRaid, invocation: Gio.DBusMethodInvocation, argValue: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-bitmap-location", callback: (($obj: MDRaid, invocation: Gio.DBusMethodInvocation, argValue: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-bitmap-location", invocation: Gio.DBusMethodInvocation, argValue: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-bitmap-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-bitmap-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-bitmap-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-start", callback: (($obj: MDRaid, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-start", callback: (($obj: MDRaid, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-start", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-stop", callback: (($obj: MDRaid, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-stop", callback: (($obj: MDRaid, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-stop", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class Manager {
    /* Properties of UDisks.Manager */
    defaultEncryptionType: string
    supportedEncryptionTypes: string[]
    supportedFilesystems: string[]
    version: string
    /* Methods of UDisks.Manager */
    callCanCheck(argType: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCanCheckFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanCheckSync(argType: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanFormat(argType: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCanFormatFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanFormatSync(argType: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanRepair(argType: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCanRepairFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanRepairSync(argType: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanResize(argType: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCanResizeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanResizeSync(argType: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callEnableModule(argName: string, argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableModuleFinish(res: Gio.AsyncResult): boolean
    callEnableModuleSync(argName: string, argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callEnableModules(argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableModulesFinish(res: Gio.AsyncResult): boolean
    callEnableModulesSync(argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callGetBlockDevices(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetBlockDevicesFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outBlockObjects */ string[] | null ]
    callGetBlockDevicesSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outBlockObjects */ string[] | null ]
    callLoopSetup(argFd: GLib.Variant, argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callLoopSetupFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResultingDevice */ string | null, /* outFdList */ Gio.UnixFDList | null ]
    callLoopSetupSync(argFd: GLib.Variant, argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResultingDevice */ string | null, /* outFdList */ Gio.UnixFDList ]
    callMdraidCreate(argBlocks: string, argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callMdraidCreateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResultingArray */ string | null ]
    callMdraidCreateSync(argBlocks: string, argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResultingArray */ string | null ]
    callResolveDevice(argDevspec: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResolveDeviceFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outDevices */ string[] | null ]
    callResolveDeviceSync(argDevspec: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outDevices */ string[] | null ]
    completeCanCheck(invocation: Gio.DBusMethodInvocation, available: GLib.Variant): void
    completeCanFormat(invocation: Gio.DBusMethodInvocation, available: GLib.Variant): void
    completeCanRepair(invocation: Gio.DBusMethodInvocation, available: GLib.Variant): void
    completeCanResize(invocation: Gio.DBusMethodInvocation, available: GLib.Variant): void
    completeEnableModule(invocation: Gio.DBusMethodInvocation): void
    completeEnableModules(invocation: Gio.DBusMethodInvocation): void
    completeGetBlockDevices(invocation: Gio.DBusMethodInvocation, blockObjects: string): void
    completeLoopSetup(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, resultingDevice: string): void
    completeMdraidCreate(invocation: Gio.DBusMethodInvocation, resultingArray: string): void
    completeResolveDevice(invocation: Gio.DBusMethodInvocation, devices: string): void
    /* Virtual methods of UDisks.Manager */
    vfuncHandleCanCheck?(invocation: Gio.DBusMethodInvocation, argType: string): boolean
    vfuncHandleCanFormat?(invocation: Gio.DBusMethodInvocation, argType: string): boolean
    vfuncHandleCanRepair?(invocation: Gio.DBusMethodInvocation, argType: string): boolean
    vfuncHandleCanResize?(invocation: Gio.DBusMethodInvocation, argType: string): boolean
    vfuncHandleEnableModule?(invocation: Gio.DBusMethodInvocation, argName: string, argEnable: boolean): boolean
    vfuncHandleEnableModules?(invocation: Gio.DBusMethodInvocation, argEnable: boolean): boolean
    vfuncHandleGetBlockDevices?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleLoopSetup?(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList, argFd: GLib.Variant, argOptions: GLib.Variant): boolean
    vfuncHandleMdraidCreate?(invocation: Gio.DBusMethodInvocation, argBlocks: string, argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant): boolean
    vfuncHandleResolveDevice?(invocation: Gio.DBusMethodInvocation, argDevspec: GLib.Variant, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.Manager */
    connect(sigName: "handle-can-check", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    connect_after(sigName: "handle-can-check", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    emit(sigName: "handle-can-check", invocation: Gio.DBusMethodInvocation, argType: string): void
    on(sigName: "handle-can-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-can-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-can-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-can-format", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    connect_after(sigName: "handle-can-format", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    emit(sigName: "handle-can-format", invocation: Gio.DBusMethodInvocation, argType: string): void
    on(sigName: "handle-can-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-can-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-can-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-can-repair", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    connect_after(sigName: "handle-can-repair", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    emit(sigName: "handle-can-repair", invocation: Gio.DBusMethodInvocation, argType: string): void
    on(sigName: "handle-can-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-can-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-can-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-can-resize", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    connect_after(sigName: "handle-can-resize", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    emit(sigName: "handle-can-resize", invocation: Gio.DBusMethodInvocation, argType: string): void
    on(sigName: "handle-can-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-can-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-can-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-enable-module", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argName: string, argEnable: boolean) => boolean)): number
    connect_after(sigName: "handle-enable-module", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argName: string, argEnable: boolean) => boolean)): number
    emit(sigName: "handle-enable-module", invocation: Gio.DBusMethodInvocation, argName: string, argEnable: boolean): void
    on(sigName: "handle-enable-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-enable-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-enable-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-enable-modules", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    connect_after(sigName: "handle-enable-modules", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    emit(sigName: "handle-enable-modules", invocation: Gio.DBusMethodInvocation, argEnable: boolean): void
    on(sigName: "handle-enable-modules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-enable-modules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-enable-modules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-get-block-devices", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-get-block-devices", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-get-block-devices", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-get-block-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-get-block-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-get-block-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-loop-setup", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argFd: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-loop-setup", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argFd: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-loop-setup", invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argFd: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-loop-setup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-loop-setup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-loop-setup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-mdraid-create", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argBlocks: string[], argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-mdraid-create", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argBlocks: string[], argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-mdraid-create", invocation: Gio.DBusMethodInvocation, argBlocks: string[], argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant): void
    on(sigName: "handle-mdraid-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-mdraid-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-mdraid-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resolve-device", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argDevspec: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resolve-device", callback: (($obj: Manager, invocation: Gio.DBusMethodInvocation, argDevspec: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resolve-device", invocation: Gio.DBusMethodInvocation, argDevspec: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-resolve-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resolve-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resolve-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class ManagerBTRFS {
    /* Methods of UDisks.ManagerBTRFS */
    callCreateVolume(argDevices: string, argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateVolumeFinish(res: Gio.AsyncResult): boolean
    callCreateVolumeSync(argDevices: string, argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeCreateVolume(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of UDisks.ManagerBTRFS */
    vfuncHandleCreateVolume?(invocation: Gio.DBusMethodInvocation, argDevices: string, argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.ManagerBTRFS */
    connect(sigName: "handle-create-volume", callback: (($obj: ManagerBTRFS, invocation: Gio.DBusMethodInvocation, argDevices: string[], argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-volume", callback: (($obj: ManagerBTRFS, invocation: Gio.DBusMethodInvocation, argDevices: string[], argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-volume", invocation: Gio.DBusMethodInvocation, argDevices: string[], argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant): void
    on(sigName: "handle-create-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class ManagerBcache {
    /* Methods of UDisks.ManagerBcache */
    callBcacheCreate(argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callBcacheCreateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outBcache */ string | null ]
    callBcacheCreateSync(argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outBcache */ string | null ]
    completeBcacheCreate(invocation: Gio.DBusMethodInvocation, bcache: string): void
    /* Virtual methods of UDisks.ManagerBcache */
    vfuncHandleBcacheCreate?(invocation: Gio.DBusMethodInvocation, argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.ManagerBcache */
    connect(sigName: "handle-bcache-create", callback: (($obj: ManagerBcache, invocation: Gio.DBusMethodInvocation, argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-bcache-create", callback: (($obj: ManagerBcache, invocation: Gio.DBusMethodInvocation, argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-bcache-create", invocation: Gio.DBusMethodInvocation, argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant): void
    on(sigName: "handle-bcache-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-bcache-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-bcache-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class ManagerLVM2 {
    /* Methods of UDisks.ManagerLVM2 */
    callVolumeGroupCreate(argName: string, argBlocks: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callVolumeGroupCreateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callVolumeGroupCreateSync(argName: string, argBlocks: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    completeVolumeGroupCreate(invocation: Gio.DBusMethodInvocation, result: string): void
    /* Virtual methods of UDisks.ManagerLVM2 */
    vfuncHandleVolumeGroupCreate?(invocation: Gio.DBusMethodInvocation, argName: string, argBlocks: string, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.ManagerLVM2 */
    connect(sigName: "handle-volume-group-create", callback: (($obj: ManagerLVM2, invocation: Gio.DBusMethodInvocation, argName: string, argBlocks: string[], argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-volume-group-create", callback: (($obj: ManagerLVM2, invocation: Gio.DBusMethodInvocation, argName: string, argBlocks: string[], argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-volume-group-create", invocation: Gio.DBusMethodInvocation, argName: string, argBlocks: string[], argOptions: GLib.Variant): void
    on(sigName: "handle-volume-group-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-volume-group-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-volume-group-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class ManagerZRAM {
    /* Methods of UDisks.ManagerZRAM */
    callCreateDevices(argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateDevicesFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outZrams */ string[] | null ]
    callCreateDevicesSync(argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outZrams */ string[] | null ]
    callDestroyDevices(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDestroyDevicesFinish(res: Gio.AsyncResult): boolean
    callDestroyDevicesSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeCreateDevices(invocation: Gio.DBusMethodInvocation, zrams: string): void
    completeDestroyDevices(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of UDisks.ManagerZRAM */
    vfuncHandleCreateDevices?(invocation: Gio.DBusMethodInvocation, argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant): boolean
    vfuncHandleDestroyDevices?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.ManagerZRAM */
    connect(sigName: "handle-create-devices", callback: (($obj: ManagerZRAM, invocation: Gio.DBusMethodInvocation, argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-devices", callback: (($obj: ManagerZRAM, invocation: Gio.DBusMethodInvocation, argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-devices", invocation: Gio.DBusMethodInvocation, argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-create-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-destroy-devices", callback: (($obj: ManagerZRAM, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-destroy-devices", callback: (($obj: ManagerZRAM, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-destroy-devices", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-destroy-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-destroy-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-destroy-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class Object {
    /* Properties of UDisks.Object */
    block: Block
    blockBcache: BlockBcache
    blockLvm2: BlockLVM2
    blockZram: BlockZRAM
    drive: Drive
    driveAta: DriveAta
    encrypted: Encrypted
    filesystem: Filesystem
    filesystemBtrfs: FilesystemBTRFS
    job: Job
    logicalVolume: LogicalVolume
    loop: Loop
    manager: Manager
    managerBcache: ManagerBcache
    managerBtrfs: ManagerBTRFS
    managerLvm2: ManagerLVM2
    managerZram: ManagerZRAM
    mdraid: MDRaid
    partition: Partition
    partitionTable: PartitionTable
    physicalVolume: PhysicalVolume
    swapspace: Swapspace
    vdoVolume: VDOVolume
    volumeGroup: VolumeGroup
    /* Methods of UDisks.Object */
    getBlock(): Block | null
    getBlockBcache(): BlockBcache | null
    getBlockLvm2(): BlockLVM2 | null
    getBlockZram(): BlockZRAM | null
    getDrive(): Drive | null
    getDriveAta(): DriveAta | null
    getEncrypted(): Encrypted | null
    getFilesystem(): Filesystem | null
    getFilesystemBtrfs(): FilesystemBTRFS | null
    getJob(): Job | null
    getLogicalVolume(): LogicalVolume | null
    getLoop(): Loop | null
    getManager(): Manager | null
    getManagerBcache(): ManagerBcache | null
    getManagerBtrfs(): ManagerBTRFS | null
    getManagerLvm2(): ManagerLVM2 | null
    getManagerZram(): ManagerZRAM | null
    getMdraid(): MDRaid | null
    getPartition(): Partition | null
    getPartitionTable(): PartitionTable | null
    getPhysicalVolume(): PhysicalVolume | null
    getSwapspace(): Swapspace | null
    getVdoVolume(): VDOVolume | null
    getVolumeGroup(): VolumeGroup | null
    static name: string
}
export class Partition {
    /* Properties of UDisks.Partition */
    flags: number
    isContained: boolean
    isContainer: boolean
    name: string
    number: number
    offset: number
    size: number
    table: string
    type: string
    uuid: string
    /* Methods of UDisks.Partition */
    callDelete(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callResize(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeFinish(res: Gio.AsyncResult): boolean
    callResizeSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetFlags(argFlags: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetFlagsFinish(res: Gio.AsyncResult): boolean
    callSetFlagsSync(argFlags: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetName(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetNameFinish(res: Gio.AsyncResult): boolean
    callSetNameSync(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetType(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetTypeFinish(res: Gio.AsyncResult): boolean
    callSetTypeSync(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeResize(invocation: Gio.DBusMethodInvocation): void
    completeSetFlags(invocation: Gio.DBusMethodInvocation): void
    completeSetName(invocation: Gio.DBusMethodInvocation): void
    completeSetType(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of UDisks.Partition */
    vfuncHandleDelete?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleResize?(invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): boolean
    vfuncHandleSetFlags?(invocation: Gio.DBusMethodInvocation, argFlags: number, argOptions: GLib.Variant): boolean
    vfuncHandleSetName?(invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant): boolean
    vfuncHandleSetType?(invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.Partition */
    connect(sigName: "handle-delete", callback: (($obj: Partition, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-delete", callback: (($obj: Partition, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize", callback: (($obj: Partition, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize", callback: (($obj: Partition, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-flags", callback: (($obj: Partition, invocation: Gio.DBusMethodInvocation, argFlags: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-flags", callback: (($obj: Partition, invocation: Gio.DBusMethodInvocation, argFlags: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-flags", invocation: Gio.DBusMethodInvocation, argFlags: number, argOptions: GLib.Variant): void
    on(sigName: "handle-set-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-name", callback: (($obj: Partition, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-name", callback: (($obj: Partition, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-name", invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-type", callback: (($obj: Partition, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-type", callback: (($obj: Partition, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-type", invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class PartitionTable {
    /* Properties of UDisks.PartitionTable */
    partitions: string[]
    type: string
    /* Methods of UDisks.PartitionTable */
    callCreatePartition(argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreatePartitionAndFormat(argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreatePartitionAndFormatFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outCreatedPartition */ string | null ]
    callCreatePartitionAndFormatSync(argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outCreatedPartition */ string | null ]
    callCreatePartitionFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outCreatedPartition */ string | null ]
    callCreatePartitionSync(argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outCreatedPartition */ string | null ]
    completeCreatePartition(invocation: Gio.DBusMethodInvocation, createdPartition: string): void
    completeCreatePartitionAndFormat(invocation: Gio.DBusMethodInvocation, createdPartition: string): void
    /* Virtual methods of UDisks.PartitionTable */
    vfuncHandleCreatePartition?(invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant): boolean
    vfuncHandleCreatePartitionAndFormat?(invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant): boolean
    /* Signals of UDisks.PartitionTable */
    connect(sigName: "handle-create-partition", callback: (($obj: PartitionTable, invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-partition", callback: (($obj: PartitionTable, invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-partition", invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-create-partition", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-partition", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-partition", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-partition-and-format", callback: (($obj: PartitionTable, invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-partition-and-format", callback: (($obj: PartitionTable, invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-partition-and-format", invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant): void
    on(sigName: "handle-create-partition-and-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-partition-and-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-partition-and-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class PhysicalVolume {
    /* Properties of UDisks.PhysicalVolume */
    freeSize: number
    size: number
    volumeGroup: string
    /* Methods of UDisks.PhysicalVolume */
    /* Virtual methods of UDisks.PhysicalVolume */
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class Swapspace {
    /* Properties of UDisks.Swapspace */
    active: boolean
    /* Methods of UDisks.Swapspace */
    callSetLabel(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetLabelFinish(res: Gio.AsyncResult): boolean
    callSetLabelSync(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callStart(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStartFinish(res: Gio.AsyncResult): boolean
    callStartSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callStop(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStopFinish(res: Gio.AsyncResult): boolean
    callStopSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeSetLabel(invocation: Gio.DBusMethodInvocation): void
    completeStart(invocation: Gio.DBusMethodInvocation): void
    completeStop(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of UDisks.Swapspace */
    vfuncHandleSetLabel?(invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant): boolean
    vfuncHandleStart?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleStop?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.Swapspace */
    connect(sigName: "handle-set-label", callback: (($obj: Swapspace, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-label", callback: (($obj: Swapspace, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-label", invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-start", callback: (($obj: Swapspace, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-start", callback: (($obj: Swapspace, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-start", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-stop", callback: (($obj: Swapspace, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-stop", callback: (($obj: Swapspace, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-stop", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class VDOVolume {
    /* Properties of UDisks.VDOVolume */
    compression: boolean
    compressionState: string
    deduplication: boolean
    indexState: string
    operatingMode: string
    usedSize: number
    vdoPool: string
    /* Methods of UDisks.VDOVolume */
    callEnableCompression(argEnable: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableCompressionFinish(res: Gio.AsyncResult): boolean
    callEnableCompressionSync(argEnable: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callEnableDeduplication(argEnable: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableDeduplicationFinish(res: Gio.AsyncResult): boolean
    callEnableDeduplicationSync(argEnable: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callGetStatistics(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetStatisticsFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outStats */ GLib.Variant | null ]
    callGetStatisticsSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outStats */ GLib.Variant | null ]
    callResizeLogical(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeLogicalFinish(res: Gio.AsyncResult): boolean
    callResizeLogicalSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callResizePhysical(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizePhysicalFinish(res: Gio.AsyncResult): boolean
    callResizePhysicalSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeEnableCompression(invocation: Gio.DBusMethodInvocation): void
    completeEnableDeduplication(invocation: Gio.DBusMethodInvocation): void
    completeGetStatistics(invocation: Gio.DBusMethodInvocation, stats: GLib.Variant): void
    completeResizeLogical(invocation: Gio.DBusMethodInvocation): void
    completeResizePhysical(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of UDisks.VDOVolume */
    vfuncHandleEnableCompression?(invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant): boolean
    vfuncHandleEnableDeduplication?(invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant): boolean
    vfuncHandleGetStatistics?(invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): boolean
    vfuncHandleResizeLogical?(invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): boolean
    vfuncHandleResizePhysical?(invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.VDOVolume */
    connect(sigName: "handle-enable-compression", callback: (($obj: VDOVolume, invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-enable-compression", callback: (($obj: VDOVolume, invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-enable-compression", invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-enable-compression", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-enable-compression", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-enable-compression", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-enable-deduplication", callback: (($obj: VDOVolume, invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-enable-deduplication", callback: (($obj: VDOVolume, invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-enable-deduplication", invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-enable-deduplication", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-enable-deduplication", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-enable-deduplication", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-get-statistics", callback: (($obj: VDOVolume, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-get-statistics", callback: (($obj: VDOVolume, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-get-statistics", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-get-statistics", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-get-statistics", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-get-statistics", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize-logical", callback: (($obj: VDOVolume, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize-logical", callback: (($obj: VDOVolume, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize-logical", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize-logical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize-logical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize-logical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize-physical", callback: (($obj: VDOVolume, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize-physical", callback: (($obj: VDOVolume, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize-physical", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize-physical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize-physical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize-physical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export class VolumeGroup {
    /* Properties of UDisks.VolumeGroup */
    extentSize: number
    freeSize: number
    name: string
    needsPolling: boolean
    size: number
    uuid: string
    /* Methods of UDisks.VolumeGroup */
    callAddDevice(argBlock: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAddDeviceFinish(res: Gio.AsyncResult): boolean
    callAddDeviceSync(argBlock: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCreatePlainVolume(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreatePlainVolumeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreatePlainVolumeSync(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateThinPoolVolume(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateThinPoolVolumeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateThinPoolVolumeSync(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateThinVolume(argName: string, argSize: number, argPool: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateThinVolumeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateThinVolumeSync(argName: string, argSize: number, argPool: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateVdoVolume(argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateVdoVolumeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateVdoVolumeSync(argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callDelete(argWipe: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argWipe: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callEmptyDevice(argBlock: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEmptyDeviceFinish(res: Gio.AsyncResult): boolean
    callEmptyDeviceSync(argBlock: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callPoll(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callPollFinish(res: Gio.AsyncResult): boolean
    callPollSync(cancellable?: Gio.Cancellable | null): boolean
    callRemoveDevice(argBlock: string, argWipe: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRemoveDeviceFinish(res: Gio.AsyncResult): boolean
    callRemoveDeviceSync(argBlock: string, argWipe: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRename(argNewName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRenameFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callRenameSync(argNewName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    completeAddDevice(invocation: Gio.DBusMethodInvocation): void
    completeCreatePlainVolume(invocation: Gio.DBusMethodInvocation, result: string): void
    completeCreateThinPoolVolume(invocation: Gio.DBusMethodInvocation, result: string): void
    completeCreateThinVolume(invocation: Gio.DBusMethodInvocation, result: string): void
    completeCreateVdoVolume(invocation: Gio.DBusMethodInvocation, result: string): void
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeEmptyDevice(invocation: Gio.DBusMethodInvocation): void
    completePoll(invocation: Gio.DBusMethodInvocation): void
    completeRemoveDevice(invocation: Gio.DBusMethodInvocation): void
    completeRename(invocation: Gio.DBusMethodInvocation, result: string): void
    /* Virtual methods of UDisks.VolumeGroup */
    vfuncHandleAddDevice?(invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant): boolean
    vfuncHandleCreatePlainVolume?(invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant): boolean
    vfuncHandleCreateThinPoolVolume?(invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant): boolean
    vfuncHandleCreateThinVolume?(invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argPool: string, argOptions: GLib.Variant): boolean
    vfuncHandleCreateVdoVolume?(invocation: Gio.DBusMethodInvocation, argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant): boolean
    vfuncHandleDelete?(invocation: Gio.DBusMethodInvocation, argWipe: boolean, argOptions: GLib.Variant): boolean
    vfuncHandleEmptyDevice?(invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant): boolean
    vfuncHandlePoll?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncHandleRemoveDevice?(invocation: Gio.DBusMethodInvocation, argBlock: string, argWipe: boolean, argOptions: GLib.Variant): boolean
    vfuncHandleRename?(invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant): boolean
    /* Signals of UDisks.VolumeGroup */
    connect(sigName: "handle-add-device", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-add-device", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-add-device", invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant): void
    on(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-plain-volume", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-plain-volume", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-plain-volume", invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-create-plain-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-plain-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-plain-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-thin-pool-volume", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-thin-pool-volume", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-thin-pool-volume", invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-create-thin-pool-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-thin-pool-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-thin-pool-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-thin-volume", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argPool: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-thin-volume", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argPool: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-thin-volume", invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argPool: string, argOptions: GLib.Variant): void
    on(sigName: "handle-create-thin-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-thin-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-thin-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-vdo-volume", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-vdo-volume", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-vdo-volume", invocation: Gio.DBusMethodInvocation, argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant): void
    on(sigName: "handle-create-vdo-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-vdo-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-vdo-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-delete", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argWipe: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-delete", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argWipe: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argWipe: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-empty-device", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-empty-device", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-empty-device", invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant): void
    on(sigName: "handle-empty-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-empty-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-empty-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-poll", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "handle-poll", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "handle-poll", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "handle-poll", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-poll", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-poll", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-remove-device", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argBlock: string, argWipe: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-remove-device", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argBlock: string, argWipe: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-remove-device", invocation: Gio.DBusMethodInvocation, argBlock: string, argWipe: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-rename", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-rename", callback: (($obj: VolumeGroup, invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-rename", invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    static name: string
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
export interface BlockBcacheProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class BlockBcacheProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.BlockBcache */
    blockSize: number
    bypassHits: number
    bypassMisses: number
    cacheSize: number
    cacheUsed: number
    hits: number
    misses: number
    mode: string
    state: string
    /* Fields of UDisks.BlockBcacheProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.BlockBcache */
    callBcacheDestroy(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callBcacheDestroyFinish(res: Gio.AsyncResult): boolean
    callBcacheDestroySync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetMode(argMode: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetModeFinish(res: Gio.AsyncResult): boolean
    callSetModeSync(argMode: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeBcacheDestroy(invocation: Gio.DBusMethodInvocation): void
    completeSetMode(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: BlockBcacheProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: BlockBcacheProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: BlockBcacheProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: BlockBcacheProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.BlockBcache */
    connect(sigName: "handle-bcache-destroy", callback: (($obj: BlockBcacheProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-bcache-destroy", callback: (($obj: BlockBcacheProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-bcache-destroy", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-bcache-destroy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-bcache-destroy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-bcache-destroy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-mode", callback: (($obj: BlockBcacheProxy, invocation: Gio.DBusMethodInvocation, argMode: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-mode", callback: (($obj: BlockBcacheProxy, invocation: Gio.DBusMethodInvocation, argMode: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-mode", invocation: Gio.DBusMethodInvocation, argMode: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block-size", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block-size", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bypass-hits", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bypass-hits", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bypass-hits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bypass-hits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bypass-hits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bypass-misses", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bypass-misses", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bypass-misses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bypass-misses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bypass-misses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cache-size", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cache-size", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cache-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cache-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cache-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cache-used", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cache-used", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cache-used", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cache-used", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cache-used", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hits", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hits", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::misses", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::misses", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::misses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::misses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::misses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mode", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: BlockBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: BlockBcacheProxy_ConstructProps)
    _init (config?: BlockBcacheProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): BlockBcacheProxy
    static newForBusFinish(res: Gio.AsyncResult): BlockBcacheProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): BlockBcacheProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): BlockBcacheProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface BlockBcacheSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class BlockBcacheSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.BlockBcache */
    blockSize: number
    bypassHits: number
    bypassMisses: number
    cacheSize: number
    cacheUsed: number
    hits: number
    misses: number
    mode: string
    state: string
    /* Fields of UDisks.BlockBcacheSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.BlockBcache */
    callBcacheDestroy(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callBcacheDestroyFinish(res: Gio.AsyncResult): boolean
    callBcacheDestroySync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetMode(argMode: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetModeFinish(res: Gio.AsyncResult): boolean
    callSetModeSync(argMode: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeBcacheDestroy(invocation: Gio.DBusMethodInvocation): void
    completeSetMode(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: BlockBcacheSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: BlockBcacheSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.BlockBcache */
    connect(sigName: "handle-bcache-destroy", callback: (($obj: BlockBcacheSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-bcache-destroy", callback: (($obj: BlockBcacheSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-bcache-destroy", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-bcache-destroy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-bcache-destroy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-bcache-destroy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-mode", callback: (($obj: BlockBcacheSkeleton, invocation: Gio.DBusMethodInvocation, argMode: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-mode", callback: (($obj: BlockBcacheSkeleton, invocation: Gio.DBusMethodInvocation, argMode: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-mode", invocation: Gio.DBusMethodInvocation, argMode: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block-size", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block-size", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bypass-hits", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bypass-hits", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bypass-hits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bypass-hits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bypass-hits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bypass-misses", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bypass-misses", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bypass-misses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bypass-misses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bypass-misses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cache-size", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cache-size", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cache-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cache-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cache-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cache-used", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cache-used", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cache-used", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cache-used", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cache-used", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hits", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hits", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hits", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::misses", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::misses", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::misses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::misses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::misses", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mode", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: BlockBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: BlockBcacheSkeleton_ConstructProps)
    _init (config?: BlockBcacheSkeleton_ConstructProps): void
    static new(): BlockBcacheSkeleton
    static $gtype: GObject.Type
}
export interface BlockLVM2Proxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class BlockLVM2Proxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.BlockLVM2 */
    logicalVolume: string
    /* Fields of UDisks.BlockLVM2Proxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.BlockLVM2 */
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: BlockLVM2Proxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: BlockLVM2Proxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: BlockLVM2Proxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: BlockLVM2Proxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: BlockLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BlockLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: BlockLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: BlockLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: BlockLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: BlockLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: BlockLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: BlockLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::logical-volume", callback: (($obj: BlockLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::logical-volume", callback: (($obj: BlockLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::logical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::logical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::logical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: BlockLVM2Proxy_ConstructProps)
    _init (config?: BlockLVM2Proxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): BlockLVM2Proxy
    static newForBusFinish(res: Gio.AsyncResult): BlockLVM2Proxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): BlockLVM2Proxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): BlockLVM2Proxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface BlockLVM2Skeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class BlockLVM2Skeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.BlockLVM2 */
    logicalVolume: string
    /* Fields of UDisks.BlockLVM2Skeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.BlockLVM2 */
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: BlockLVM2Skeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: BlockLVM2Skeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: BlockLVM2Skeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BlockLVM2Skeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: BlockLVM2Skeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: BlockLVM2Skeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::logical-volume", callback: (($obj: BlockLVM2Skeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::logical-volume", callback: (($obj: BlockLVM2Skeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::logical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::logical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::logical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: BlockLVM2Skeleton_ConstructProps)
    _init (config?: BlockLVM2Skeleton_ConstructProps): void
    static new(): BlockLVM2Skeleton
    static $gtype: GObject.Type
}
export interface BlockProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class BlockProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.Block */
    configuration: GLib.Variant
    cryptoBackingDevice: string
    device: string
    deviceNumber: number
    drive: string
    hintAuto: boolean
    hintIconName: string
    hintIgnore: boolean
    hintName: string
    hintPartitionable: boolean
    hintSymbolicIconName: string
    hintSystem: boolean
    id: string
    idLabel: string
    idType: string
    idUsage: string
    idUuid: string
    idVersion: string
    mdraid: string
    mdraidMember: string
    preferredDevice: string
    readOnly: boolean
    size: number
    symlinks: string[]
    userspaceMountOptions: string[]
    /* Fields of UDisks.BlockProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.Block */
    callAddConfigurationItem(argItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAddConfigurationItemFinish(res: Gio.AsyncResult): boolean
    callAddConfigurationItemSync(argItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callFormat(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFormatFinish(res: Gio.AsyncResult): boolean
    callFormatSync(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callGetSecretConfiguration(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetSecretConfigurationFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outConfiguration */ GLib.Variant | null ]
    callGetSecretConfigurationSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outConfiguration */ GLib.Variant | null ]
    callOpenDevice(argMode: string, argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callOpenDeviceFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList | null ]
    callOpenDeviceSync(argMode: string, argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList ]
    callOpenForBackup(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callOpenForBackupFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList | null ]
    callOpenForBackupSync(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList ]
    callOpenForBenchmark(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callOpenForBenchmarkFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList | null ]
    callOpenForBenchmarkSync(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList ]
    callOpenForRestore(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callOpenForRestoreFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList | null ]
    callOpenForRestoreSync(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList ]
    callRemoveConfigurationItem(argItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRemoveConfigurationItemFinish(res: Gio.AsyncResult): boolean
    callRemoveConfigurationItemSync(argItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRescan(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRescanFinish(res: Gio.AsyncResult): boolean
    callRescanSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callUpdateConfigurationItem(argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callUpdateConfigurationItemFinish(res: Gio.AsyncResult): boolean
    callUpdateConfigurationItemSync(argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeAddConfigurationItem(invocation: Gio.DBusMethodInvocation): void
    completeFormat(invocation: Gio.DBusMethodInvocation): void
    completeGetSecretConfiguration(invocation: Gio.DBusMethodInvocation, configuration: GLib.Variant): void
    completeOpenDevice(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, fd: GLib.Variant): void
    completeOpenForBackup(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, fd: GLib.Variant): void
    completeOpenForBenchmark(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, fd: GLib.Variant): void
    completeOpenForRestore(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, fd: GLib.Variant): void
    completeRemoveConfigurationItem(invocation: Gio.DBusMethodInvocation): void
    completeRescan(invocation: Gio.DBusMethodInvocation): void
    completeUpdateConfigurationItem(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: BlockProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: BlockProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: BlockProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: BlockProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Block */
    connect(sigName: "handle-add-configuration-item", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-add-configuration-item", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-add-configuration-item", invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-add-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-add-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-add-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-format", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-format", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-format", invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant): void
    on(sigName: "handle-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-get-secret-configuration", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-get-secret-configuration", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-get-secret-configuration", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-get-secret-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-get-secret-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-get-secret-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-open-device", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argMode: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-open-device", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argMode: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-open-device", invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argMode: string, argOptions: GLib.Variant): void
    on(sigName: "handle-open-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-open-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-open-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-open-for-backup", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-open-for-backup", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-open-for-backup", invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant): void
    on(sigName: "handle-open-for-backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-open-for-backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-open-for-backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-open-for-benchmark", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-open-for-benchmark", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-open-for-benchmark", invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant): void
    on(sigName: "handle-open-for-benchmark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-open-for-benchmark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-open-for-benchmark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-open-for-restore", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-open-for-restore", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-open-for-restore", invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant): void
    on(sigName: "handle-open-for-restore", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-open-for-restore", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-open-for-restore", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-remove-configuration-item", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-remove-configuration-item", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-remove-configuration-item", invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-remove-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-remove-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-remove-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-rescan", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-rescan", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-rescan", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-rescan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-rescan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-rescan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-update-configuration-item", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-update-configuration-item", callback: (($obj: BlockProxy, invocation: Gio.DBusMethodInvocation, argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-update-configuration-item", invocation: Gio.DBusMethodInvocation, argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-update-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-update-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-update-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::configuration", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::configuration", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::crypto-backing-device", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::crypto-backing-device", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::crypto-backing-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::crypto-backing-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::crypto-backing-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-number", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-number", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::drive", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::drive", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::drive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::drive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::drive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-auto", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-auto", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-auto", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-auto", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-auto", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-icon-name", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-icon-name", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-ignore", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-ignore", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-ignore", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-ignore", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-ignore", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-name", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-name", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-partitionable", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-partitionable", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-partitionable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-partitionable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-partitionable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-symbolic-icon-name", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-symbolic-icon-name", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-symbolic-icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-symbolic-icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-symbolic-icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-system", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-system", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-system", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-system", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-system", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id-label", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id-label", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id-type", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id-type", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id-usage", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id-usage", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id-usage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id-usage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id-usage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id-uuid", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id-uuid", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id-uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id-uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id-uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id-version", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id-version", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mdraid", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mdraid", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mdraid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mdraid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mdraid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mdraid-member", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mdraid-member", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mdraid-member", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mdraid-member", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mdraid-member", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::preferred-device", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preferred-device", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::preferred-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::preferred-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::preferred-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::symlinks", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::symlinks", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::symlinks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::symlinks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::symlinks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::userspace-mount-options", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::userspace-mount-options", callback: (($obj: BlockProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::userspace-mount-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::userspace-mount-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::userspace-mount-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: BlockProxy_ConstructProps)
    _init (config?: BlockProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): BlockProxy
    static newForBusFinish(res: Gio.AsyncResult): BlockProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): BlockProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): BlockProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface BlockSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class BlockSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.Block */
    configuration: GLib.Variant
    cryptoBackingDevice: string
    device: string
    deviceNumber: number
    drive: string
    hintAuto: boolean
    hintIconName: string
    hintIgnore: boolean
    hintName: string
    hintPartitionable: boolean
    hintSymbolicIconName: string
    hintSystem: boolean
    id: string
    idLabel: string
    idType: string
    idUsage: string
    idUuid: string
    idVersion: string
    mdraid: string
    mdraidMember: string
    preferredDevice: string
    readOnly: boolean
    size: number
    symlinks: string[]
    userspaceMountOptions: string[]
    /* Fields of UDisks.BlockSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.Block */
    callAddConfigurationItem(argItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAddConfigurationItemFinish(res: Gio.AsyncResult): boolean
    callAddConfigurationItemSync(argItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callFormat(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFormatFinish(res: Gio.AsyncResult): boolean
    callFormatSync(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callGetSecretConfiguration(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetSecretConfigurationFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outConfiguration */ GLib.Variant | null ]
    callGetSecretConfigurationSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outConfiguration */ GLib.Variant | null ]
    callOpenDevice(argMode: string, argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callOpenDeviceFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList | null ]
    callOpenDeviceSync(argMode: string, argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList ]
    callOpenForBackup(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callOpenForBackupFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList | null ]
    callOpenForBackupSync(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList ]
    callOpenForBenchmark(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callOpenForBenchmarkFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList | null ]
    callOpenForBenchmarkSync(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList ]
    callOpenForRestore(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callOpenForRestoreFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList | null ]
    callOpenForRestoreSync(argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outFd */ GLib.Variant | null, /* outFdList */ Gio.UnixFDList ]
    callRemoveConfigurationItem(argItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRemoveConfigurationItemFinish(res: Gio.AsyncResult): boolean
    callRemoveConfigurationItemSync(argItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRescan(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRescanFinish(res: Gio.AsyncResult): boolean
    callRescanSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callUpdateConfigurationItem(argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callUpdateConfigurationItemFinish(res: Gio.AsyncResult): boolean
    callUpdateConfigurationItemSync(argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeAddConfigurationItem(invocation: Gio.DBusMethodInvocation): void
    completeFormat(invocation: Gio.DBusMethodInvocation): void
    completeGetSecretConfiguration(invocation: Gio.DBusMethodInvocation, configuration: GLib.Variant): void
    completeOpenDevice(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, fd: GLib.Variant): void
    completeOpenForBackup(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, fd: GLib.Variant): void
    completeOpenForBenchmark(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, fd: GLib.Variant): void
    completeOpenForRestore(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, fd: GLib.Variant): void
    completeRemoveConfigurationItem(invocation: Gio.DBusMethodInvocation): void
    completeRescan(invocation: Gio.DBusMethodInvocation): void
    completeUpdateConfigurationItem(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Block */
    connect(sigName: "handle-add-configuration-item", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-add-configuration-item", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-add-configuration-item", invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-add-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-add-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-add-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-format", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-format", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-format", invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant): void
    on(sigName: "handle-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-get-secret-configuration", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-get-secret-configuration", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-get-secret-configuration", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-get-secret-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-get-secret-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-get-secret-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-open-device", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argMode: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-open-device", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argMode: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-open-device", invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argMode: string, argOptions: GLib.Variant): void
    on(sigName: "handle-open-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-open-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-open-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-open-for-backup", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-open-for-backup", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-open-for-backup", invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant): void
    on(sigName: "handle-open-for-backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-open-for-backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-open-for-backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-open-for-benchmark", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-open-for-benchmark", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-open-for-benchmark", invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant): void
    on(sigName: "handle-open-for-benchmark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-open-for-benchmark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-open-for-benchmark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-open-for-restore", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-open-for-restore", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-open-for-restore", invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argOptions: GLib.Variant): void
    on(sigName: "handle-open-for-restore", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-open-for-restore", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-open-for-restore", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-remove-configuration-item", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-remove-configuration-item", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-remove-configuration-item", invocation: Gio.DBusMethodInvocation, argItem: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-remove-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-remove-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-remove-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-rescan", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-rescan", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-rescan", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-rescan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-rescan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-rescan", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-update-configuration-item", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-update-configuration-item", callback: (($obj: BlockSkeleton, invocation: Gio.DBusMethodInvocation, argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-update-configuration-item", invocation: Gio.DBusMethodInvocation, argOldItem: GLib.Variant, argNewItem: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-update-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-update-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-update-configuration-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::configuration", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::configuration", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::crypto-backing-device", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::crypto-backing-device", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::crypto-backing-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::crypto-backing-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::crypto-backing-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-number", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-number", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::drive", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::drive", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::drive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::drive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::drive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-auto", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-auto", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-auto", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-auto", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-auto", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-icon-name", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-icon-name", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-ignore", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-ignore", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-ignore", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-ignore", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-ignore", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-name", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-name", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-partitionable", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-partitionable", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-partitionable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-partitionable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-partitionable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-symbolic-icon-name", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-symbolic-icon-name", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-symbolic-icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-symbolic-icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-symbolic-icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-system", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-system", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-system", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-system", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-system", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id-label", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id-label", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id-type", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id-type", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id-usage", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id-usage", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id-usage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id-usage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id-usage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id-uuid", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id-uuid", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id-uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id-uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id-uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id-version", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id-version", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mdraid", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mdraid", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mdraid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mdraid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mdraid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mdraid-member", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mdraid-member", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mdraid-member", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mdraid-member", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mdraid-member", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::preferred-device", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preferred-device", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::preferred-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::preferred-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::preferred-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::symlinks", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::symlinks", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::symlinks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::symlinks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::symlinks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::userspace-mount-options", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::userspace-mount-options", callback: (($obj: BlockSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::userspace-mount-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::userspace-mount-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::userspace-mount-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: BlockSkeleton_ConstructProps)
    _init (config?: BlockSkeleton_ConstructProps): void
    static new(): BlockSkeleton
    static $gtype: GObject.Type
}
export interface BlockZRAMProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class BlockZRAMProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.BlockZRAM */
    active: boolean
    compAlgorithm: string
    comprDataSize: number
    disksize: number
    invalidIo: number
    maxCompStreams: number
    memUsedTotal: number
    numReads: number
    numWrites: number
    origDataSize: number
    zeroPages: number
    /* Fields of UDisks.BlockZRAMProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.BlockZRAM */
    callActivate(argPriority: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateFinish(res: Gio.AsyncResult): boolean
    callActivateLabeled(argPriority: number, argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateLabeledFinish(res: Gio.AsyncResult): boolean
    callActivateLabeledSync(argPriority: number, argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callActivateSync(argPriority: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callDeactivate(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeactivateFinish(res: Gio.AsyncResult): boolean
    callDeactivateSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRefresh(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRefreshFinish(res: Gio.AsyncResult): boolean
    callRefreshSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeActivate(invocation: Gio.DBusMethodInvocation): void
    completeActivateLabeled(invocation: Gio.DBusMethodInvocation): void
    completeDeactivate(invocation: Gio.DBusMethodInvocation): void
    completeRefresh(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: BlockZRAMProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: BlockZRAMProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: BlockZRAMProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: BlockZRAMProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.BlockZRAM */
    connect(sigName: "handle-activate", callback: (($obj: BlockZRAMProxy, invocation: Gio.DBusMethodInvocation, argPriority: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-activate", callback: (($obj: BlockZRAMProxy, invocation: Gio.DBusMethodInvocation, argPriority: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-activate", invocation: Gio.DBusMethodInvocation, argPriority: number, argOptions: GLib.Variant): void
    on(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-activate-labeled", callback: (($obj: BlockZRAMProxy, invocation: Gio.DBusMethodInvocation, argPriority: number, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-activate-labeled", callback: (($obj: BlockZRAMProxy, invocation: Gio.DBusMethodInvocation, argPriority: number, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-activate-labeled", invocation: Gio.DBusMethodInvocation, argPriority: number, argLabel: string, argOptions: GLib.Variant): void
    on(sigName: "handle-activate-labeled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-activate-labeled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-activate-labeled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-deactivate", callback: (($obj: BlockZRAMProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-deactivate", callback: (($obj: BlockZRAMProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-deactivate", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-refresh", callback: (($obj: BlockZRAMProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-refresh", callback: (($obj: BlockZRAMProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-refresh", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-refresh", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-refresh", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-refresh", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::comp-algorithm", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::comp-algorithm", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::comp-algorithm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::comp-algorithm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::comp-algorithm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compr-data-size", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compr-data-size", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compr-data-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compr-data-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compr-data-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disksize", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disksize", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disksize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disksize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disksize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::invalid-io", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::invalid-io", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::invalid-io", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::invalid-io", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::invalid-io", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-comp-streams", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-comp-streams", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-comp-streams", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-comp-streams", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-comp-streams", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mem-used-total", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mem-used-total", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mem-used-total", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mem-used-total", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mem-used-total", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::num-reads", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::num-reads", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::num-reads", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::num-reads", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::num-reads", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::num-writes", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::num-writes", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::num-writes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::num-writes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::num-writes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::orig-data-size", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::orig-data-size", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::orig-data-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::orig-data-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::orig-data-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::zero-pages", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::zero-pages", callback: (($obj: BlockZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::zero-pages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::zero-pages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::zero-pages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: BlockZRAMProxy_ConstructProps)
    _init (config?: BlockZRAMProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): BlockZRAMProxy
    static newForBusFinish(res: Gio.AsyncResult): BlockZRAMProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): BlockZRAMProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): BlockZRAMProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface BlockZRAMSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class BlockZRAMSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.BlockZRAM */
    active: boolean
    compAlgorithm: string
    comprDataSize: number
    disksize: number
    invalidIo: number
    maxCompStreams: number
    memUsedTotal: number
    numReads: number
    numWrites: number
    origDataSize: number
    zeroPages: number
    /* Fields of UDisks.BlockZRAMSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.BlockZRAM */
    callActivate(argPriority: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateFinish(res: Gio.AsyncResult): boolean
    callActivateLabeled(argPriority: number, argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateLabeledFinish(res: Gio.AsyncResult): boolean
    callActivateLabeledSync(argPriority: number, argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callActivateSync(argPriority: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callDeactivate(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeactivateFinish(res: Gio.AsyncResult): boolean
    callDeactivateSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRefresh(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRefreshFinish(res: Gio.AsyncResult): boolean
    callRefreshSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeActivate(invocation: Gio.DBusMethodInvocation): void
    completeActivateLabeled(invocation: Gio.DBusMethodInvocation): void
    completeDeactivate(invocation: Gio.DBusMethodInvocation): void
    completeRefresh(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: BlockZRAMSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: BlockZRAMSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.BlockZRAM */
    connect(sigName: "handle-activate", callback: (($obj: BlockZRAMSkeleton, invocation: Gio.DBusMethodInvocation, argPriority: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-activate", callback: (($obj: BlockZRAMSkeleton, invocation: Gio.DBusMethodInvocation, argPriority: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-activate", invocation: Gio.DBusMethodInvocation, argPriority: number, argOptions: GLib.Variant): void
    on(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-activate-labeled", callback: (($obj: BlockZRAMSkeleton, invocation: Gio.DBusMethodInvocation, argPriority: number, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-activate-labeled", callback: (($obj: BlockZRAMSkeleton, invocation: Gio.DBusMethodInvocation, argPriority: number, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-activate-labeled", invocation: Gio.DBusMethodInvocation, argPriority: number, argLabel: string, argOptions: GLib.Variant): void
    on(sigName: "handle-activate-labeled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-activate-labeled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-activate-labeled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-deactivate", callback: (($obj: BlockZRAMSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-deactivate", callback: (($obj: BlockZRAMSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-deactivate", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-refresh", callback: (($obj: BlockZRAMSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-refresh", callback: (($obj: BlockZRAMSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-refresh", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-refresh", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-refresh", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-refresh", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::comp-algorithm", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::comp-algorithm", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::comp-algorithm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::comp-algorithm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::comp-algorithm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compr-data-size", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compr-data-size", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compr-data-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compr-data-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compr-data-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disksize", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disksize", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disksize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disksize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disksize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::invalid-io", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::invalid-io", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::invalid-io", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::invalid-io", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::invalid-io", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-comp-streams", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-comp-streams", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-comp-streams", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-comp-streams", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-comp-streams", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mem-used-total", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mem-used-total", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mem-used-total", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mem-used-total", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mem-used-total", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::num-reads", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::num-reads", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::num-reads", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::num-reads", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::num-reads", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::num-writes", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::num-writes", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::num-writes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::num-writes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::num-writes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::orig-data-size", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::orig-data-size", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::orig-data-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::orig-data-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::orig-data-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::zero-pages", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::zero-pages", callback: (($obj: BlockZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::zero-pages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::zero-pages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::zero-pages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: BlockZRAMSkeleton_ConstructProps)
    _init (config?: BlockZRAMSkeleton_ConstructProps): void
    static new(): BlockZRAMSkeleton
    static $gtype: GObject.Type
}
export interface Client_ConstructProps extends GObject.Object_ConstructProps {
    busConnection?: Gio.DBusConnection
}
export class Client {
    /* Properties of UDisks.Client */
    readonly manager: Manager
    readonly objectManager: Gio.DBusObjectManager
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of UDisks.Client */
    getAllBlocksForMdraid(raid: MDRaid): Block[]
    getBlockForDev(blockDeviceNumber: number): Block
    getBlockForDrive(drive: Drive, getPhysical: boolean): Block
    getBlockForLabel(label: string): Block[]
    getBlockForMdraid(raid: MDRaid): Block
    getBlockForUuid(uuid: string): Block[]
    getCleartextBlock(block: Block): Block
    getDriveForBlock(block: Block): Drive
    getDriveInfo(drive: Drive): [ /* outName */ string | null, /* outDescription */ string | null, /* outDriveIcon */ Gio.Icon | null, /* outMediaDescription */ string | null, /* outMediaIcon */ Gio.Icon | null ]
    getDriveSiblings(drive: Drive): Drive[]
    getIdForDisplay(usage: string, type: string, version: string, longString: boolean): string
    getJobDescription(job: Job): string
    getJobsForObject(object: Object): Job[]
    getLoopForBlock(block: Block): Loop
    getManager(): Manager
    getMdraidForBlock(block: Block): MDRaid
    getMediaCompatForDisplay(mediaCompat: string): string
    getMembersForMdraid(raid: MDRaid): Block[]
    getObject(objectPath: string): Object
    getObjectInfo(object: Object): ObjectInfo
    getObjectManager(): Gio.DBusObjectManager
    getPartitionInfo(partition: Partition): string
    getPartitionTable(partition: Partition): PartitionTable
    getPartitionTableSubtypeForDisplay(partitionTableType: string, partitionTableSubtype: string): string
    getPartitionTableSubtypes(partitionTableType: string): string[]
    getPartitionTableTypeForDisplay(partitionTableType: string): string
    getPartitionTypeAndSubtypeForDisplay(partitionTableType: string, partitionTableSubtype: string, partitionType: string): string
    getPartitionTypeForDisplay(partitionTableType: string, partitionType: string): string
    getPartitionTypeInfos(partitionTableType: string, partitionTableSubtype?: string | null): PartitionTypeInfo[]
    getPartitions(table: PartitionTable): Partition[]
    getSizeForDisplay(size: number, usePow2: boolean, longString: boolean): string
    peekObject(objectPath: string): Object
    queueChanged(): void
    settle(): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of UDisks.Client */
    connect(sigName: "changed", callback: (($obj: Client) => void)): number
    connect_after(sigName: "changed", callback: (($obj: Client) => void)): number
    emit(sigName: "changed"): void
    on(sigName: "changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manager", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manager", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::object-manager", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-manager", callback: (($obj: Client, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::object-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::object-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::object-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Client_ConstructProps)
    _init (config?: Client_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): Client
    static newForConnectionFinish(res: Gio.AsyncResult): Client
    static newSync(cancellable?: Gio.Cancellable | null): Client
    static getJobDescriptionFromOperation(operation: string): string
    static newForConnection(connection?: Gio.DBusConnection | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface DriveAtaProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class DriveAtaProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.DriveAta */
    aamEnabled: boolean
    aamSupported: boolean
    aamVendorRecommendedValue: number
    apmEnabled: boolean
    apmSupported: boolean
    pmEnabled: boolean
    pmSupported: boolean
    readLookaheadEnabled: boolean
    readLookaheadSupported: boolean
    securityEnhancedEraseUnitMinutes: number
    securityEraseUnitMinutes: number
    securityFrozen: boolean
    smartEnabled: boolean
    smartFailing: boolean
    smartNumAttributesFailedInThePast: number
    smartNumAttributesFailing: number
    smartNumBadSectors: number
    smartPowerOnSeconds: number
    smartSelftestPercentRemaining: number
    smartSelftestStatus: string
    smartSupported: boolean
    smartTemperature: number
    smartUpdated: number
    writeCacheEnabled: boolean
    writeCacheSupported: boolean
    /* Fields of UDisks.DriveAtaProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.DriveAta */
    callPmGetState(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callPmGetStateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outState */ number | null ]
    callPmGetStateSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outState */ number | null ]
    callPmStandby(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callPmStandbyFinish(res: Gio.AsyncResult): boolean
    callPmStandbySync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callPmWakeup(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callPmWakeupFinish(res: Gio.AsyncResult): boolean
    callPmWakeupSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSecurityEraseUnit(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSecurityEraseUnitFinish(res: Gio.AsyncResult): boolean
    callSecurityEraseUnitSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSmartGetAttributes(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSmartGetAttributesFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outAttributes */ GLib.Variant | null ]
    callSmartGetAttributesSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outAttributes */ GLib.Variant | null ]
    callSmartSelftestAbort(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSmartSelftestAbortFinish(res: Gio.AsyncResult): boolean
    callSmartSelftestAbortSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSmartSelftestStart(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSmartSelftestStartFinish(res: Gio.AsyncResult): boolean
    callSmartSelftestStartSync(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSmartSetEnabled(argValue: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSmartSetEnabledFinish(res: Gio.AsyncResult): boolean
    callSmartSetEnabledSync(argValue: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSmartUpdate(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSmartUpdateFinish(res: Gio.AsyncResult): boolean
    callSmartUpdateSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completePmGetState(invocation: Gio.DBusMethodInvocation, state: number): void
    completePmStandby(invocation: Gio.DBusMethodInvocation): void
    completePmWakeup(invocation: Gio.DBusMethodInvocation): void
    completeSecurityEraseUnit(invocation: Gio.DBusMethodInvocation): void
    completeSmartGetAttributes(invocation: Gio.DBusMethodInvocation, attributes: GLib.Variant): void
    completeSmartSelftestAbort(invocation: Gio.DBusMethodInvocation): void
    completeSmartSelftestStart(invocation: Gio.DBusMethodInvocation): void
    completeSmartSetEnabled(invocation: Gio.DBusMethodInvocation): void
    completeSmartUpdate(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: DriveAtaProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: DriveAtaProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: DriveAtaProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: DriveAtaProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.DriveAta */
    connect(sigName: "handle-pm-get-state", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-pm-get-state", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-pm-get-state", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-pm-get-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-pm-get-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-pm-get-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-pm-standby", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-pm-standby", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-pm-standby", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-pm-standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-pm-standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-pm-standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-pm-wakeup", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-pm-wakeup", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-pm-wakeup", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-pm-wakeup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-pm-wakeup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-pm-wakeup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-security-erase-unit", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-security-erase-unit", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-security-erase-unit", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-security-erase-unit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-security-erase-unit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-security-erase-unit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-smart-get-attributes", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-smart-get-attributes", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-smart-get-attributes", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-smart-get-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-smart-get-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-smart-get-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-smart-selftest-abort", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-smart-selftest-abort", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-smart-selftest-abort", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-smart-selftest-abort", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-smart-selftest-abort", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-smart-selftest-abort", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-smart-selftest-start", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-smart-selftest-start", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-smart-selftest-start", invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant): void
    on(sigName: "handle-smart-selftest-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-smart-selftest-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-smart-selftest-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-smart-set-enabled", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-smart-set-enabled", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-smart-set-enabled", invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-smart-set-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-smart-set-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-smart-set-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-smart-update", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-smart-update", callback: (($obj: DriveAtaProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-smart-update", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-smart-update", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-smart-update", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-smart-update", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::aam-enabled", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::aam-enabled", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::aam-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::aam-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::aam-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::aam-supported", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::aam-supported", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::aam-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::aam-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::aam-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::aam-vendor-recommended-value", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::aam-vendor-recommended-value", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::aam-vendor-recommended-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::aam-vendor-recommended-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::aam-vendor-recommended-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::apm-enabled", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::apm-enabled", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::apm-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::apm-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::apm-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::apm-supported", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::apm-supported", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::apm-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::apm-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::apm-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pm-enabled", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pm-enabled", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pm-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pm-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pm-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pm-supported", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pm-supported", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pm-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pm-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pm-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-lookahead-enabled", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-lookahead-enabled", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-lookahead-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-lookahead-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-lookahead-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-lookahead-supported", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-lookahead-supported", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-lookahead-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-lookahead-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-lookahead-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::security-enhanced-erase-unit-minutes", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::security-enhanced-erase-unit-minutes", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::security-enhanced-erase-unit-minutes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::security-enhanced-erase-unit-minutes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::security-enhanced-erase-unit-minutes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::security-erase-unit-minutes", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::security-erase-unit-minutes", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::security-erase-unit-minutes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::security-erase-unit-minutes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::security-erase-unit-minutes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::security-frozen", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::security-frozen", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::security-frozen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::security-frozen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::security-frozen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-enabled", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-enabled", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-failing", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-failing", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-failing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-failing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-failing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-num-attributes-failed-in-the-past", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-num-attributes-failed-in-the-past", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-num-attributes-failed-in-the-past", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-num-attributes-failed-in-the-past", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-num-attributes-failed-in-the-past", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-num-attributes-failing", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-num-attributes-failing", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-num-attributes-failing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-num-attributes-failing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-num-attributes-failing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-num-bad-sectors", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-num-bad-sectors", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-num-bad-sectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-num-bad-sectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-num-bad-sectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-power-on-seconds", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-power-on-seconds", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-power-on-seconds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-power-on-seconds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-power-on-seconds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-selftest-percent-remaining", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-selftest-percent-remaining", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-selftest-percent-remaining", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-selftest-percent-remaining", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-selftest-percent-remaining", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-selftest-status", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-selftest-status", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-selftest-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-selftest-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-selftest-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-supported", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-supported", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-temperature", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-temperature", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-temperature", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-temperature", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-temperature", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-updated", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-updated", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::write-cache-enabled", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::write-cache-enabled", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::write-cache-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::write-cache-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::write-cache-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::write-cache-supported", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::write-cache-supported", callback: (($obj: DriveAtaProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::write-cache-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::write-cache-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::write-cache-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DriveAtaProxy_ConstructProps)
    _init (config?: DriveAtaProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): DriveAtaProxy
    static newForBusFinish(res: Gio.AsyncResult): DriveAtaProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): DriveAtaProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): DriveAtaProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface DriveAtaSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class DriveAtaSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.DriveAta */
    aamEnabled: boolean
    aamSupported: boolean
    aamVendorRecommendedValue: number
    apmEnabled: boolean
    apmSupported: boolean
    pmEnabled: boolean
    pmSupported: boolean
    readLookaheadEnabled: boolean
    readLookaheadSupported: boolean
    securityEnhancedEraseUnitMinutes: number
    securityEraseUnitMinutes: number
    securityFrozen: boolean
    smartEnabled: boolean
    smartFailing: boolean
    smartNumAttributesFailedInThePast: number
    smartNumAttributesFailing: number
    smartNumBadSectors: number
    smartPowerOnSeconds: number
    smartSelftestPercentRemaining: number
    smartSelftestStatus: string
    smartSupported: boolean
    smartTemperature: number
    smartUpdated: number
    writeCacheEnabled: boolean
    writeCacheSupported: boolean
    /* Fields of UDisks.DriveAtaSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.DriveAta */
    callPmGetState(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callPmGetStateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outState */ number | null ]
    callPmGetStateSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outState */ number | null ]
    callPmStandby(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callPmStandbyFinish(res: Gio.AsyncResult): boolean
    callPmStandbySync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callPmWakeup(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callPmWakeupFinish(res: Gio.AsyncResult): boolean
    callPmWakeupSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSecurityEraseUnit(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSecurityEraseUnitFinish(res: Gio.AsyncResult): boolean
    callSecurityEraseUnitSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSmartGetAttributes(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSmartGetAttributesFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outAttributes */ GLib.Variant | null ]
    callSmartGetAttributesSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outAttributes */ GLib.Variant | null ]
    callSmartSelftestAbort(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSmartSelftestAbortFinish(res: Gio.AsyncResult): boolean
    callSmartSelftestAbortSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSmartSelftestStart(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSmartSelftestStartFinish(res: Gio.AsyncResult): boolean
    callSmartSelftestStartSync(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSmartSetEnabled(argValue: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSmartSetEnabledFinish(res: Gio.AsyncResult): boolean
    callSmartSetEnabledSync(argValue: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSmartUpdate(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSmartUpdateFinish(res: Gio.AsyncResult): boolean
    callSmartUpdateSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completePmGetState(invocation: Gio.DBusMethodInvocation, state: number): void
    completePmStandby(invocation: Gio.DBusMethodInvocation): void
    completePmWakeup(invocation: Gio.DBusMethodInvocation): void
    completeSecurityEraseUnit(invocation: Gio.DBusMethodInvocation): void
    completeSmartGetAttributes(invocation: Gio.DBusMethodInvocation, attributes: GLib.Variant): void
    completeSmartSelftestAbort(invocation: Gio.DBusMethodInvocation): void
    completeSmartSelftestStart(invocation: Gio.DBusMethodInvocation): void
    completeSmartSetEnabled(invocation: Gio.DBusMethodInvocation): void
    completeSmartUpdate(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.DriveAta */
    connect(sigName: "handle-pm-get-state", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-pm-get-state", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-pm-get-state", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-pm-get-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-pm-get-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-pm-get-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-pm-standby", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-pm-standby", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-pm-standby", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-pm-standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-pm-standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-pm-standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-pm-wakeup", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-pm-wakeup", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-pm-wakeup", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-pm-wakeup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-pm-wakeup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-pm-wakeup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-security-erase-unit", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-security-erase-unit", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-security-erase-unit", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-security-erase-unit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-security-erase-unit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-security-erase-unit", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-smart-get-attributes", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-smart-get-attributes", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-smart-get-attributes", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-smart-get-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-smart-get-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-smart-get-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-smart-selftest-abort", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-smart-selftest-abort", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-smart-selftest-abort", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-smart-selftest-abort", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-smart-selftest-abort", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-smart-selftest-abort", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-smart-selftest-start", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-smart-selftest-start", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-smart-selftest-start", invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant): void
    on(sigName: "handle-smart-selftest-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-smart-selftest-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-smart-selftest-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-smart-set-enabled", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-smart-set-enabled", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-smart-set-enabled", invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-smart-set-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-smart-set-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-smart-set-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-smart-update", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-smart-update", callback: (($obj: DriveAtaSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-smart-update", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-smart-update", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-smart-update", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-smart-update", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::aam-enabled", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::aam-enabled", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::aam-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::aam-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::aam-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::aam-supported", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::aam-supported", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::aam-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::aam-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::aam-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::aam-vendor-recommended-value", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::aam-vendor-recommended-value", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::aam-vendor-recommended-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::aam-vendor-recommended-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::aam-vendor-recommended-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::apm-enabled", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::apm-enabled", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::apm-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::apm-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::apm-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::apm-supported", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::apm-supported", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::apm-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::apm-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::apm-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pm-enabled", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pm-enabled", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pm-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pm-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pm-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pm-supported", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pm-supported", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pm-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pm-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pm-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-lookahead-enabled", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-lookahead-enabled", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-lookahead-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-lookahead-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-lookahead-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-lookahead-supported", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-lookahead-supported", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-lookahead-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-lookahead-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-lookahead-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::security-enhanced-erase-unit-minutes", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::security-enhanced-erase-unit-minutes", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::security-enhanced-erase-unit-minutes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::security-enhanced-erase-unit-minutes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::security-enhanced-erase-unit-minutes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::security-erase-unit-minutes", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::security-erase-unit-minutes", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::security-erase-unit-minutes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::security-erase-unit-minutes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::security-erase-unit-minutes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::security-frozen", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::security-frozen", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::security-frozen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::security-frozen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::security-frozen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-enabled", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-enabled", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-failing", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-failing", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-failing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-failing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-failing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-num-attributes-failed-in-the-past", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-num-attributes-failed-in-the-past", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-num-attributes-failed-in-the-past", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-num-attributes-failed-in-the-past", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-num-attributes-failed-in-the-past", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-num-attributes-failing", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-num-attributes-failing", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-num-attributes-failing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-num-attributes-failing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-num-attributes-failing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-num-bad-sectors", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-num-bad-sectors", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-num-bad-sectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-num-bad-sectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-num-bad-sectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-power-on-seconds", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-power-on-seconds", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-power-on-seconds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-power-on-seconds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-power-on-seconds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-selftest-percent-remaining", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-selftest-percent-remaining", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-selftest-percent-remaining", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-selftest-percent-remaining", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-selftest-percent-remaining", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-selftest-status", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-selftest-status", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-selftest-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-selftest-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-selftest-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-supported", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-supported", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-temperature", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-temperature", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-temperature", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-temperature", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-temperature", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-updated", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-updated", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-updated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::write-cache-enabled", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::write-cache-enabled", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::write-cache-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::write-cache-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::write-cache-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::write-cache-supported", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::write-cache-supported", callback: (($obj: DriveAtaSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::write-cache-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::write-cache-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::write-cache-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DriveAtaSkeleton_ConstructProps)
    _init (config?: DriveAtaSkeleton_ConstructProps): void
    static new(): DriveAtaSkeleton
    static $gtype: GObject.Type
}
export interface DriveProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class DriveProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.Drive */
    canPowerOff: boolean
    configuration: GLib.Variant
    connectionBus: string
    ejectable: boolean
    id: string
    media: string
    mediaAvailable: boolean
    mediaChangeDetected: boolean
    mediaCompatibility: string[]
    mediaRemovable: boolean
    model: string
    optical: boolean
    opticalBlank: boolean
    opticalNumAudioTracks: number
    opticalNumDataTracks: number
    opticalNumSessions: number
    opticalNumTracks: number
    removable: boolean
    revision: string
    rotationRate: number
    seat: string
    serial: string
    siblingId: string
    size: number
    sortKey: string
    timeDetected: number
    timeMediaDetected: number
    vendor: string
    wwn: string
    /* Fields of UDisks.DriveProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.Drive */
    callEject(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEjectFinish(res: Gio.AsyncResult): boolean
    callEjectSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callPowerOff(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callPowerOffFinish(res: Gio.AsyncResult): boolean
    callPowerOffSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetConfiguration(argValue: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetConfigurationFinish(res: Gio.AsyncResult): boolean
    callSetConfigurationSync(argValue: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeEject(invocation: Gio.DBusMethodInvocation): void
    completePowerOff(invocation: Gio.DBusMethodInvocation): void
    completeSetConfiguration(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: DriveProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: DriveProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: DriveProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: DriveProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Drive */
    connect(sigName: "handle-eject", callback: (($obj: DriveProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-eject", callback: (($obj: DriveProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-eject", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-eject", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-eject", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-eject", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-power-off", callback: (($obj: DriveProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-power-off", callback: (($obj: DriveProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-power-off", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-power-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-power-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-power-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-configuration", callback: (($obj: DriveProxy, invocation: Gio.DBusMethodInvocation, argValue: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-configuration", callback: (($obj: DriveProxy, invocation: Gio.DBusMethodInvocation, argValue: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-configuration", invocation: Gio.DBusMethodInvocation, argValue: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-set-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-power-off", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-power-off", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-power-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-power-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-power-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::configuration", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::configuration", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connection-bus", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-bus", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connection-bus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connection-bus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connection-bus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ejectable", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ejectable", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ejectable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ejectable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ejectable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media-available", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-available", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media-available", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media-available", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media-available", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media-change-detected", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-change-detected", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media-change-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media-change-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media-change-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media-compatibility", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-compatibility", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media-compatibility", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media-compatibility", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media-compatibility", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media-removable", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-removable", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media-removable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media-removable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media-removable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::model", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::model", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::optical", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::optical", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::optical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::optical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::optical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::optical-blank", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::optical-blank", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::optical-blank", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::optical-blank", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::optical-blank", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::optical-num-audio-tracks", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::optical-num-audio-tracks", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::optical-num-audio-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::optical-num-audio-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::optical-num-audio-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::optical-num-data-tracks", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::optical-num-data-tracks", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::optical-num-data-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::optical-num-data-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::optical-num-data-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::optical-num-sessions", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::optical-num-sessions", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::optical-num-sessions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::optical-num-sessions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::optical-num-sessions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::optical-num-tracks", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::optical-num-tracks", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::optical-num-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::optical-num-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::optical-num-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::removable", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::removable", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::removable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::removable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::removable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::revision", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::revision", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rotation-rate", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-rate", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rotation-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rotation-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rotation-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::seat", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::seat", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::seat", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::seat", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::seat", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serial", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serial", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serial", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serial", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serial", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sibling-id", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sibling-id", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sibling-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sibling-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sibling-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sort-key", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sort-key", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sort-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sort-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sort-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-detected", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-detected", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-media-detected", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-media-detected", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-media-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-media-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-media-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wwn", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wwn", callback: (($obj: DriveProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wwn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wwn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wwn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DriveProxy_ConstructProps)
    _init (config?: DriveProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): DriveProxy
    static newForBusFinish(res: Gio.AsyncResult): DriveProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): DriveProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): DriveProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface DriveSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class DriveSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.Drive */
    canPowerOff: boolean
    configuration: GLib.Variant
    connectionBus: string
    ejectable: boolean
    id: string
    media: string
    mediaAvailable: boolean
    mediaChangeDetected: boolean
    mediaCompatibility: string[]
    mediaRemovable: boolean
    model: string
    optical: boolean
    opticalBlank: boolean
    opticalNumAudioTracks: number
    opticalNumDataTracks: number
    opticalNumSessions: number
    opticalNumTracks: number
    removable: boolean
    revision: string
    rotationRate: number
    seat: string
    serial: string
    siblingId: string
    size: number
    sortKey: string
    timeDetected: number
    timeMediaDetected: number
    vendor: string
    wwn: string
    /* Fields of UDisks.DriveSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.Drive */
    callEject(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEjectFinish(res: Gio.AsyncResult): boolean
    callEjectSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callPowerOff(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callPowerOffFinish(res: Gio.AsyncResult): boolean
    callPowerOffSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetConfiguration(argValue: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetConfigurationFinish(res: Gio.AsyncResult): boolean
    callSetConfigurationSync(argValue: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeEject(invocation: Gio.DBusMethodInvocation): void
    completePowerOff(invocation: Gio.DBusMethodInvocation): void
    completeSetConfiguration(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: DriveSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: DriveSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Drive */
    connect(sigName: "handle-eject", callback: (($obj: DriveSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-eject", callback: (($obj: DriveSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-eject", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-eject", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-eject", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-eject", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-power-off", callback: (($obj: DriveSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-power-off", callback: (($obj: DriveSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-power-off", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-power-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-power-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-power-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-configuration", callback: (($obj: DriveSkeleton, invocation: Gio.DBusMethodInvocation, argValue: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-configuration", callback: (($obj: DriveSkeleton, invocation: Gio.DBusMethodInvocation, argValue: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-configuration", invocation: Gio.DBusMethodInvocation, argValue: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-set-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-power-off", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-power-off", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-power-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-power-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-power-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::configuration", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::configuration", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connection-bus", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-bus", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connection-bus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connection-bus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connection-bus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ejectable", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ejectable", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ejectable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ejectable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ejectable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media-available", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-available", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media-available", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media-available", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media-available", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media-change-detected", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-change-detected", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media-change-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media-change-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media-change-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media-compatibility", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-compatibility", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media-compatibility", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media-compatibility", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media-compatibility", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media-removable", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-removable", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media-removable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media-removable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media-removable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::model", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::model", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::optical", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::optical", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::optical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::optical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::optical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::optical-blank", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::optical-blank", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::optical-blank", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::optical-blank", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::optical-blank", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::optical-num-audio-tracks", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::optical-num-audio-tracks", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::optical-num-audio-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::optical-num-audio-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::optical-num-audio-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::optical-num-data-tracks", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::optical-num-data-tracks", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::optical-num-data-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::optical-num-data-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::optical-num-data-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::optical-num-sessions", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::optical-num-sessions", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::optical-num-sessions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::optical-num-sessions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::optical-num-sessions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::optical-num-tracks", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::optical-num-tracks", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::optical-num-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::optical-num-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::optical-num-tracks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::removable", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::removable", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::removable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::removable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::removable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::revision", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::revision", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rotation-rate", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-rate", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rotation-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rotation-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rotation-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::seat", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::seat", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::seat", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::seat", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::seat", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serial", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serial", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serial", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serial", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serial", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sibling-id", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sibling-id", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sibling-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sibling-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sibling-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sort-key", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sort-key", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sort-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sort-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sort-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-detected", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-detected", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-media-detected", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-media-detected", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-media-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-media-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-media-detected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vendor", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vendor", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vendor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wwn", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wwn", callback: (($obj: DriveSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wwn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wwn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wwn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DriveSkeleton_ConstructProps)
    _init (config?: DriveSkeleton_ConstructProps): void
    static new(): DriveSkeleton
    static $gtype: GObject.Type
}
export interface EncryptedProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class EncryptedProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.Encrypted */
    childConfiguration: GLib.Variant
    cleartextDevice: string
    hintEncryptionType: string
    metadataSize: number
    /* Fields of UDisks.EncryptedProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.Encrypted */
    callChangePassphrase(argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callChangePassphraseFinish(res: Gio.AsyncResult): boolean
    callChangePassphraseSync(argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callLock(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callLockFinish(res: Gio.AsyncResult): boolean
    callLockSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callResize(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeFinish(res: Gio.AsyncResult): boolean
    callResizeSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callUnlock(argPassphrase: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callUnlockFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outCleartextDevice */ string | null ]
    callUnlockSync(argPassphrase: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outCleartextDevice */ string | null ]
    completeChangePassphrase(invocation: Gio.DBusMethodInvocation): void
    completeLock(invocation: Gio.DBusMethodInvocation): void
    completeResize(invocation: Gio.DBusMethodInvocation): void
    completeUnlock(invocation: Gio.DBusMethodInvocation, cleartextDevice: string): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: EncryptedProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: EncryptedProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: EncryptedProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: EncryptedProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Encrypted */
    connect(sigName: "handle-change-passphrase", callback: (($obj: EncryptedProxy, invocation: Gio.DBusMethodInvocation, argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-change-passphrase", callback: (($obj: EncryptedProxy, invocation: Gio.DBusMethodInvocation, argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-change-passphrase", invocation: Gio.DBusMethodInvocation, argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant): void
    on(sigName: "handle-change-passphrase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-change-passphrase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-change-passphrase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-lock", callback: (($obj: EncryptedProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-lock", callback: (($obj: EncryptedProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-lock", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-lock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-lock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-lock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize", callback: (($obj: EncryptedProxy, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize", callback: (($obj: EncryptedProxy, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-unlock", callback: (($obj: EncryptedProxy, invocation: Gio.DBusMethodInvocation, argPassphrase: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-unlock", callback: (($obj: EncryptedProxy, invocation: Gio.DBusMethodInvocation, argPassphrase: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-unlock", invocation: Gio.DBusMethodInvocation, argPassphrase: string, argOptions: GLib.Variant): void
    on(sigName: "handle-unlock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-unlock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-unlock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-configuration", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-configuration", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cleartext-device", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cleartext-device", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cleartext-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cleartext-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cleartext-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-encryption-type", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-encryption-type", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-encryption-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-encryption-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-encryption-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metadata-size", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metadata-size", callback: (($obj: EncryptedProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metadata-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metadata-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metadata-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: EncryptedProxy_ConstructProps)
    _init (config?: EncryptedProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): EncryptedProxy
    static newForBusFinish(res: Gio.AsyncResult): EncryptedProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): EncryptedProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): EncryptedProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface EncryptedSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class EncryptedSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.Encrypted */
    childConfiguration: GLib.Variant
    cleartextDevice: string
    hintEncryptionType: string
    metadataSize: number
    /* Fields of UDisks.EncryptedSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.Encrypted */
    callChangePassphrase(argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callChangePassphraseFinish(res: Gio.AsyncResult): boolean
    callChangePassphraseSync(argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callLock(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callLockFinish(res: Gio.AsyncResult): boolean
    callLockSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callResize(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeFinish(res: Gio.AsyncResult): boolean
    callResizeSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callUnlock(argPassphrase: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callUnlockFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outCleartextDevice */ string | null ]
    callUnlockSync(argPassphrase: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outCleartextDevice */ string | null ]
    completeChangePassphrase(invocation: Gio.DBusMethodInvocation): void
    completeLock(invocation: Gio.DBusMethodInvocation): void
    completeResize(invocation: Gio.DBusMethodInvocation): void
    completeUnlock(invocation: Gio.DBusMethodInvocation, cleartextDevice: string): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: EncryptedSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: EncryptedSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: EncryptedSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: EncryptedSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Encrypted */
    connect(sigName: "handle-change-passphrase", callback: (($obj: EncryptedSkeleton, invocation: Gio.DBusMethodInvocation, argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-change-passphrase", callback: (($obj: EncryptedSkeleton, invocation: Gio.DBusMethodInvocation, argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-change-passphrase", invocation: Gio.DBusMethodInvocation, argPassphrase: string, argNewPassphrase: string, argOptions: GLib.Variant): void
    on(sigName: "handle-change-passphrase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-change-passphrase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-change-passphrase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-lock", callback: (($obj: EncryptedSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-lock", callback: (($obj: EncryptedSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-lock", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-lock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-lock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-lock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize", callback: (($obj: EncryptedSkeleton, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize", callback: (($obj: EncryptedSkeleton, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-unlock", callback: (($obj: EncryptedSkeleton, invocation: Gio.DBusMethodInvocation, argPassphrase: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-unlock", callback: (($obj: EncryptedSkeleton, invocation: Gio.DBusMethodInvocation, argPassphrase: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-unlock", invocation: Gio.DBusMethodInvocation, argPassphrase: string, argOptions: GLib.Variant): void
    on(sigName: "handle-unlock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-unlock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-unlock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: EncryptedSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: EncryptedSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-configuration", callback: (($obj: EncryptedSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-configuration", callback: (($obj: EncryptedSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cleartext-device", callback: (($obj: EncryptedSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cleartext-device", callback: (($obj: EncryptedSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cleartext-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cleartext-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cleartext-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hint-encryption-type", callback: (($obj: EncryptedSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hint-encryption-type", callback: (($obj: EncryptedSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hint-encryption-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hint-encryption-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hint-encryption-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metadata-size", callback: (($obj: EncryptedSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metadata-size", callback: (($obj: EncryptedSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metadata-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metadata-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metadata-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: EncryptedSkeleton_ConstructProps)
    _init (config?: EncryptedSkeleton_ConstructProps): void
    static new(): EncryptedSkeleton
    static $gtype: GObject.Type
}
export interface FilesystemBTRFSProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class FilesystemBTRFSProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.FilesystemBTRFS */
    label: string
    numDevices: number
    used: number
    uuid: string
    /* Fields of UDisks.FilesystemBTRFSProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.FilesystemBTRFS */
    callAddDevice(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAddDeviceFinish(res: Gio.AsyncResult): boolean
    callAddDeviceSync(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCreateSnapshot(argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateSnapshotFinish(res: Gio.AsyncResult): boolean
    callCreateSnapshotSync(argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCreateSubvolume(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateSubvolumeFinish(res: Gio.AsyncResult): boolean
    callCreateSubvolumeSync(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callGetSubvolumes(argSnapshotsOnly: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetSubvolumesFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outSubvolumes */ GLib.Variant | null, /* outSubvolumesCnt */ number | null ]
    callGetSubvolumesSync(argSnapshotsOnly: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outSubvolumes */ GLib.Variant | null, /* outSubvolumesCnt */ number | null ]
    callRemoveDevice(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRemoveDeviceFinish(res: Gio.AsyncResult): boolean
    callRemoveDeviceSync(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRemoveSubvolume(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRemoveSubvolumeFinish(res: Gio.AsyncResult): boolean
    callRemoveSubvolumeSync(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRepair(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRepairFinish(res: Gio.AsyncResult): boolean
    callRepairSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callResize(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeFinish(res: Gio.AsyncResult): boolean
    callResizeSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetLabel(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetLabelFinish(res: Gio.AsyncResult): boolean
    callSetLabelSync(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeAddDevice(invocation: Gio.DBusMethodInvocation): void
    completeCreateSnapshot(invocation: Gio.DBusMethodInvocation): void
    completeCreateSubvolume(invocation: Gio.DBusMethodInvocation): void
    completeGetSubvolumes(invocation: Gio.DBusMethodInvocation, subvolumes: GLib.Variant, subvolumesCnt: number): void
    completeRemoveDevice(invocation: Gio.DBusMethodInvocation): void
    completeRemoveSubvolume(invocation: Gio.DBusMethodInvocation): void
    completeRepair(invocation: Gio.DBusMethodInvocation): void
    completeResize(invocation: Gio.DBusMethodInvocation): void
    completeSetLabel(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: FilesystemBTRFSProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: FilesystemBTRFSProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: FilesystemBTRFSProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: FilesystemBTRFSProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.FilesystemBTRFS */
    connect(sigName: "handle-add-device", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-add-device", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-add-device", invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): void
    on(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-snapshot", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-snapshot", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-snapshot", invocation: Gio.DBusMethodInvocation, argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-subvolume", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-subvolume", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-subvolume", invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-create-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-get-subvolumes", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argSnapshotsOnly: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-get-subvolumes", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argSnapshotsOnly: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-get-subvolumes", invocation: Gio.DBusMethodInvocation, argSnapshotsOnly: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-get-subvolumes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-get-subvolumes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-get-subvolumes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-remove-device", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-remove-device", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-remove-device", invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): void
    on(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-remove-subvolume", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-remove-subvolume", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-remove-subvolume", invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-remove-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-remove-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-remove-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-repair", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-repair", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-repair", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-label", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-label", callback: (($obj: FilesystemBTRFSProxy, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-label", invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::label", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::label", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::num-devices", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::num-devices", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::num-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::num-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::num-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::used", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::used", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::used", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::used", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::used", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uuid", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: FilesystemBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: FilesystemBTRFSProxy_ConstructProps)
    _init (config?: FilesystemBTRFSProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): FilesystemBTRFSProxy
    static newForBusFinish(res: Gio.AsyncResult): FilesystemBTRFSProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): FilesystemBTRFSProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): FilesystemBTRFSProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface FilesystemBTRFSSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class FilesystemBTRFSSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.FilesystemBTRFS */
    label: string
    numDevices: number
    used: number
    uuid: string
    /* Fields of UDisks.FilesystemBTRFSSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.FilesystemBTRFS */
    callAddDevice(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAddDeviceFinish(res: Gio.AsyncResult): boolean
    callAddDeviceSync(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCreateSnapshot(argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateSnapshotFinish(res: Gio.AsyncResult): boolean
    callCreateSnapshotSync(argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCreateSubvolume(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateSubvolumeFinish(res: Gio.AsyncResult): boolean
    callCreateSubvolumeSync(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callGetSubvolumes(argSnapshotsOnly: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetSubvolumesFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outSubvolumes */ GLib.Variant | null, /* outSubvolumesCnt */ number | null ]
    callGetSubvolumesSync(argSnapshotsOnly: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outSubvolumes */ GLib.Variant | null, /* outSubvolumesCnt */ number | null ]
    callRemoveDevice(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRemoveDeviceFinish(res: Gio.AsyncResult): boolean
    callRemoveDeviceSync(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRemoveSubvolume(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRemoveSubvolumeFinish(res: Gio.AsyncResult): boolean
    callRemoveSubvolumeSync(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRepair(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRepairFinish(res: Gio.AsyncResult): boolean
    callRepairSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callResize(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeFinish(res: Gio.AsyncResult): boolean
    callResizeSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetLabel(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetLabelFinish(res: Gio.AsyncResult): boolean
    callSetLabelSync(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeAddDevice(invocation: Gio.DBusMethodInvocation): void
    completeCreateSnapshot(invocation: Gio.DBusMethodInvocation): void
    completeCreateSubvolume(invocation: Gio.DBusMethodInvocation): void
    completeGetSubvolumes(invocation: Gio.DBusMethodInvocation, subvolumes: GLib.Variant, subvolumesCnt: number): void
    completeRemoveDevice(invocation: Gio.DBusMethodInvocation): void
    completeRemoveSubvolume(invocation: Gio.DBusMethodInvocation): void
    completeRepair(invocation: Gio.DBusMethodInvocation): void
    completeResize(invocation: Gio.DBusMethodInvocation): void
    completeSetLabel(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: FilesystemBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: FilesystemBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.FilesystemBTRFS */
    connect(sigName: "handle-add-device", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-add-device", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-add-device", invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): void
    on(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-snapshot", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-snapshot", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-snapshot", invocation: Gio.DBusMethodInvocation, argSource: string, argDest: string, argRo: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-subvolume", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-subvolume", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-subvolume", invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-create-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-get-subvolumes", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argSnapshotsOnly: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-get-subvolumes", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argSnapshotsOnly: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-get-subvolumes", invocation: Gio.DBusMethodInvocation, argSnapshotsOnly: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-get-subvolumes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-get-subvolumes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-get-subvolumes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-remove-device", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-remove-device", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-remove-device", invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): void
    on(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-remove-subvolume", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-remove-subvolume", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-remove-subvolume", invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-remove-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-remove-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-remove-subvolume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-repair", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-repair", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-repair", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-label", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-label", callback: (($obj: FilesystemBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-label", invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: FilesystemBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: FilesystemBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::label", callback: (($obj: FilesystemBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::label", callback: (($obj: FilesystemBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::num-devices", callback: (($obj: FilesystemBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::num-devices", callback: (($obj: FilesystemBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::num-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::num-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::num-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::used", callback: (($obj: FilesystemBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::used", callback: (($obj: FilesystemBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::used", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::used", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::used", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uuid", callback: (($obj: FilesystemBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: FilesystemBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: FilesystemBTRFSSkeleton_ConstructProps)
    _init (config?: FilesystemBTRFSSkeleton_ConstructProps): void
    static new(): FilesystemBTRFSSkeleton
    static $gtype: GObject.Type
}
export interface FilesystemProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class FilesystemProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.Filesystem */
    mountPoints: string[]
    size: number
    /* Fields of UDisks.FilesystemProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.Filesystem */
    callCheck(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCheckFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outConsistent */ boolean | null ]
    callCheckSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outConsistent */ boolean | null ]
    callMount(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callMountFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outMountPath */ string | null ]
    callMountSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outMountPath */ string | null ]
    callRepair(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRepairFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outRepaired */ boolean | null ]
    callRepairSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outRepaired */ boolean | null ]
    callResize(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeFinish(res: Gio.AsyncResult): boolean
    callResizeSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetLabel(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetLabelFinish(res: Gio.AsyncResult): boolean
    callSetLabelSync(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callTakeOwnership(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callTakeOwnershipFinish(res: Gio.AsyncResult): boolean
    callTakeOwnershipSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callUnmount(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callUnmountFinish(res: Gio.AsyncResult): boolean
    callUnmountSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeCheck(invocation: Gio.DBusMethodInvocation, consistent: boolean): void
    completeMount(invocation: Gio.DBusMethodInvocation, mountPath: string): void
    completeRepair(invocation: Gio.DBusMethodInvocation, repaired: boolean): void
    completeResize(invocation: Gio.DBusMethodInvocation): void
    completeSetLabel(invocation: Gio.DBusMethodInvocation): void
    completeTakeOwnership(invocation: Gio.DBusMethodInvocation): void
    completeUnmount(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: FilesystemProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: FilesystemProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: FilesystemProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: FilesystemProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: FilesystemProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: FilesystemProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Filesystem */
    connect(sigName: "handle-check", callback: (($obj: FilesystemProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-check", callback: (($obj: FilesystemProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-check", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-mount", callback: (($obj: FilesystemProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-mount", callback: (($obj: FilesystemProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-mount", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-mount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-mount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-mount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-repair", callback: (($obj: FilesystemProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-repair", callback: (($obj: FilesystemProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-repair", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize", callback: (($obj: FilesystemProxy, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize", callback: (($obj: FilesystemProxy, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-label", callback: (($obj: FilesystemProxy, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-label", callback: (($obj: FilesystemProxy, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-label", invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-take-ownership", callback: (($obj: FilesystemProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-take-ownership", callback: (($obj: FilesystemProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-take-ownership", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-take-ownership", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-take-ownership", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-take-ownership", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-unmount", callback: (($obj: FilesystemProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-unmount", callback: (($obj: FilesystemProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-unmount", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-unmount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-unmount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-unmount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: FilesystemProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: FilesystemProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: FilesystemProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: FilesystemProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: FilesystemProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: FilesystemProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mount-points", callback: (($obj: FilesystemProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mount-points", callback: (($obj: FilesystemProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mount-points", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mount-points", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mount-points", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: FilesystemProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: FilesystemProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: FilesystemProxy_ConstructProps)
    _init (config?: FilesystemProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): FilesystemProxy
    static newForBusFinish(res: Gio.AsyncResult): FilesystemProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): FilesystemProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): FilesystemProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface FilesystemSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class FilesystemSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.Filesystem */
    mountPoints: string[]
    size: number
    /* Fields of UDisks.FilesystemSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.Filesystem */
    callCheck(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCheckFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outConsistent */ boolean | null ]
    callCheckSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outConsistent */ boolean | null ]
    callMount(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callMountFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outMountPath */ string | null ]
    callMountSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outMountPath */ string | null ]
    callRepair(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRepairFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outRepaired */ boolean | null ]
    callRepairSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outRepaired */ boolean | null ]
    callResize(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeFinish(res: Gio.AsyncResult): boolean
    callResizeSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetLabel(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetLabelFinish(res: Gio.AsyncResult): boolean
    callSetLabelSync(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callTakeOwnership(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callTakeOwnershipFinish(res: Gio.AsyncResult): boolean
    callTakeOwnershipSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callUnmount(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callUnmountFinish(res: Gio.AsyncResult): boolean
    callUnmountSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeCheck(invocation: Gio.DBusMethodInvocation, consistent: boolean): void
    completeMount(invocation: Gio.DBusMethodInvocation, mountPath: string): void
    completeRepair(invocation: Gio.DBusMethodInvocation, repaired: boolean): void
    completeResize(invocation: Gio.DBusMethodInvocation): void
    completeSetLabel(invocation: Gio.DBusMethodInvocation): void
    completeTakeOwnership(invocation: Gio.DBusMethodInvocation): void
    completeUnmount(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: FilesystemSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: FilesystemSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Filesystem */
    connect(sigName: "handle-check", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-check", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-check", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-mount", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-mount", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-mount", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-mount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-mount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-mount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-repair", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-repair", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-repair", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-label", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-label", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-label", invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-take-ownership", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-take-ownership", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-take-ownership", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-take-ownership", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-take-ownership", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-take-ownership", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-unmount", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-unmount", callback: (($obj: FilesystemSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-unmount", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-unmount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-unmount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-unmount", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: FilesystemSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: FilesystemSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mount-points", callback: (($obj: FilesystemSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mount-points", callback: (($obj: FilesystemSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mount-points", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mount-points", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mount-points", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: FilesystemSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: FilesystemSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: FilesystemSkeleton_ConstructProps)
    _init (config?: FilesystemSkeleton_ConstructProps): void
    static new(): FilesystemSkeleton
    static $gtype: GObject.Type
}
export interface JobProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class JobProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.Job */
    bytes: number
    cancelable: boolean
    expectedEndTime: number
    objects: string[]
    operation: string
    progress: number
    progressValid: boolean
    rate: number
    startTime: number
    startedByUid: number
    /* Fields of UDisks.JobProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.Job */
    callCancel(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCancelFinish(res: Gio.AsyncResult): boolean
    callCancelSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeCancel(invocation: Gio.DBusMethodInvocation): void
    emitCompleted(argSuccess: boolean, argMessage: string): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: JobProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: JobProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: JobProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: JobProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Job */
    connect(sigName: "completed", callback: (($obj: JobProxy, argSuccess: boolean, argMessage: string) => void)): number
    connect_after(sigName: "completed", callback: (($obj: JobProxy, argSuccess: boolean, argMessage: string) => void)): number
    emit(sigName: "completed", argSuccess: boolean, argMessage: string): void
    on(sigName: "completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-cancel", callback: (($obj: JobProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-cancel", callback: (($obj: JobProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-cancel", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-cancel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-cancel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-cancel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bytes", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bytes", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bytes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bytes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bytes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::expected-end-time", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expected-end-time", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::expected-end-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::expected-end-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::expected-end-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::objects", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::objects", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::objects", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::objects", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::objects", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operation", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operation", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::progress", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::progress-valid", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress-valid", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::progress-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::progress-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::progress-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rate", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rate", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-time", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-time", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::started-by-uid", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::started-by-uid", callback: (($obj: JobProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::started-by-uid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::started-by-uid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::started-by-uid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: JobProxy_ConstructProps)
    _init (config?: JobProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): JobProxy
    static newForBusFinish(res: Gio.AsyncResult): JobProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): JobProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): JobProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface JobSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class JobSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.Job */
    bytes: number
    cancelable: boolean
    expectedEndTime: number
    objects: string[]
    operation: string
    progress: number
    progressValid: boolean
    rate: number
    startTime: number
    startedByUid: number
    /* Fields of UDisks.JobSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.Job */
    callCancel(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCancelFinish(res: Gio.AsyncResult): boolean
    callCancelSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeCancel(invocation: Gio.DBusMethodInvocation): void
    emitCompleted(argSuccess: boolean, argMessage: string): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: JobSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: JobSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Job */
    connect(sigName: "completed", callback: (($obj: JobSkeleton, argSuccess: boolean, argMessage: string) => void)): number
    connect_after(sigName: "completed", callback: (($obj: JobSkeleton, argSuccess: boolean, argMessage: string) => void)): number
    emit(sigName: "completed", argSuccess: boolean, argMessage: string): void
    on(sigName: "completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-cancel", callback: (($obj: JobSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-cancel", callback: (($obj: JobSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-cancel", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-cancel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-cancel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-cancel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bytes", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bytes", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bytes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bytes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bytes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::expected-end-time", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expected-end-time", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::expected-end-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::expected-end-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::expected-end-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::objects", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::objects", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::objects", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::objects", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::objects", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operation", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operation", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::progress", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::progress-valid", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress-valid", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::progress-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::progress-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::progress-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rate", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rate", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-time", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-time", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::started-by-uid", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::started-by-uid", callback: (($obj: JobSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::started-by-uid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::started-by-uid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::started-by-uid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: JobSkeleton_ConstructProps)
    _init (config?: JobSkeleton_ConstructProps): void
    static new(): JobSkeleton
    static $gtype: GObject.Type
}
export interface LogicalVolumeProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class LogicalVolumeProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.LogicalVolume */
    active: boolean
    blockDevice: string
    childConfiguration: GLib.Variant
    dataAllocatedRatio: number
    metadataAllocatedRatio: number
    name: string
    origin: string
    size: number
    thinPool: string
    type: string
    uuid: string
    volumeGroup: string
    /* Fields of UDisks.LogicalVolumeProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.LogicalVolume */
    callActivate(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callActivateSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCacheAttach(argCacheName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCacheAttachFinish(res: Gio.AsyncResult): boolean
    callCacheAttachSync(argCacheName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCacheDetach(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCacheDetachFinish(res: Gio.AsyncResult): boolean
    callCacheDetachSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCacheSplit(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCacheSplitFinish(res: Gio.AsyncResult): boolean
    callCacheSplitSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCreateSnapshot(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateSnapshotFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateSnapshotSync(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callDeactivate(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeactivateFinish(res: Gio.AsyncResult): boolean
    callDeactivateSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callDelete(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRename(argNewName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRenameFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callRenameSync(argNewName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callResize(argNewSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeFinish(res: Gio.AsyncResult): boolean
    callResizeSync(argNewSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeActivate(invocation: Gio.DBusMethodInvocation, result: string): void
    completeCacheAttach(invocation: Gio.DBusMethodInvocation): void
    completeCacheDetach(invocation: Gio.DBusMethodInvocation): void
    completeCacheSplit(invocation: Gio.DBusMethodInvocation): void
    completeCreateSnapshot(invocation: Gio.DBusMethodInvocation, result: string): void
    completeDeactivate(invocation: Gio.DBusMethodInvocation): void
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeRename(invocation: Gio.DBusMethodInvocation, result: string): void
    completeResize(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: LogicalVolumeProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: LogicalVolumeProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: LogicalVolumeProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: LogicalVolumeProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.LogicalVolume */
    connect(sigName: "handle-activate", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-activate", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-activate", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-cache-attach", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argCacheName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-cache-attach", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argCacheName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-cache-attach", invocation: Gio.DBusMethodInvocation, argCacheName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-cache-attach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-cache-attach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-cache-attach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-cache-detach", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-cache-detach", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-cache-detach", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-cache-detach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-cache-detach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-cache-detach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-cache-split", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-cache-split", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-cache-split", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-cache-split", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-cache-split", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-cache-split", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-snapshot", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-snapshot", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-snapshot", invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-deactivate", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-deactivate", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-deactivate", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-delete", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-delete", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-rename", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-rename", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-rename", invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argNewSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize", callback: (($obj: LogicalVolumeProxy, invocation: Gio.DBusMethodInvocation, argNewSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize", invocation: Gio.DBusMethodInvocation, argNewSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block-device", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block-device", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-configuration", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-configuration", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data-allocated-ratio", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data-allocated-ratio", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data-allocated-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data-allocated-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data-allocated-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metadata-allocated-ratio", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metadata-allocated-ratio", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metadata-allocated-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metadata-allocated-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metadata-allocated-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::thin-pool", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::thin-pool", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::thin-pool", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::thin-pool", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::thin-pool", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uuid", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::volume-group", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::volume-group", callback: (($obj: LogicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: LogicalVolumeProxy_ConstructProps)
    _init (config?: LogicalVolumeProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): LogicalVolumeProxy
    static newForBusFinish(res: Gio.AsyncResult): LogicalVolumeProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): LogicalVolumeProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): LogicalVolumeProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface LogicalVolumeSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class LogicalVolumeSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.LogicalVolume */
    active: boolean
    blockDevice: string
    childConfiguration: GLib.Variant
    dataAllocatedRatio: number
    metadataAllocatedRatio: number
    name: string
    origin: string
    size: number
    thinPool: string
    type: string
    uuid: string
    volumeGroup: string
    /* Fields of UDisks.LogicalVolumeSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.LogicalVolume */
    callActivate(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callActivateSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCacheAttach(argCacheName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCacheAttachFinish(res: Gio.AsyncResult): boolean
    callCacheAttachSync(argCacheName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCacheDetach(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCacheDetachFinish(res: Gio.AsyncResult): boolean
    callCacheDetachSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCacheSplit(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCacheSplitFinish(res: Gio.AsyncResult): boolean
    callCacheSplitSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCreateSnapshot(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateSnapshotFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateSnapshotSync(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callDeactivate(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeactivateFinish(res: Gio.AsyncResult): boolean
    callDeactivateSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callDelete(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRename(argNewName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRenameFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callRenameSync(argNewName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callResize(argNewSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeFinish(res: Gio.AsyncResult): boolean
    callResizeSync(argNewSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeActivate(invocation: Gio.DBusMethodInvocation, result: string): void
    completeCacheAttach(invocation: Gio.DBusMethodInvocation): void
    completeCacheDetach(invocation: Gio.DBusMethodInvocation): void
    completeCacheSplit(invocation: Gio.DBusMethodInvocation): void
    completeCreateSnapshot(invocation: Gio.DBusMethodInvocation, result: string): void
    completeDeactivate(invocation: Gio.DBusMethodInvocation): void
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeRename(invocation: Gio.DBusMethodInvocation, result: string): void
    completeResize(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.LogicalVolume */
    connect(sigName: "handle-activate", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-activate", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-activate", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-activate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-cache-attach", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argCacheName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-cache-attach", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argCacheName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-cache-attach", invocation: Gio.DBusMethodInvocation, argCacheName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-cache-attach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-cache-attach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-cache-attach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-cache-detach", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-cache-detach", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-cache-detach", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-cache-detach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-cache-detach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-cache-detach", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-cache-split", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-cache-split", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-cache-split", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-cache-split", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-cache-split", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-cache-split", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-snapshot", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-snapshot", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-snapshot", invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-snapshot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-deactivate", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-deactivate", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-deactivate", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-deactivate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-delete", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-delete", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-rename", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-rename", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-rename", invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argNewSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize", callback: (($obj: LogicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argNewSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize", invocation: Gio.DBusMethodInvocation, argNewSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block-device", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block-device", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-configuration", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-configuration", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data-allocated-ratio", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data-allocated-ratio", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data-allocated-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data-allocated-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data-allocated-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::metadata-allocated-ratio", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::metadata-allocated-ratio", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::metadata-allocated-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::metadata-allocated-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::metadata-allocated-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::thin-pool", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::thin-pool", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::thin-pool", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::thin-pool", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::thin-pool", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uuid", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::volume-group", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::volume-group", callback: (($obj: LogicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: LogicalVolumeSkeleton_ConstructProps)
    _init (config?: LogicalVolumeSkeleton_ConstructProps): void
    static new(): LogicalVolumeSkeleton
    static $gtype: GObject.Type
}
export interface LoopProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class LoopProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.Loop */
    autoclear: boolean
    backingFile: string
    setupByUid: number
    /* Fields of UDisks.LoopProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.Loop */
    callDelete(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetAutoclear(argValue: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetAutoclearFinish(res: Gio.AsyncResult): boolean
    callSetAutoclearSync(argValue: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeSetAutoclear(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: LoopProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: LoopProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: LoopProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: LoopProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: LoopProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: LoopProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Loop */
    connect(sigName: "handle-delete", callback: (($obj: LoopProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-delete", callback: (($obj: LoopProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-autoclear", callback: (($obj: LoopProxy, invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-autoclear", callback: (($obj: LoopProxy, invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-autoclear", invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-set-autoclear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-autoclear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-autoclear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: LoopProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: LoopProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: LoopProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: LoopProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: LoopProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: LoopProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoclear", callback: (($obj: LoopProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoclear", callback: (($obj: LoopProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoclear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoclear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoclear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::backing-file", callback: (($obj: LoopProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backing-file", callback: (($obj: LoopProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backing-file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backing-file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backing-file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::setup-by-uid", callback: (($obj: LoopProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::setup-by-uid", callback: (($obj: LoopProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::setup-by-uid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::setup-by-uid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::setup-by-uid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: LoopProxy_ConstructProps)
    _init (config?: LoopProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): LoopProxy
    static newForBusFinish(res: Gio.AsyncResult): LoopProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): LoopProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): LoopProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface LoopSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class LoopSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.Loop */
    autoclear: boolean
    backingFile: string
    setupByUid: number
    /* Fields of UDisks.LoopSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.Loop */
    callDelete(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetAutoclear(argValue: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetAutoclearFinish(res: Gio.AsyncResult): boolean
    callSetAutoclearSync(argValue: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeSetAutoclear(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: LoopSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: LoopSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: LoopSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: LoopSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Loop */
    connect(sigName: "handle-delete", callback: (($obj: LoopSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-delete", callback: (($obj: LoopSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-autoclear", callback: (($obj: LoopSkeleton, invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-autoclear", callback: (($obj: LoopSkeleton, invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-autoclear", invocation: Gio.DBusMethodInvocation, argValue: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-set-autoclear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-autoclear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-autoclear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: LoopSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: LoopSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autoclear", callback: (($obj: LoopSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autoclear", callback: (($obj: LoopSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autoclear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autoclear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autoclear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::backing-file", callback: (($obj: LoopSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backing-file", callback: (($obj: LoopSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backing-file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backing-file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backing-file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::setup-by-uid", callback: (($obj: LoopSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::setup-by-uid", callback: (($obj: LoopSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::setup-by-uid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::setup-by-uid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::setup-by-uid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: LoopSkeleton_ConstructProps)
    _init (config?: LoopSkeleton_ConstructProps): void
    static new(): LoopSkeleton
    static $gtype: GObject.Type
}
export interface MDRaidProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class MDRaidProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.MDRaid */
    activeDevices: GLib.Variant
    bitmapLocation: string
    childConfiguration: GLib.Variant
    chunkSize: number
    degraded: number
    level: string
    name: string
    numDevices: number
    running: boolean
    size: number
    syncAction: string
    syncCompleted: number
    syncRate: number
    syncRemainingTime: number
    uuid: string
    /* Fields of UDisks.MDRaidProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.MDRaid */
    callAddDevice(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAddDeviceFinish(res: Gio.AsyncResult): boolean
    callAddDeviceSync(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callDelete(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRemoveDevice(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRemoveDeviceFinish(res: Gio.AsyncResult): boolean
    callRemoveDeviceSync(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRequestSyncAction(argSyncAction: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRequestSyncActionFinish(res: Gio.AsyncResult): boolean
    callRequestSyncActionSync(argSyncAction: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetBitmapLocation(argValue: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetBitmapLocationFinish(res: Gio.AsyncResult): boolean
    callSetBitmapLocationSync(argValue: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callStart(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStartFinish(res: Gio.AsyncResult): boolean
    callStartSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callStop(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStopFinish(res: Gio.AsyncResult): boolean
    callStopSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeAddDevice(invocation: Gio.DBusMethodInvocation): void
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeRemoveDevice(invocation: Gio.DBusMethodInvocation): void
    completeRequestSyncAction(invocation: Gio.DBusMethodInvocation): void
    completeSetBitmapLocation(invocation: Gio.DBusMethodInvocation): void
    completeStart(invocation: Gio.DBusMethodInvocation): void
    completeStop(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: MDRaidProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: MDRaidProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: MDRaidProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: MDRaidProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.MDRaid */
    connect(sigName: "handle-add-device", callback: (($obj: MDRaidProxy, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-add-device", callback: (($obj: MDRaidProxy, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-add-device", invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): void
    on(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-delete", callback: (($obj: MDRaidProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-delete", callback: (($obj: MDRaidProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-remove-device", callback: (($obj: MDRaidProxy, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-remove-device", callback: (($obj: MDRaidProxy, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-remove-device", invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): void
    on(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-request-sync-action", callback: (($obj: MDRaidProxy, invocation: Gio.DBusMethodInvocation, argSyncAction: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-request-sync-action", callback: (($obj: MDRaidProxy, invocation: Gio.DBusMethodInvocation, argSyncAction: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-request-sync-action", invocation: Gio.DBusMethodInvocation, argSyncAction: string, argOptions: GLib.Variant): void
    on(sigName: "handle-request-sync-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-request-sync-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-request-sync-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-bitmap-location", callback: (($obj: MDRaidProxy, invocation: Gio.DBusMethodInvocation, argValue: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-bitmap-location", callback: (($obj: MDRaidProxy, invocation: Gio.DBusMethodInvocation, argValue: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-bitmap-location", invocation: Gio.DBusMethodInvocation, argValue: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-bitmap-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-bitmap-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-bitmap-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-start", callback: (($obj: MDRaidProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-start", callback: (($obj: MDRaidProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-start", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-stop", callback: (($obj: MDRaidProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-stop", callback: (($obj: MDRaidProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-stop", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-devices", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-devices", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bitmap-location", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bitmap-location", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bitmap-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bitmap-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bitmap-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-configuration", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-configuration", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::chunk-size", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::chunk-size", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::chunk-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::chunk-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::chunk-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::degraded", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::degraded", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::degraded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::degraded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::degraded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::level", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::level", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::num-devices", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::num-devices", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::num-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::num-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::num-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::running", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::running", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::running", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::running", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::running", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sync-action", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sync-action", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sync-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sync-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sync-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sync-completed", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sync-completed", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sync-completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sync-completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sync-completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sync-rate", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sync-rate", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sync-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sync-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sync-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sync-remaining-time", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sync-remaining-time", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sync-remaining-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sync-remaining-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sync-remaining-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uuid", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: MDRaidProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: MDRaidProxy_ConstructProps)
    _init (config?: MDRaidProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): MDRaidProxy
    static newForBusFinish(res: Gio.AsyncResult): MDRaidProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): MDRaidProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): MDRaidProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface MDRaidSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class MDRaidSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.MDRaid */
    activeDevices: GLib.Variant
    bitmapLocation: string
    childConfiguration: GLib.Variant
    chunkSize: number
    degraded: number
    level: string
    name: string
    numDevices: number
    running: boolean
    size: number
    syncAction: string
    syncCompleted: number
    syncRate: number
    syncRemainingTime: number
    uuid: string
    /* Fields of UDisks.MDRaidSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.MDRaid */
    callAddDevice(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAddDeviceFinish(res: Gio.AsyncResult): boolean
    callAddDeviceSync(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callDelete(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRemoveDevice(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRemoveDeviceFinish(res: Gio.AsyncResult): boolean
    callRemoveDeviceSync(argDevice: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRequestSyncAction(argSyncAction: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRequestSyncActionFinish(res: Gio.AsyncResult): boolean
    callRequestSyncActionSync(argSyncAction: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetBitmapLocation(argValue: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetBitmapLocationFinish(res: Gio.AsyncResult): boolean
    callSetBitmapLocationSync(argValue: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callStart(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStartFinish(res: Gio.AsyncResult): boolean
    callStartSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callStop(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStopFinish(res: Gio.AsyncResult): boolean
    callStopSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeAddDevice(invocation: Gio.DBusMethodInvocation): void
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeRemoveDevice(invocation: Gio.DBusMethodInvocation): void
    completeRequestSyncAction(invocation: Gio.DBusMethodInvocation): void
    completeSetBitmapLocation(invocation: Gio.DBusMethodInvocation): void
    completeStart(invocation: Gio.DBusMethodInvocation): void
    completeStop(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.MDRaid */
    connect(sigName: "handle-add-device", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-add-device", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-add-device", invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): void
    on(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-delete", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-delete", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-remove-device", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-remove-device", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-remove-device", invocation: Gio.DBusMethodInvocation, argDevice: string, argOptions: GLib.Variant): void
    on(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-request-sync-action", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation, argSyncAction: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-request-sync-action", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation, argSyncAction: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-request-sync-action", invocation: Gio.DBusMethodInvocation, argSyncAction: string, argOptions: GLib.Variant): void
    on(sigName: "handle-request-sync-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-request-sync-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-request-sync-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-bitmap-location", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation, argValue: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-bitmap-location", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation, argValue: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-bitmap-location", invocation: Gio.DBusMethodInvocation, argValue: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-bitmap-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-bitmap-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-bitmap-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-start", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-start", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-start", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-stop", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-stop", callback: (($obj: MDRaidSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-stop", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-devices", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-devices", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bitmap-location", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bitmap-location", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bitmap-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bitmap-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bitmap-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-configuration", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-configuration", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::chunk-size", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::chunk-size", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::chunk-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::chunk-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::chunk-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::degraded", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::degraded", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::degraded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::degraded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::degraded", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::level", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::level", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::num-devices", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::num-devices", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::num-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::num-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::num-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::running", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::running", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::running", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::running", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::running", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sync-action", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sync-action", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sync-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sync-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sync-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sync-completed", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sync-completed", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sync-completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sync-completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sync-completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sync-rate", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sync-rate", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sync-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sync-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sync-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sync-remaining-time", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sync-remaining-time", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sync-remaining-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sync-remaining-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sync-remaining-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uuid", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: MDRaidSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: MDRaidSkeleton_ConstructProps)
    _init (config?: MDRaidSkeleton_ConstructProps): void
    static new(): MDRaidSkeleton
    static $gtype: GObject.Type
}
export interface ManagerBTRFSProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class ManagerBTRFSProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Fields of UDisks.ManagerBTRFSProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.ManagerBTRFS */
    callCreateVolume(argDevices: string, argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateVolumeFinish(res: Gio.AsyncResult): boolean
    callCreateVolumeSync(argDevices: string, argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeCreateVolume(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: ManagerBTRFSProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: ManagerBTRFSProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: ManagerBTRFSProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: ManagerBTRFSProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ManagerBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ManagerBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.ManagerBTRFS */
    connect(sigName: "handle-create-volume", callback: (($obj: ManagerBTRFSProxy, invocation: Gio.DBusMethodInvocation, argDevices: string[], argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-volume", callback: (($obj: ManagerBTRFSProxy, invocation: Gio.DBusMethodInvocation, argDevices: string[], argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-volume", invocation: Gio.DBusMethodInvocation, argDevices: string[], argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant): void
    on(sigName: "handle-create-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: ManagerBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: ManagerBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: ManagerBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: ManagerBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: ManagerBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: ManagerBTRFSProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ManagerBTRFSProxy_ConstructProps)
    _init (config?: ManagerBTRFSProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): ManagerBTRFSProxy
    static newForBusFinish(res: Gio.AsyncResult): ManagerBTRFSProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ManagerBTRFSProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ManagerBTRFSProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface ManagerBTRFSSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class ManagerBTRFSSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Fields of UDisks.ManagerBTRFSSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.ManagerBTRFS */
    callCreateVolume(argDevices: string, argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateVolumeFinish(res: Gio.AsyncResult): boolean
    callCreateVolumeSync(argDevices: string, argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeCreateVolume(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: ManagerBTRFSSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: ManagerBTRFSSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ManagerBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ManagerBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.ManagerBTRFS */
    connect(sigName: "handle-create-volume", callback: (($obj: ManagerBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argDevices: string[], argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-volume", callback: (($obj: ManagerBTRFSSkeleton, invocation: Gio.DBusMethodInvocation, argDevices: string[], argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-volume", invocation: Gio.DBusMethodInvocation, argDevices: string[], argLabel: string, argDataLevel: string, argMdLevel: string, argOptions: GLib.Variant): void
    on(sigName: "handle-create-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: ManagerBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: ManagerBTRFSSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ManagerBTRFSSkeleton_ConstructProps)
    _init (config?: ManagerBTRFSSkeleton_ConstructProps): void
    static new(): ManagerBTRFSSkeleton
    static $gtype: GObject.Type
}
export interface ManagerBcacheProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class ManagerBcacheProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Fields of UDisks.ManagerBcacheProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.ManagerBcache */
    callBcacheCreate(argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callBcacheCreateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outBcache */ string | null ]
    callBcacheCreateSync(argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outBcache */ string | null ]
    completeBcacheCreate(invocation: Gio.DBusMethodInvocation, bcache: string): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: ManagerBcacheProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: ManagerBcacheProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: ManagerBcacheProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: ManagerBcacheProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ManagerBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ManagerBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.ManagerBcache */
    connect(sigName: "handle-bcache-create", callback: (($obj: ManagerBcacheProxy, invocation: Gio.DBusMethodInvocation, argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-bcache-create", callback: (($obj: ManagerBcacheProxy, invocation: Gio.DBusMethodInvocation, argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-bcache-create", invocation: Gio.DBusMethodInvocation, argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant): void
    on(sigName: "handle-bcache-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-bcache-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-bcache-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: ManagerBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: ManagerBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: ManagerBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: ManagerBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: ManagerBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: ManagerBcacheProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ManagerBcacheProxy_ConstructProps)
    _init (config?: ManagerBcacheProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): ManagerBcacheProxy
    static newForBusFinish(res: Gio.AsyncResult): ManagerBcacheProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ManagerBcacheProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ManagerBcacheProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface ManagerBcacheSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class ManagerBcacheSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Fields of UDisks.ManagerBcacheSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.ManagerBcache */
    callBcacheCreate(argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callBcacheCreateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outBcache */ string | null ]
    callBcacheCreateSync(argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outBcache */ string | null ]
    completeBcacheCreate(invocation: Gio.DBusMethodInvocation, bcache: string): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: ManagerBcacheSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: ManagerBcacheSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ManagerBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ManagerBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.ManagerBcache */
    connect(sigName: "handle-bcache-create", callback: (($obj: ManagerBcacheSkeleton, invocation: Gio.DBusMethodInvocation, argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-bcache-create", callback: (($obj: ManagerBcacheSkeleton, invocation: Gio.DBusMethodInvocation, argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-bcache-create", invocation: Gio.DBusMethodInvocation, argBackingDev: string, argCacheDev: string, argOptions: GLib.Variant): void
    on(sigName: "handle-bcache-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-bcache-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-bcache-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: ManagerBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: ManagerBcacheSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ManagerBcacheSkeleton_ConstructProps)
    _init (config?: ManagerBcacheSkeleton_ConstructProps): void
    static new(): ManagerBcacheSkeleton
    static $gtype: GObject.Type
}
export interface ManagerLVM2Proxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class ManagerLVM2Proxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Fields of UDisks.ManagerLVM2Proxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.ManagerLVM2 */
    callVolumeGroupCreate(argName: string, argBlocks: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callVolumeGroupCreateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callVolumeGroupCreateSync(argName: string, argBlocks: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    completeVolumeGroupCreate(invocation: Gio.DBusMethodInvocation, result: string): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: ManagerLVM2Proxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: ManagerLVM2Proxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: ManagerLVM2Proxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: ManagerLVM2Proxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ManagerLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ManagerLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.ManagerLVM2 */
    connect(sigName: "handle-volume-group-create", callback: (($obj: ManagerLVM2Proxy, invocation: Gio.DBusMethodInvocation, argName: string, argBlocks: string[], argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-volume-group-create", callback: (($obj: ManagerLVM2Proxy, invocation: Gio.DBusMethodInvocation, argName: string, argBlocks: string[], argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-volume-group-create", invocation: Gio.DBusMethodInvocation, argName: string, argBlocks: string[], argOptions: GLib.Variant): void
    on(sigName: "handle-volume-group-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-volume-group-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-volume-group-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: ManagerLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: ManagerLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: ManagerLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: ManagerLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: ManagerLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: ManagerLVM2Proxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ManagerLVM2Proxy_ConstructProps)
    _init (config?: ManagerLVM2Proxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): ManagerLVM2Proxy
    static newForBusFinish(res: Gio.AsyncResult): ManagerLVM2Proxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ManagerLVM2Proxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ManagerLVM2Proxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface ManagerLVM2Skeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class ManagerLVM2Skeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Fields of UDisks.ManagerLVM2Skeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.ManagerLVM2 */
    callVolumeGroupCreate(argName: string, argBlocks: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callVolumeGroupCreateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callVolumeGroupCreateSync(argName: string, argBlocks: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    completeVolumeGroupCreate(invocation: Gio.DBusMethodInvocation, result: string): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: ManagerLVM2Skeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: ManagerLVM2Skeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ManagerLVM2Skeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ManagerLVM2Skeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.ManagerLVM2 */
    connect(sigName: "handle-volume-group-create", callback: (($obj: ManagerLVM2Skeleton, invocation: Gio.DBusMethodInvocation, argName: string, argBlocks: string[], argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-volume-group-create", callback: (($obj: ManagerLVM2Skeleton, invocation: Gio.DBusMethodInvocation, argName: string, argBlocks: string[], argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-volume-group-create", invocation: Gio.DBusMethodInvocation, argName: string, argBlocks: string[], argOptions: GLib.Variant): void
    on(sigName: "handle-volume-group-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-volume-group-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-volume-group-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: ManagerLVM2Skeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: ManagerLVM2Skeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ManagerLVM2Skeleton_ConstructProps)
    _init (config?: ManagerLVM2Skeleton_ConstructProps): void
    static new(): ManagerLVM2Skeleton
    static $gtype: GObject.Type
}
export interface ManagerProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class ManagerProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.Manager */
    defaultEncryptionType: string
    supportedEncryptionTypes: string[]
    supportedFilesystems: string[]
    version: string
    /* Fields of UDisks.ManagerProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.Manager */
    callCanCheck(argType: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCanCheckFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanCheckSync(argType: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanFormat(argType: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCanFormatFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanFormatSync(argType: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanRepair(argType: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCanRepairFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanRepairSync(argType: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanResize(argType: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCanResizeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanResizeSync(argType: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callEnableModule(argName: string, argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableModuleFinish(res: Gio.AsyncResult): boolean
    callEnableModuleSync(argName: string, argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callEnableModules(argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableModulesFinish(res: Gio.AsyncResult): boolean
    callEnableModulesSync(argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callGetBlockDevices(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetBlockDevicesFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outBlockObjects */ string[] | null ]
    callGetBlockDevicesSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outBlockObjects */ string[] | null ]
    callLoopSetup(argFd: GLib.Variant, argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callLoopSetupFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResultingDevice */ string | null, /* outFdList */ Gio.UnixFDList | null ]
    callLoopSetupSync(argFd: GLib.Variant, argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResultingDevice */ string | null, /* outFdList */ Gio.UnixFDList ]
    callMdraidCreate(argBlocks: string, argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callMdraidCreateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResultingArray */ string | null ]
    callMdraidCreateSync(argBlocks: string, argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResultingArray */ string | null ]
    callResolveDevice(argDevspec: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResolveDeviceFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outDevices */ string[] | null ]
    callResolveDeviceSync(argDevspec: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outDevices */ string[] | null ]
    completeCanCheck(invocation: Gio.DBusMethodInvocation, available: GLib.Variant): void
    completeCanFormat(invocation: Gio.DBusMethodInvocation, available: GLib.Variant): void
    completeCanRepair(invocation: Gio.DBusMethodInvocation, available: GLib.Variant): void
    completeCanResize(invocation: Gio.DBusMethodInvocation, available: GLib.Variant): void
    completeEnableModule(invocation: Gio.DBusMethodInvocation): void
    completeEnableModules(invocation: Gio.DBusMethodInvocation): void
    completeGetBlockDevices(invocation: Gio.DBusMethodInvocation, blockObjects: string): void
    completeLoopSetup(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, resultingDevice: string): void
    completeMdraidCreate(invocation: Gio.DBusMethodInvocation, resultingArray: string): void
    completeResolveDevice(invocation: Gio.DBusMethodInvocation, devices: string): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: ManagerProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: ManagerProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: ManagerProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: ManagerProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Manager */
    connect(sigName: "handle-can-check", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    connect_after(sigName: "handle-can-check", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    emit(sigName: "handle-can-check", invocation: Gio.DBusMethodInvocation, argType: string): void
    on(sigName: "handle-can-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-can-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-can-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-can-format", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    connect_after(sigName: "handle-can-format", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    emit(sigName: "handle-can-format", invocation: Gio.DBusMethodInvocation, argType: string): void
    on(sigName: "handle-can-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-can-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-can-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-can-repair", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    connect_after(sigName: "handle-can-repair", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    emit(sigName: "handle-can-repair", invocation: Gio.DBusMethodInvocation, argType: string): void
    on(sigName: "handle-can-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-can-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-can-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-can-resize", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    connect_after(sigName: "handle-can-resize", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    emit(sigName: "handle-can-resize", invocation: Gio.DBusMethodInvocation, argType: string): void
    on(sigName: "handle-can-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-can-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-can-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-enable-module", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argName: string, argEnable: boolean) => boolean)): number
    connect_after(sigName: "handle-enable-module", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argName: string, argEnable: boolean) => boolean)): number
    emit(sigName: "handle-enable-module", invocation: Gio.DBusMethodInvocation, argName: string, argEnable: boolean): void
    on(sigName: "handle-enable-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-enable-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-enable-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-enable-modules", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    connect_after(sigName: "handle-enable-modules", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    emit(sigName: "handle-enable-modules", invocation: Gio.DBusMethodInvocation, argEnable: boolean): void
    on(sigName: "handle-enable-modules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-enable-modules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-enable-modules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-get-block-devices", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-get-block-devices", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-get-block-devices", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-get-block-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-get-block-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-get-block-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-loop-setup", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argFd: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-loop-setup", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argFd: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-loop-setup", invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argFd: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-loop-setup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-loop-setup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-loop-setup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-mdraid-create", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argBlocks: string[], argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-mdraid-create", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argBlocks: string[], argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-mdraid-create", invocation: Gio.DBusMethodInvocation, argBlocks: string[], argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant): void
    on(sigName: "handle-mdraid-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-mdraid-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-mdraid-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resolve-device", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argDevspec: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resolve-device", callback: (($obj: ManagerProxy, invocation: Gio.DBusMethodInvocation, argDevspec: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resolve-device", invocation: Gio.DBusMethodInvocation, argDevspec: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-resolve-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resolve-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resolve-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-encryption-type", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-encryption-type", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-encryption-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-encryption-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-encryption-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-encryption-types", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-encryption-types", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-encryption-types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-encryption-types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-encryption-types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-filesystems", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-filesystems", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-filesystems", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-filesystems", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-filesystems", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::version", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::version", callback: (($obj: ManagerProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ManagerProxy_ConstructProps)
    _init (config?: ManagerProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): ManagerProxy
    static newForBusFinish(res: Gio.AsyncResult): ManagerProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ManagerProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ManagerProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface ManagerSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class ManagerSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.Manager */
    defaultEncryptionType: string
    supportedEncryptionTypes: string[]
    supportedFilesystems: string[]
    version: string
    /* Fields of UDisks.ManagerSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.Manager */
    callCanCheck(argType: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCanCheckFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanCheckSync(argType: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanFormat(argType: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCanFormatFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanFormatSync(argType: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanRepair(argType: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCanRepairFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanRepairSync(argType: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanResize(argType: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCanResizeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callCanResizeSync(argType: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outAvailable */ GLib.Variant | null ]
    callEnableModule(argName: string, argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableModuleFinish(res: Gio.AsyncResult): boolean
    callEnableModuleSync(argName: string, argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callEnableModules(argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableModulesFinish(res: Gio.AsyncResult): boolean
    callEnableModulesSync(argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callGetBlockDevices(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetBlockDevicesFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outBlockObjects */ string[] | null ]
    callGetBlockDevicesSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outBlockObjects */ string[] | null ]
    callLoopSetup(argFd: GLib.Variant, argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callLoopSetupFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResultingDevice */ string | null, /* outFdList */ Gio.UnixFDList | null ]
    callLoopSetupSync(argFd: GLib.Variant, argOptions: GLib.Variant, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResultingDevice */ string | null, /* outFdList */ Gio.UnixFDList ]
    callMdraidCreate(argBlocks: string, argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callMdraidCreateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResultingArray */ string | null ]
    callMdraidCreateSync(argBlocks: string, argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResultingArray */ string | null ]
    callResolveDevice(argDevspec: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResolveDeviceFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outDevices */ string[] | null ]
    callResolveDeviceSync(argDevspec: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outDevices */ string[] | null ]
    completeCanCheck(invocation: Gio.DBusMethodInvocation, available: GLib.Variant): void
    completeCanFormat(invocation: Gio.DBusMethodInvocation, available: GLib.Variant): void
    completeCanRepair(invocation: Gio.DBusMethodInvocation, available: GLib.Variant): void
    completeCanResize(invocation: Gio.DBusMethodInvocation, available: GLib.Variant): void
    completeEnableModule(invocation: Gio.DBusMethodInvocation): void
    completeEnableModules(invocation: Gio.DBusMethodInvocation): void
    completeGetBlockDevices(invocation: Gio.DBusMethodInvocation, blockObjects: string): void
    completeLoopSetup(invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, resultingDevice: string): void
    completeMdraidCreate(invocation: Gio.DBusMethodInvocation, resultingArray: string): void
    completeResolveDevice(invocation: Gio.DBusMethodInvocation, devices: string): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ManagerSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ManagerSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Manager */
    connect(sigName: "handle-can-check", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    connect_after(sigName: "handle-can-check", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    emit(sigName: "handle-can-check", invocation: Gio.DBusMethodInvocation, argType: string): void
    on(sigName: "handle-can-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-can-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-can-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-can-format", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    connect_after(sigName: "handle-can-format", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    emit(sigName: "handle-can-format", invocation: Gio.DBusMethodInvocation, argType: string): void
    on(sigName: "handle-can-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-can-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-can-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-can-repair", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    connect_after(sigName: "handle-can-repair", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    emit(sigName: "handle-can-repair", invocation: Gio.DBusMethodInvocation, argType: string): void
    on(sigName: "handle-can-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-can-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-can-repair", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-can-resize", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    connect_after(sigName: "handle-can-resize", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argType: string) => boolean)): number
    emit(sigName: "handle-can-resize", invocation: Gio.DBusMethodInvocation, argType: string): void
    on(sigName: "handle-can-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-can-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-can-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-enable-module", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argEnable: boolean) => boolean)): number
    connect_after(sigName: "handle-enable-module", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argEnable: boolean) => boolean)): number
    emit(sigName: "handle-enable-module", invocation: Gio.DBusMethodInvocation, argName: string, argEnable: boolean): void
    on(sigName: "handle-enable-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-enable-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-enable-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-enable-modules", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    connect_after(sigName: "handle-enable-modules", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    emit(sigName: "handle-enable-modules", invocation: Gio.DBusMethodInvocation, argEnable: boolean): void
    on(sigName: "handle-enable-modules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-enable-modules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-enable-modules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-get-block-devices", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-get-block-devices", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-get-block-devices", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-get-block-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-get-block-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-get-block-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-loop-setup", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argFd: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-loop-setup", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argFd: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-loop-setup", invocation: Gio.DBusMethodInvocation, fdList: Gio.UnixFDList | null, argFd: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-loop-setup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-loop-setup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-loop-setup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-mdraid-create", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argBlocks: string[], argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-mdraid-create", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argBlocks: string[], argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-mdraid-create", invocation: Gio.DBusMethodInvocation, argBlocks: string[], argLevel: string, argName: string, argChunk: number, argOptions: GLib.Variant): void
    on(sigName: "handle-mdraid-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-mdraid-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-mdraid-create", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resolve-device", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argDevspec: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resolve-device", callback: (($obj: ManagerSkeleton, invocation: Gio.DBusMethodInvocation, argDevspec: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resolve-device", invocation: Gio.DBusMethodInvocation, argDevspec: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-resolve-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resolve-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resolve-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: ManagerSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: ManagerSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-encryption-type", callback: (($obj: ManagerSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-encryption-type", callback: (($obj: ManagerSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-encryption-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-encryption-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-encryption-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-encryption-types", callback: (($obj: ManagerSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-encryption-types", callback: (($obj: ManagerSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-encryption-types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-encryption-types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-encryption-types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-filesystems", callback: (($obj: ManagerSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-filesystems", callback: (($obj: ManagerSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-filesystems", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-filesystems", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-filesystems", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::version", callback: (($obj: ManagerSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::version", callback: (($obj: ManagerSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ManagerSkeleton_ConstructProps)
    _init (config?: ManagerSkeleton_ConstructProps): void
    static new(): ManagerSkeleton
    static $gtype: GObject.Type
}
export interface ManagerZRAMProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class ManagerZRAMProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Fields of UDisks.ManagerZRAMProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.ManagerZRAM */
    callCreateDevices(argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateDevicesFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outZrams */ string[] | null ]
    callCreateDevicesSync(argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outZrams */ string[] | null ]
    callDestroyDevices(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDestroyDevicesFinish(res: Gio.AsyncResult): boolean
    callDestroyDevicesSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeCreateDevices(invocation: Gio.DBusMethodInvocation, zrams: string): void
    completeDestroyDevices(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: ManagerZRAMProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: ManagerZRAMProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: ManagerZRAMProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: ManagerZRAMProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ManagerZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ManagerZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.ManagerZRAM */
    connect(sigName: "handle-create-devices", callback: (($obj: ManagerZRAMProxy, invocation: Gio.DBusMethodInvocation, argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-devices", callback: (($obj: ManagerZRAMProxy, invocation: Gio.DBusMethodInvocation, argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-devices", invocation: Gio.DBusMethodInvocation, argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-create-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-destroy-devices", callback: (($obj: ManagerZRAMProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-destroy-devices", callback: (($obj: ManagerZRAMProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-destroy-devices", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-destroy-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-destroy-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-destroy-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: ManagerZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: ManagerZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: ManagerZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: ManagerZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: ManagerZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: ManagerZRAMProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ManagerZRAMProxy_ConstructProps)
    _init (config?: ManagerZRAMProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): ManagerZRAMProxy
    static newForBusFinish(res: Gio.AsyncResult): ManagerZRAMProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ManagerZRAMProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ManagerZRAMProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface ManagerZRAMSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class ManagerZRAMSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Fields of UDisks.ManagerZRAMSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.ManagerZRAM */
    callCreateDevices(argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateDevicesFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outZrams */ string[] | null ]
    callCreateDevicesSync(argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outZrams */ string[] | null ]
    callDestroyDevices(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDestroyDevicesFinish(res: Gio.AsyncResult): boolean
    callDestroyDevicesSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeCreateDevices(invocation: Gio.DBusMethodInvocation, zrams: string): void
    completeDestroyDevices(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: ManagerZRAMSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: ManagerZRAMSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ManagerZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ManagerZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.ManagerZRAM */
    connect(sigName: "handle-create-devices", callback: (($obj: ManagerZRAMSkeleton, invocation: Gio.DBusMethodInvocation, argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-devices", callback: (($obj: ManagerZRAMSkeleton, invocation: Gio.DBusMethodInvocation, argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-devices", invocation: Gio.DBusMethodInvocation, argSizes: GLib.Variant, argNumStreams: GLib.Variant, argOptions: GLib.Variant): void
    on(sigName: "handle-create-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-destroy-devices", callback: (($obj: ManagerZRAMSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-destroy-devices", callback: (($obj: ManagerZRAMSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-destroy-devices", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-destroy-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-destroy-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-destroy-devices", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: ManagerZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: ManagerZRAMSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ManagerZRAMSkeleton_ConstructProps)
    _init (config?: ManagerZRAMSkeleton_ConstructProps): void
    static new(): ManagerZRAMSkeleton
    static $gtype: GObject.Type
}
export interface ObjectInfo_ConstructProps extends GObject.Object_ConstructProps {
}
export class ObjectInfo {
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of UDisks.ObjectInfo */
    getDescription(): string
    getIcon(): Gio.Icon
    getIconSymbolic(): Gio.Icon
    getMediaDescription(): string
    getMediaIcon(): Gio.Icon
    getMediaIconSymbolic(): Gio.Icon
    getName(): string
    getObject(): Object
    getOneLiner(): string
    getSortKey(): string
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ObjectInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ObjectInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ObjectInfo_ConstructProps)
    _init (config?: ObjectInfo_ConstructProps): void
    static $gtype: GObject.Type
}
export interface ObjectManagerClient_ConstructProps extends Gio.DBusObjectManagerClient_ConstructProps {
}
export class ObjectManagerClient {
    /* Properties of Gio.DBusObjectManagerClient */
    readonly nameOwner: string
    /* Fields of UDisks.ObjectManagerClient */
    /* Fields of Gio.DBusObjectManagerClient */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusObjectManagerClient */
    getConnection(): Gio.DBusConnection
    getFlags(): Gio.DBusObjectManagerClientFlags
    getName(): string
    getNameOwner(): string | null
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusObjectManager */
    getInterface(objectPath: string, interfaceName: string): Gio.DBusInterface
    getObject(objectPath: string): Gio.DBusObject
    getObjectPath(): string
    getObjects(): Gio.DBusObject[]
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Gio.DBusObjectManagerClient */
    vfuncInterfaceProxyPropertiesChanged?(objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncInterfaceProxySignal?(objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusObjectManagerClient */
    connect(sigName: "interface-proxy-properties-changed", callback: (($obj: ObjectManagerClient, objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "interface-proxy-properties-changed", callback: (($obj: ObjectManagerClient, objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "interface-proxy-properties-changed", objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "interface-proxy-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "interface-proxy-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "interface-proxy-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "interface-proxy-signal", callback: (($obj: ObjectManagerClient, objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, senderName: string, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "interface-proxy-signal", callback: (($obj: ObjectManagerClient, objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, senderName: string, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "interface-proxy-signal", objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, senderName: string, signalName: string, parameters: GLib.Variant): void
    on(sigName: "interface-proxy-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "interface-proxy-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "interface-proxy-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ObjectManagerClient, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ObjectManagerClient, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of Gio.DBusObjectManager */
    connect(sigName: "interface-added", callback: (($obj: ObjectManagerClient, object: Gio.DBusObject, interface: Gio.DBusInterface) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: ObjectManagerClient, object: Gio.DBusObject, interface: Gio.DBusInterface) => void)): number
    emit(sigName: "interface-added", object: Gio.DBusObject, interface: Gio.DBusInterface): void
    on(sigName: "interface-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "interface-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "interface-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "interface-removed", callback: (($obj: ObjectManagerClient, object: Gio.DBusObject, interface: Gio.DBusInterface) => void)): number
    connect_after(sigName: "interface-removed", callback: (($obj: ObjectManagerClient, object: Gio.DBusObject, interface: Gio.DBusInterface) => void)): number
    emit(sigName: "interface-removed", object: Gio.DBusObject, interface: Gio.DBusInterface): void
    on(sigName: "interface-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "interface-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "interface-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "object-added", callback: (($obj: ObjectManagerClient, object: Gio.DBusObject) => void)): number
    connect_after(sigName: "object-added", callback: (($obj: ObjectManagerClient, object: Gio.DBusObject) => void)): number
    emit(sigName: "object-added", object: Gio.DBusObject): void
    on(sigName: "object-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "object-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "object-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "object-removed", callback: (($obj: ObjectManagerClient, object: Gio.DBusObject) => void)): number
    connect_after(sigName: "object-removed", callback: (($obj: ObjectManagerClient, object: Gio.DBusObject) => void)): number
    emit(sigName: "object-removed", object: Gio.DBusObject): void
    on(sigName: "object-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "object-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "object-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name-owner", callback: (($obj: ObjectManagerClient, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name-owner", callback: (($obj: ObjectManagerClient, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ObjectManagerClient_ConstructProps)
    _init (config?: ObjectManagerClient_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): ObjectManagerClient
    static newForBusFinish(res: Gio.AsyncResult): ObjectManagerClient
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusObjectManagerClientFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ObjectManagerClient
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusObjectManagerClientFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ObjectManagerClient
    static getProxyType(manager: Gio.DBusObjectManagerClient, objectPath: string, interfaceName?: string | null, userData?: object | null): GObject.Type
    static newForBus(busType: Gio.BusType, flags: Gio.DBusObjectManagerClientFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface ObjectProxy_ConstructProps extends Gio.DBusObjectProxy_ConstructProps {
}
export class ObjectProxy {
    /* Properties of Gio.DBusObjectProxy */
    /* Properties of UDisks.Object */
    block: Block
    blockBcache: BlockBcache
    blockLvm2: BlockLVM2
    blockZram: BlockZRAM
    drive: Drive
    driveAta: DriveAta
    encrypted: Encrypted
    filesystem: Filesystem
    filesystemBtrfs: FilesystemBTRFS
    job: Job
    logicalVolume: LogicalVolume
    loop: Loop
    manager: Manager
    managerBcache: ManagerBcache
    managerBtrfs: ManagerBTRFS
    managerLvm2: ManagerLVM2
    managerZram: ManagerZRAM
    mdraid: MDRaid
    partition: Partition
    partitionTable: PartitionTable
    physicalVolume: PhysicalVolume
    swapspace: Swapspace
    vdoVolume: VDOVolume
    volumeGroup: VolumeGroup
    /* Fields of UDisks.ObjectProxy */
    /* Fields of Gio.DBusObjectProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusObjectProxy */
    getConnection(): Gio.DBusConnection
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusObject */
    getInterface(interfaceName: string): Gio.DBusInterface | null
    getInterfaces(): Gio.DBusInterface[]
    getObjectPath(): string
    /* Methods of UDisks.Object */
    getBlock(): Block | null
    getBlockBcache(): BlockBcache | null
    getBlockLvm2(): BlockLVM2 | null
    getBlockZram(): BlockZRAM | null
    getDrive(): Drive | null
    getDriveAta(): DriveAta | null
    getEncrypted(): Encrypted | null
    getFilesystem(): Filesystem | null
    getFilesystemBtrfs(): FilesystemBTRFS | null
    getJob(): Job | null
    getLogicalVolume(): LogicalVolume | null
    getLoop(): Loop | null
    getManager(): Manager | null
    getManagerBcache(): ManagerBcache | null
    getManagerBtrfs(): ManagerBTRFS | null
    getManagerLvm2(): ManagerLVM2 | null
    getManagerZram(): ManagerZRAM | null
    getMdraid(): MDRaid | null
    getPartition(): Partition | null
    getPartitionTable(): PartitionTable | null
    getPhysicalVolume(): PhysicalVolume | null
    getSwapspace(): Swapspace | null
    getVdoVolume(): VDOVolume | null
    getVolumeGroup(): VolumeGroup | null
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of Gio.DBusObject */
    connect(sigName: "interface-added", callback: (($obj: ObjectProxy, interface: Gio.DBusInterface) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: ObjectProxy, interface: Gio.DBusInterface) => void)): number
    emit(sigName: "interface-added", interface: Gio.DBusInterface): void
    on(sigName: "interface-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "interface-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "interface-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "interface-removed", callback: (($obj: ObjectProxy, interface: Gio.DBusInterface) => void)): number
    connect_after(sigName: "interface-removed", callback: (($obj: ObjectProxy, interface: Gio.DBusInterface) => void)): number
    emit(sigName: "interface-removed", interface: Gio.DBusInterface): void
    on(sigName: "interface-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "interface-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "interface-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block-bcache", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block-bcache", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block-bcache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block-bcache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block-bcache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block-lvm2", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block-lvm2", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block-lvm2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block-lvm2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block-lvm2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block-zram", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block-zram", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block-zram", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block-zram", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block-zram", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::drive", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::drive", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::drive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::drive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::drive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::drive-ata", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::drive-ata", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::drive-ata", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::drive-ata", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::drive-ata", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::encrypted", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encrypted", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::encrypted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::encrypted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::encrypted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filesystem", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filesystem", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filesystem", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filesystem", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filesystem", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filesystem-btrfs", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filesystem-btrfs", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filesystem-btrfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filesystem-btrfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filesystem-btrfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::job", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::job", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::job", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::job", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::job", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::logical-volume", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::logical-volume", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::logical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::logical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::logical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::loop", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::loop", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manager", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manager", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manager-bcache", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manager-bcache", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manager-bcache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manager-bcache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manager-bcache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manager-btrfs", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manager-btrfs", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manager-btrfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manager-btrfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manager-btrfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manager-lvm2", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manager-lvm2", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manager-lvm2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manager-lvm2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manager-lvm2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manager-zram", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manager-zram", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manager-zram", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manager-zram", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manager-zram", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mdraid", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mdraid", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mdraid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mdraid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mdraid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::partition", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::partition", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::partition", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::partition", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::partition", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::partition-table", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::partition-table", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::partition-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::partition-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::partition-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-volume", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-volume", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::swapspace", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::swapspace", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::swapspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::swapspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::swapspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vdo-volume", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vdo-volume", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vdo-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vdo-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vdo-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::volume-group", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::volume-group", callback: (($obj: ObjectProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ObjectProxy_ConstructProps)
    _init (config?: ObjectProxy_ConstructProps): void
    static new(connection: Gio.DBusConnection, objectPath: string): ObjectProxy
    static $gtype: GObject.Type
}
export interface ObjectSkeleton_ConstructProps extends Gio.DBusObjectSkeleton_ConstructProps {
}
export class ObjectSkeleton {
    /* Properties of Gio.DBusObjectSkeleton */
    gObjectPath: string
    /* Properties of UDisks.Object */
    block: Block
    blockBcache: BlockBcache
    blockLvm2: BlockLVM2
    blockZram: BlockZRAM
    drive: Drive
    driveAta: DriveAta
    encrypted: Encrypted
    filesystem: Filesystem
    filesystemBtrfs: FilesystemBTRFS
    job: Job
    logicalVolume: LogicalVolume
    loop: Loop
    manager: Manager
    managerBcache: ManagerBcache
    managerBtrfs: ManagerBTRFS
    managerLvm2: ManagerLVM2
    managerZram: ManagerZRAM
    mdraid: MDRaid
    partition: Partition
    partitionTable: PartitionTable
    physicalVolume: PhysicalVolume
    swapspace: Swapspace
    vdoVolume: VDOVolume
    volumeGroup: VolumeGroup
    /* Fields of UDisks.ObjectSkeleton */
    /* Fields of Gio.DBusObjectSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of UDisks.ObjectSkeleton */
    setBlock(interface?: Block | null): void
    setBlockBcache(interface?: BlockBcache | null): void
    setBlockLvm2(interface?: BlockLVM2 | null): void
    setBlockZram(interface?: BlockZRAM | null): void
    setDrive(interface?: Drive | null): void
    setDriveAta(interface?: DriveAta | null): void
    setEncrypted(interface?: Encrypted | null): void
    setFilesystem(interface?: Filesystem | null): void
    setFilesystemBtrfs(interface?: FilesystemBTRFS | null): void
    setJob(interface?: Job | null): void
    setLogicalVolume(interface?: LogicalVolume | null): void
    setLoop(interface?: Loop | null): void
    setManager(interface?: Manager | null): void
    setManagerBcache(interface?: ManagerBcache | null): void
    setManagerBtrfs(interface?: ManagerBTRFS | null): void
    setManagerLvm2(interface?: ManagerLVM2 | null): void
    setManagerZram(interface?: ManagerZRAM | null): void
    setMdraid(interface?: MDRaid | null): void
    setPartition(interface?: Partition | null): void
    setPartitionTable(interface?: PartitionTable | null): void
    setPhysicalVolume(interface?: PhysicalVolume | null): void
    setSwapspace(interface?: Swapspace | null): void
    setVdoVolume(interface?: VDOVolume | null): void
    setVolumeGroup(interface?: VolumeGroup | null): void
    /* Methods of Gio.DBusObjectSkeleton */
    addInterface(interface: Gio.DBusInterfaceSkeleton): void
    flush(): void
    removeInterface(interface: Gio.DBusInterfaceSkeleton): void
    removeInterfaceByName(interfaceName: string): void
    setObjectPath(objectPath: string): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusObject */
    getInterface(interfaceName: string): Gio.DBusInterface | null
    getInterfaces(): Gio.DBusInterface[]
    getObjectPath(): string
    /* Methods of UDisks.Object */
    getBlock(): Block | null
    getBlockBcache(): BlockBcache | null
    getBlockLvm2(): BlockLVM2 | null
    getBlockZram(): BlockZRAM | null
    getDrive(): Drive | null
    getDriveAta(): DriveAta | null
    getEncrypted(): Encrypted | null
    getFilesystem(): Filesystem | null
    getFilesystemBtrfs(): FilesystemBTRFS | null
    getJob(): Job | null
    getLogicalVolume(): LogicalVolume | null
    getLoop(): Loop | null
    getManager(): Manager | null
    getManagerBcache(): ManagerBcache | null
    getManagerBtrfs(): ManagerBTRFS | null
    getManagerLvm2(): ManagerLVM2 | null
    getManagerZram(): ManagerZRAM | null
    getMdraid(): MDRaid | null
    getPartition(): Partition | null
    getPartitionTable(): PartitionTable | null
    getPhysicalVolume(): PhysicalVolume | null
    getSwapspace(): Swapspace | null
    getVdoVolume(): VDOVolume | null
    getVolumeGroup(): VolumeGroup | null
    /* Virtual methods of Gio.DBusObjectSkeleton */
    vfuncAuthorizeMethod?(interface: Gio.DBusInterfaceSkeleton, invocation: Gio.DBusMethodInvocation): boolean
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusObjectSkeleton */
    connect(sigName: "authorize-method", callback: (($obj: ObjectSkeleton, interface: Gio.DBusInterfaceSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "authorize-method", callback: (($obj: ObjectSkeleton, interface: Gio.DBusInterfaceSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "authorize-method", interface: Gio.DBusInterfaceSkeleton, invocation: Gio.DBusMethodInvocation): void
    on(sigName: "authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of Gio.DBusObject */
    connect(sigName: "interface-added", callback: (($obj: ObjectSkeleton, interface: Gio.DBusInterface) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: ObjectSkeleton, interface: Gio.DBusInterface) => void)): number
    emit(sigName: "interface-added", interface: Gio.DBusInterface): void
    on(sigName: "interface-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "interface-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "interface-added", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "interface-removed", callback: (($obj: ObjectSkeleton, interface: Gio.DBusInterface) => void)): number
    connect_after(sigName: "interface-removed", callback: (($obj: ObjectSkeleton, interface: Gio.DBusInterface) => void)): number
    emit(sigName: "interface-removed", interface: Gio.DBusInterface): void
    on(sigName: "interface-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "interface-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "interface-removed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-object-path", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-object-path", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-object-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-object-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-object-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block-bcache", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block-bcache", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block-bcache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block-bcache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block-bcache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block-lvm2", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block-lvm2", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block-lvm2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block-lvm2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block-lvm2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block-zram", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block-zram", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block-zram", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block-zram", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block-zram", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::drive", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::drive", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::drive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::drive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::drive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::drive-ata", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::drive-ata", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::drive-ata", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::drive-ata", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::drive-ata", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::encrypted", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encrypted", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::encrypted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::encrypted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::encrypted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filesystem", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filesystem", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filesystem", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filesystem", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filesystem", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filesystem-btrfs", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filesystem-btrfs", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filesystem-btrfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filesystem-btrfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filesystem-btrfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::job", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::job", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::job", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::job", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::job", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::logical-volume", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::logical-volume", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::logical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::logical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::logical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::loop", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::loop", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::loop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manager", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manager", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manager-bcache", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manager-bcache", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manager-bcache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manager-bcache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manager-bcache", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manager-btrfs", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manager-btrfs", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manager-btrfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manager-btrfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manager-btrfs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manager-lvm2", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manager-lvm2", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manager-lvm2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manager-lvm2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manager-lvm2", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manager-zram", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manager-zram", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manager-zram", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manager-zram", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manager-zram", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mdraid", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mdraid", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mdraid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mdraid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mdraid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::partition", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::partition", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::partition", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::partition", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::partition", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::partition-table", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::partition-table", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::partition-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::partition-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::partition-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::physical-volume", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::physical-volume", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::physical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::physical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::physical-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::swapspace", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::swapspace", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::swapspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::swapspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::swapspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vdo-volume", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vdo-volume", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vdo-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vdo-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vdo-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::volume-group", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::volume-group", callback: (($obj: ObjectSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ObjectSkeleton_ConstructProps)
    _init (config?: ObjectSkeleton_ConstructProps): void
    static new(objectPath: string): ObjectSkeleton
    static $gtype: GObject.Type
}
export interface PartitionProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class PartitionProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.Partition */
    flags: number
    isContained: boolean
    isContainer: boolean
    name: string
    number: number
    offset: number
    size: number
    table: string
    type: string
    uuid: string
    /* Fields of UDisks.PartitionProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.Partition */
    callDelete(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callResize(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeFinish(res: Gio.AsyncResult): boolean
    callResizeSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetFlags(argFlags: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetFlagsFinish(res: Gio.AsyncResult): boolean
    callSetFlagsSync(argFlags: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetName(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetNameFinish(res: Gio.AsyncResult): boolean
    callSetNameSync(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetType(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetTypeFinish(res: Gio.AsyncResult): boolean
    callSetTypeSync(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeResize(invocation: Gio.DBusMethodInvocation): void
    completeSetFlags(invocation: Gio.DBusMethodInvocation): void
    completeSetName(invocation: Gio.DBusMethodInvocation): void
    completeSetType(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: PartitionProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: PartitionProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: PartitionProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: PartitionProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Partition */
    connect(sigName: "handle-delete", callback: (($obj: PartitionProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-delete", callback: (($obj: PartitionProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize", callback: (($obj: PartitionProxy, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize", callback: (($obj: PartitionProxy, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-flags", callback: (($obj: PartitionProxy, invocation: Gio.DBusMethodInvocation, argFlags: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-flags", callback: (($obj: PartitionProxy, invocation: Gio.DBusMethodInvocation, argFlags: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-flags", invocation: Gio.DBusMethodInvocation, argFlags: number, argOptions: GLib.Variant): void
    on(sigName: "handle-set-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-name", callback: (($obj: PartitionProxy, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-name", callback: (($obj: PartitionProxy, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-name", invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-type", callback: (($obj: PartitionProxy, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-type", callback: (($obj: PartitionProxy, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-type", invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::flags", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-contained", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-contained", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-contained", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-contained", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-contained", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-container", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-container", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::table", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::table", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uuid", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: PartitionProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: PartitionProxy_ConstructProps)
    _init (config?: PartitionProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): PartitionProxy
    static newForBusFinish(res: Gio.AsyncResult): PartitionProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): PartitionProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): PartitionProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface PartitionSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class PartitionSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.Partition */
    flags: number
    isContained: boolean
    isContainer: boolean
    name: string
    number: number
    offset: number
    size: number
    table: string
    type: string
    uuid: string
    /* Fields of UDisks.PartitionSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.Partition */
    callDelete(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callResize(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeFinish(res: Gio.AsyncResult): boolean
    callResizeSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetFlags(argFlags: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetFlagsFinish(res: Gio.AsyncResult): boolean
    callSetFlagsSync(argFlags: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetName(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetNameFinish(res: Gio.AsyncResult): boolean
    callSetNameSync(argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetType(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetTypeFinish(res: Gio.AsyncResult): boolean
    callSetTypeSync(argType: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeResize(invocation: Gio.DBusMethodInvocation): void
    completeSetFlags(invocation: Gio.DBusMethodInvocation): void
    completeSetName(invocation: Gio.DBusMethodInvocation): void
    completeSetType(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: PartitionSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: PartitionSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Partition */
    connect(sigName: "handle-delete", callback: (($obj: PartitionSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-delete", callback: (($obj: PartitionSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize", callback: (($obj: PartitionSkeleton, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize", callback: (($obj: PartitionSkeleton, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-flags", callback: (($obj: PartitionSkeleton, invocation: Gio.DBusMethodInvocation, argFlags: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-flags", callback: (($obj: PartitionSkeleton, invocation: Gio.DBusMethodInvocation, argFlags: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-flags", invocation: Gio.DBusMethodInvocation, argFlags: number, argOptions: GLib.Variant): void
    on(sigName: "handle-set-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-name", callback: (($obj: PartitionSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-name", callback: (($obj: PartitionSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-name", invocation: Gio.DBusMethodInvocation, argName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-set-type", callback: (($obj: PartitionSkeleton, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-type", callback: (($obj: PartitionSkeleton, invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-type", invocation: Gio.DBusMethodInvocation, argType: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::flags", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-contained", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-contained", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-contained", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-contained", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-contained", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-container", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-container", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::table", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::table", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uuid", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: PartitionSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: PartitionSkeleton_ConstructProps)
    _init (config?: PartitionSkeleton_ConstructProps): void
    static new(): PartitionSkeleton
    static $gtype: GObject.Type
}
export interface PartitionTableProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class PartitionTableProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.PartitionTable */
    partitions: string[]
    type: string
    /* Fields of UDisks.PartitionTableProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.PartitionTable */
    callCreatePartition(argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreatePartitionAndFormat(argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreatePartitionAndFormatFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outCreatedPartition */ string | null ]
    callCreatePartitionAndFormatSync(argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outCreatedPartition */ string | null ]
    callCreatePartitionFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outCreatedPartition */ string | null ]
    callCreatePartitionSync(argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outCreatedPartition */ string | null ]
    completeCreatePartition(invocation: Gio.DBusMethodInvocation, createdPartition: string): void
    completeCreatePartitionAndFormat(invocation: Gio.DBusMethodInvocation, createdPartition: string): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: PartitionTableProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: PartitionTableProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: PartitionTableProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: PartitionTableProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: PartitionTableProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: PartitionTableProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.PartitionTable */
    connect(sigName: "handle-create-partition", callback: (($obj: PartitionTableProxy, invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-partition", callback: (($obj: PartitionTableProxy, invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-partition", invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-create-partition", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-partition", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-partition", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-partition-and-format", callback: (($obj: PartitionTableProxy, invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-partition-and-format", callback: (($obj: PartitionTableProxy, invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-partition-and-format", invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant): void
    on(sigName: "handle-create-partition-and-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-partition-and-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-partition-and-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: PartitionTableProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: PartitionTableProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: PartitionTableProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: PartitionTableProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: PartitionTableProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: PartitionTableProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::partitions", callback: (($obj: PartitionTableProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::partitions", callback: (($obj: PartitionTableProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::partitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::partitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::partitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: PartitionTableProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: PartitionTableProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: PartitionTableProxy_ConstructProps)
    _init (config?: PartitionTableProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): PartitionTableProxy
    static newForBusFinish(res: Gio.AsyncResult): PartitionTableProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): PartitionTableProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): PartitionTableProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface PartitionTableSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class PartitionTableSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.PartitionTable */
    partitions: string[]
    type: string
    /* Fields of UDisks.PartitionTableSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.PartitionTable */
    callCreatePartition(argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreatePartitionAndFormat(argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreatePartitionAndFormatFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outCreatedPartition */ string | null ]
    callCreatePartitionAndFormatSync(argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outCreatedPartition */ string | null ]
    callCreatePartitionFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outCreatedPartition */ string | null ]
    callCreatePartitionSync(argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outCreatedPartition */ string | null ]
    completeCreatePartition(invocation: Gio.DBusMethodInvocation, createdPartition: string): void
    completeCreatePartitionAndFormat(invocation: Gio.DBusMethodInvocation, createdPartition: string): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: PartitionTableSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: PartitionTableSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: PartitionTableSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: PartitionTableSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.PartitionTable */
    connect(sigName: "handle-create-partition", callback: (($obj: PartitionTableSkeleton, invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-partition", callback: (($obj: PartitionTableSkeleton, invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-partition", invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-create-partition", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-partition", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-partition", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-partition-and-format", callback: (($obj: PartitionTableSkeleton, invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-partition-and-format", callback: (($obj: PartitionTableSkeleton, invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-partition-and-format", invocation: Gio.DBusMethodInvocation, argOffset: number, argSize: number, argType: string, argName: string, argOptions: GLib.Variant, argFormatType: string, argFormatOptions: GLib.Variant): void
    on(sigName: "handle-create-partition-and-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-partition-and-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-partition-and-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: PartitionTableSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: PartitionTableSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::partitions", callback: (($obj: PartitionTableSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::partitions", callback: (($obj: PartitionTableSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::partitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::partitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::partitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: (($obj: PartitionTableSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: PartitionTableSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: PartitionTableSkeleton_ConstructProps)
    _init (config?: PartitionTableSkeleton_ConstructProps): void
    static new(): PartitionTableSkeleton
    static $gtype: GObject.Type
}
export interface PhysicalVolumeProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class PhysicalVolumeProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.PhysicalVolume */
    freeSize: number
    size: number
    volumeGroup: string
    /* Fields of UDisks.PhysicalVolumeProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.PhysicalVolume */
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: PhysicalVolumeProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: PhysicalVolumeProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: PhysicalVolumeProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: PhysicalVolumeProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: PhysicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: PhysicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: PhysicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: PhysicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: PhysicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: PhysicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: PhysicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: PhysicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::free-size", callback: (($obj: PhysicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::free-size", callback: (($obj: PhysicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::free-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::free-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::free-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: PhysicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: PhysicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::volume-group", callback: (($obj: PhysicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::volume-group", callback: (($obj: PhysicalVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: PhysicalVolumeProxy_ConstructProps)
    _init (config?: PhysicalVolumeProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): PhysicalVolumeProxy
    static newForBusFinish(res: Gio.AsyncResult): PhysicalVolumeProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): PhysicalVolumeProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): PhysicalVolumeProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface PhysicalVolumeSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class PhysicalVolumeSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.PhysicalVolume */
    freeSize: number
    size: number
    volumeGroup: string
    /* Fields of UDisks.PhysicalVolumeSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.PhysicalVolume */
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: PhysicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: PhysicalVolumeSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: PhysicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: PhysicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: PhysicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: PhysicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::free-size", callback: (($obj: PhysicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::free-size", callback: (($obj: PhysicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::free-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::free-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::free-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: PhysicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: PhysicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::volume-group", callback: (($obj: PhysicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::volume-group", callback: (($obj: PhysicalVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::volume-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: PhysicalVolumeSkeleton_ConstructProps)
    _init (config?: PhysicalVolumeSkeleton_ConstructProps): void
    static new(): PhysicalVolumeSkeleton
    static $gtype: GObject.Type
}
export interface SwapspaceProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class SwapspaceProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.Swapspace */
    active: boolean
    /* Fields of UDisks.SwapspaceProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.Swapspace */
    callSetLabel(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetLabelFinish(res: Gio.AsyncResult): boolean
    callSetLabelSync(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callStart(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStartFinish(res: Gio.AsyncResult): boolean
    callStartSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callStop(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStopFinish(res: Gio.AsyncResult): boolean
    callStopSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeSetLabel(invocation: Gio.DBusMethodInvocation): void
    completeStart(invocation: Gio.DBusMethodInvocation): void
    completeStop(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: SwapspaceProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: SwapspaceProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: SwapspaceProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: SwapspaceProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SwapspaceProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SwapspaceProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Swapspace */
    connect(sigName: "handle-set-label", callback: (($obj: SwapspaceProxy, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-label", callback: (($obj: SwapspaceProxy, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-label", invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-start", callback: (($obj: SwapspaceProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-start", callback: (($obj: SwapspaceProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-start", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-stop", callback: (($obj: SwapspaceProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-stop", callback: (($obj: SwapspaceProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-stop", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: SwapspaceProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: SwapspaceProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: SwapspaceProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: SwapspaceProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: SwapspaceProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: SwapspaceProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active", callback: (($obj: SwapspaceProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active", callback: (($obj: SwapspaceProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SwapspaceProxy_ConstructProps)
    _init (config?: SwapspaceProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): SwapspaceProxy
    static newForBusFinish(res: Gio.AsyncResult): SwapspaceProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): SwapspaceProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): SwapspaceProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface SwapspaceSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class SwapspaceSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.Swapspace */
    active: boolean
    /* Fields of UDisks.SwapspaceSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.Swapspace */
    callSetLabel(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetLabelFinish(res: Gio.AsyncResult): boolean
    callSetLabelSync(argLabel: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callStart(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStartFinish(res: Gio.AsyncResult): boolean
    callStartSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callStop(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStopFinish(res: Gio.AsyncResult): boolean
    callStopSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeSetLabel(invocation: Gio.DBusMethodInvocation): void
    completeStart(invocation: Gio.DBusMethodInvocation): void
    completeStop(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: SwapspaceSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: SwapspaceSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: SwapspaceSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SwapspaceSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.Swapspace */
    connect(sigName: "handle-set-label", callback: (($obj: SwapspaceSkeleton, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-set-label", callback: (($obj: SwapspaceSkeleton, invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-set-label", invocation: Gio.DBusMethodInvocation, argLabel: string, argOptions: GLib.Variant): void
    on(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-set-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-start", callback: (($obj: SwapspaceSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-start", callback: (($obj: SwapspaceSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-start", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-stop", callback: (($obj: SwapspaceSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-stop", callback: (($obj: SwapspaceSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-stop", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: SwapspaceSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: SwapspaceSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active", callback: (($obj: SwapspaceSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active", callback: (($obj: SwapspaceSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SwapspaceSkeleton_ConstructProps)
    _init (config?: SwapspaceSkeleton_ConstructProps): void
    static new(): SwapspaceSkeleton
    static $gtype: GObject.Type
}
export interface VDOVolumeProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class VDOVolumeProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.VDOVolume */
    compression: boolean
    compressionState: string
    deduplication: boolean
    indexState: string
    operatingMode: string
    usedSize: number
    vdoPool: string
    /* Fields of UDisks.VDOVolumeProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.VDOVolume */
    callEnableCompression(argEnable: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableCompressionFinish(res: Gio.AsyncResult): boolean
    callEnableCompressionSync(argEnable: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callEnableDeduplication(argEnable: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableDeduplicationFinish(res: Gio.AsyncResult): boolean
    callEnableDeduplicationSync(argEnable: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callGetStatistics(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetStatisticsFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outStats */ GLib.Variant | null ]
    callGetStatisticsSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outStats */ GLib.Variant | null ]
    callResizeLogical(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeLogicalFinish(res: Gio.AsyncResult): boolean
    callResizeLogicalSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callResizePhysical(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizePhysicalFinish(res: Gio.AsyncResult): boolean
    callResizePhysicalSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeEnableCompression(invocation: Gio.DBusMethodInvocation): void
    completeEnableDeduplication(invocation: Gio.DBusMethodInvocation): void
    completeGetStatistics(invocation: Gio.DBusMethodInvocation, stats: GLib.Variant): void
    completeResizeLogical(invocation: Gio.DBusMethodInvocation): void
    completeResizePhysical(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: VDOVolumeProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: VDOVolumeProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: VDOVolumeProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: VDOVolumeProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.VDOVolume */
    connect(sigName: "handle-enable-compression", callback: (($obj: VDOVolumeProxy, invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-enable-compression", callback: (($obj: VDOVolumeProxy, invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-enable-compression", invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-enable-compression", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-enable-compression", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-enable-compression", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-enable-deduplication", callback: (($obj: VDOVolumeProxy, invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-enable-deduplication", callback: (($obj: VDOVolumeProxy, invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-enable-deduplication", invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-enable-deduplication", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-enable-deduplication", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-enable-deduplication", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-get-statistics", callback: (($obj: VDOVolumeProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-get-statistics", callback: (($obj: VDOVolumeProxy, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-get-statistics", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-get-statistics", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-get-statistics", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-get-statistics", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize-logical", callback: (($obj: VDOVolumeProxy, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize-logical", callback: (($obj: VDOVolumeProxy, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize-logical", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize-logical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize-logical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize-logical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize-physical", callback: (($obj: VDOVolumeProxy, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize-physical", callback: (($obj: VDOVolumeProxy, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize-physical", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize-physical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize-physical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize-physical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compression", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compression", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compression", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compression", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compression", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compression-state", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compression-state", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compression-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compression-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compression-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::deduplication", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::deduplication", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::deduplication", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::deduplication", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::deduplication", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::index-state", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::index-state", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::index-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::index-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::index-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operating-mode", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operating-mode", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operating-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operating-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operating-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::used-size", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::used-size", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::used-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::used-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::used-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vdo-pool", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vdo-pool", callback: (($obj: VDOVolumeProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vdo-pool", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vdo-pool", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vdo-pool", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: VDOVolumeProxy_ConstructProps)
    _init (config?: VDOVolumeProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): VDOVolumeProxy
    static newForBusFinish(res: Gio.AsyncResult): VDOVolumeProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): VDOVolumeProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): VDOVolumeProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface VDOVolumeSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class VDOVolumeSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.VDOVolume */
    compression: boolean
    compressionState: string
    deduplication: boolean
    indexState: string
    operatingMode: string
    usedSize: number
    vdoPool: string
    /* Fields of UDisks.VDOVolumeSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.VDOVolume */
    callEnableCompression(argEnable: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableCompressionFinish(res: Gio.AsyncResult): boolean
    callEnableCompressionSync(argEnable: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callEnableDeduplication(argEnable: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableDeduplicationFinish(res: Gio.AsyncResult): boolean
    callEnableDeduplicationSync(argEnable: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callGetStatistics(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetStatisticsFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outStats */ GLib.Variant | null ]
    callGetStatisticsSync(argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outStats */ GLib.Variant | null ]
    callResizeLogical(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizeLogicalFinish(res: Gio.AsyncResult): boolean
    callResizeLogicalSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callResizePhysical(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResizePhysicalFinish(res: Gio.AsyncResult): boolean
    callResizePhysicalSync(argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeEnableCompression(invocation: Gio.DBusMethodInvocation): void
    completeEnableDeduplication(invocation: Gio.DBusMethodInvocation): void
    completeGetStatistics(invocation: Gio.DBusMethodInvocation, stats: GLib.Variant): void
    completeResizeLogical(invocation: Gio.DBusMethodInvocation): void
    completeResizePhysical(invocation: Gio.DBusMethodInvocation): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: VDOVolumeSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: VDOVolumeSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.VDOVolume */
    connect(sigName: "handle-enable-compression", callback: (($obj: VDOVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-enable-compression", callback: (($obj: VDOVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-enable-compression", invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-enable-compression", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-enable-compression", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-enable-compression", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-enable-deduplication", callback: (($obj: VDOVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-enable-deduplication", callback: (($obj: VDOVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-enable-deduplication", invocation: Gio.DBusMethodInvocation, argEnable: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-enable-deduplication", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-enable-deduplication", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-enable-deduplication", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-get-statistics", callback: (($obj: VDOVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-get-statistics", callback: (($obj: VDOVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-get-statistics", invocation: Gio.DBusMethodInvocation, argOptions: GLib.Variant): void
    on(sigName: "handle-get-statistics", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-get-statistics", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-get-statistics", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize-logical", callback: (($obj: VDOVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize-logical", callback: (($obj: VDOVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize-logical", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize-logical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize-logical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize-logical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-resize-physical", callback: (($obj: VDOVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-resize-physical", callback: (($obj: VDOVolumeSkeleton, invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-resize-physical", invocation: Gio.DBusMethodInvocation, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-resize-physical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-resize-physical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-resize-physical", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compression", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compression", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compression", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compression", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compression", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compression-state", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compression-state", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compression-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compression-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compression-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::deduplication", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::deduplication", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::deduplication", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::deduplication", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::deduplication", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::index-state", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::index-state", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::index-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::index-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::index-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operating-mode", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operating-mode", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operating-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operating-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operating-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::used-size", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::used-size", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::used-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::used-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::used-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vdo-pool", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vdo-pool", callback: (($obj: VDOVolumeSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vdo-pool", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vdo-pool", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vdo-pool", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: VDOVolumeSkeleton_ConstructProps)
    _init (config?: VDOVolumeSkeleton_ConstructProps): void
    static new(): VDOVolumeSkeleton
    static $gtype: GObject.Type
}
export interface VolumeGroupProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
export class VolumeGroupProxy {
    /* Properties of Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of UDisks.VolumeGroup */
    extentSize: number
    freeSize: number
    name: string
    needsPolling: boolean
    size: number
    uuid: string
    /* Fields of UDisks.VolumeGroupProxy */
    /* Fields of Gio.DBusProxy */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of UDisks.VolumeGroup */
    callAddDevice(argBlock: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAddDeviceFinish(res: Gio.AsyncResult): boolean
    callAddDeviceSync(argBlock: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCreatePlainVolume(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreatePlainVolumeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreatePlainVolumeSync(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateThinPoolVolume(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateThinPoolVolumeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateThinPoolVolumeSync(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateThinVolume(argName: string, argSize: number, argPool: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateThinVolumeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateThinVolumeSync(argName: string, argSize: number, argPool: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateVdoVolume(argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateVdoVolumeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateVdoVolumeSync(argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callDelete(argWipe: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argWipe: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callEmptyDevice(argBlock: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEmptyDeviceFinish(res: Gio.AsyncResult): boolean
    callEmptyDeviceSync(argBlock: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callPoll(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callPollFinish(res: Gio.AsyncResult): boolean
    callPollSync(cancellable?: Gio.Cancellable | null): boolean
    callRemoveDevice(argBlock: string, argWipe: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRemoveDeviceFinish(res: Gio.AsyncResult): boolean
    callRemoveDeviceSync(argBlock: string, argWipe: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRename(argNewName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRenameFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callRenameSync(argNewName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    completeAddDevice(invocation: Gio.DBusMethodInvocation): void
    completeCreatePlainVolume(invocation: Gio.DBusMethodInvocation, result: string): void
    completeCreateThinPoolVolume(invocation: Gio.DBusMethodInvocation, result: string): void
    completeCreateThinVolume(invocation: Gio.DBusMethodInvocation, result: string): void
    completeCreateVdoVolume(invocation: Gio.DBusMethodInvocation, result: string): void
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeEmptyDevice(invocation: Gio.DBusMethodInvocation): void
    completePoll(invocation: Gio.DBusMethodInvocation): void
    completeRemoveDevice(invocation: Gio.DBusMethodInvocation): void
    completeRename(invocation: Gio.DBusMethodInvocation, result: string): void
    /* Virtual methods of Gio.DBusProxy */
    vfuncGPropertiesChanged?(changedProperties: GLib.Variant, invalidatedProperties: string): void
    vfuncGSignal?(senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: (($obj: VolumeGroupProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    connect_after(sigName: "g-properties-changed", callback: (($obj: VolumeGroupProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    on(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "g-signal", callback: (($obj: VolumeGroupProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    connect_after(sigName: "g-signal", callback: (($obj: VolumeGroupProxy, senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    on(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.VolumeGroup */
    connect(sigName: "handle-add-device", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-add-device", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-add-device", invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant): void
    on(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-plain-volume", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-plain-volume", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-plain-volume", invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-create-plain-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-plain-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-plain-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-thin-pool-volume", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-thin-pool-volume", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-thin-pool-volume", invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-create-thin-pool-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-thin-pool-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-thin-pool-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-thin-volume", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argPool: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-thin-volume", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argPool: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-thin-volume", invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argPool: string, argOptions: GLib.Variant): void
    on(sigName: "handle-create-thin-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-thin-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-thin-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-vdo-volume", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-vdo-volume", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-vdo-volume", invocation: Gio.DBusMethodInvocation, argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant): void
    on(sigName: "handle-create-vdo-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-vdo-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-vdo-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-delete", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argWipe: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-delete", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argWipe: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argWipe: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-empty-device", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-empty-device", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-empty-device", invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant): void
    on(sigName: "handle-empty-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-empty-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-empty-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-poll", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "handle-poll", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "handle-poll", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "handle-poll", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-poll", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-poll", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-remove-device", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argBlock: string, argWipe: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-remove-device", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argBlock: string, argWipe: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-remove-device", invocation: Gio.DBusMethodInvocation, argBlock: string, argWipe: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-rename", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-rename", callback: (($obj: VolumeGroupProxy, invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-rename", invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-default-timeout", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::extent-size", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::extent-size", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::extent-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::extent-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::extent-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::free-size", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::free-size", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::free-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::free-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::free-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::needs-polling", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::needs-polling", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::needs-polling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::needs-polling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::needs-polling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uuid", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: VolumeGroupProxy, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: VolumeGroupProxy_ConstructProps)
    _init (config?: VolumeGroupProxy_ConstructProps): void
    static newFinish(res: Gio.AsyncResult): VolumeGroupProxy
    static newForBusFinish(res: Gio.AsyncResult): VolumeGroupProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): VolumeGroupProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): VolumeGroupProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface VolumeGroupSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
export class VolumeGroupSkeleton {
    /* Properties of Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of UDisks.VolumeGroup */
    extentSize: number
    freeSize: number
    name: string
    needsPolling: boolean
    size: number
    uuid: string
    /* Fields of UDisks.VolumeGroupSkeleton */
    /* Fields of Gio.DBusInterfaceSkeleton */
    /* Fields of GObject.Object */
    gTypeInstance: GObject.TypeInstance
    /* Methods of Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: GObject.Closure, transformFrom: GObject.Closure): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: GObject.Value): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: GObject.Value[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: GObject.Value): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: GObject.Closure): void
    /* Methods of Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of UDisks.VolumeGroup */
    callAddDevice(argBlock: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAddDeviceFinish(res: Gio.AsyncResult): boolean
    callAddDeviceSync(argBlock: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callCreatePlainVolume(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreatePlainVolumeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreatePlainVolumeSync(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateThinPoolVolume(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateThinPoolVolumeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateThinPoolVolumeSync(argName: string, argSize: number, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateThinVolume(argName: string, argSize: number, argPool: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateThinVolumeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateThinVolumeSync(argName: string, argSize: number, argPool: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateVdoVolume(argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateVdoVolumeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callCreateVdoVolumeSync(argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    callDelete(argWipe: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argWipe: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callEmptyDevice(argBlock: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEmptyDeviceFinish(res: Gio.AsyncResult): boolean
    callEmptyDeviceSync(argBlock: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callPoll(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callPollFinish(res: Gio.AsyncResult): boolean
    callPollSync(cancellable?: Gio.Cancellable | null): boolean
    callRemoveDevice(argBlock: string, argWipe: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRemoveDeviceFinish(res: Gio.AsyncResult): boolean
    callRemoveDeviceSync(argBlock: string, argWipe: boolean, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRename(argNewName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRenameFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string | null ]
    callRenameSync(argNewName: string, argOptions: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string | null ]
    completeAddDevice(invocation: Gio.DBusMethodInvocation): void
    completeCreatePlainVolume(invocation: Gio.DBusMethodInvocation, result: string): void
    completeCreateThinPoolVolume(invocation: Gio.DBusMethodInvocation, result: string): void
    completeCreateThinVolume(invocation: Gio.DBusMethodInvocation, result: string): void
    completeCreateVdoVolume(invocation: Gio.DBusMethodInvocation, result: string): void
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeEmptyDevice(invocation: Gio.DBusMethodInvocation): void
    completePoll(invocation: Gio.DBusMethodInvocation): void
    completeRemoveDevice(invocation: Gio.DBusMethodInvocation): void
    completeRename(invocation: Gio.DBusMethodInvocation, result: string): void
    /* Virtual methods of Gio.DBusInterfaceSkeleton */
    vfuncFlush?(): void
    vfuncGAuthorizeMethod?(invocation: Gio.DBusMethodInvocation): boolean
    vfuncGetInfo?(): Gio.DBusInterfaceInfo
    vfuncGetProperties?(): GLib.Variant
    /* Virtual methods of GObject.Object */
    vfuncConstructed?(): void
    vfuncDispatchPropertiesChanged?(nPspecs: number, pspecs: GObject.ParamSpec): void
    vfuncDispose?(): void
    vfuncFinalize?(): void
    vfuncGetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    vfuncNotify?(pspec: GObject.ParamSpec): void
    vfuncSetProperty?(propertyId: number, value: GObject.Value, pspec: GObject.ParamSpec): void
    /* Signals of Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "g-authorize-method", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of GObject.Object */
    connect(sigName: "notify", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    on(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify", callback: (...args: any[]) => void): NodeJS.EventEmitter
    /* Signals of UDisks.VolumeGroup */
    connect(sigName: "handle-add-device", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-add-device", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-add-device", invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant): void
    on(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-add-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-plain-volume", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-plain-volume", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-plain-volume", invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-create-plain-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-plain-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-plain-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-thin-pool-volume", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-thin-pool-volume", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-thin-pool-volume", invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argOptions: GLib.Variant): void
    on(sigName: "handle-create-thin-pool-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-thin-pool-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-thin-pool-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-thin-volume", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argPool: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-thin-volume", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argPool: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-thin-volume", invocation: Gio.DBusMethodInvocation, argName: string, argSize: number, argPool: string, argOptions: GLib.Variant): void
    on(sigName: "handle-create-thin-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-thin-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-thin-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-create-vdo-volume", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-create-vdo-volume", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-create-vdo-volume", invocation: Gio.DBusMethodInvocation, argLvName: string, argPoolName: string, argDataSize: number, argVirtualSize: number, argIndexMemory: number, argCompression: boolean, argDeduplication: boolean, argWritePolicy: string, argOptions: GLib.Variant): void
    on(sigName: "handle-create-vdo-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-create-vdo-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-create-vdo-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-delete", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argWipe: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-delete", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argWipe: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argWipe: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-empty-device", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-empty-device", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-empty-device", invocation: Gio.DBusMethodInvocation, argBlock: string, argOptions: GLib.Variant): void
    on(sigName: "handle-empty-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-empty-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-empty-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-poll", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    connect_after(sigName: "handle-poll", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    emit(sigName: "handle-poll", invocation: Gio.DBusMethodInvocation): void
    on(sigName: "handle-poll", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-poll", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-poll", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-remove-device", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argBlock: string, argWipe: boolean, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-remove-device", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argBlock: string, argWipe: boolean, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-remove-device", invocation: Gio.DBusMethodInvocation, argBlock: string, argWipe: boolean, argOptions: GLib.Variant): void
    on(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-remove-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "handle-rename", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant) => boolean)): number
    connect_after(sigName: "handle-rename", callback: (($obj: VolumeGroupSkeleton, invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant) => boolean)): number
    emit(sigName: "handle-rename", invocation: Gio.DBusMethodInvocation, argNewName: string, argOptions: GLib.Variant): void
    on(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "handle-rename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-flags", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::extent-size", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::extent-size", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::extent-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::extent-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::extent-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::free-size", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::free-size", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::free-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::free-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::free-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::needs-polling", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::needs-polling", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::needs-polling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::needs-polling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::needs-polling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uuid", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uuid", callback: (($obj: VolumeGroupSkeleton, pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uuid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: VolumeGroupSkeleton_ConstructProps)
    _init (config?: VolumeGroupSkeleton_ConstructProps): void
    static new(): VolumeGroupSkeleton
    static $gtype: GObject.Type
}
export abstract class BlockBcacheIface {
    /* Fields of UDisks.BlockBcacheIface */
    parentIface: GObject.TypeInterface
    getBlockSize: any
    getBypassHits: any
    getBypassMisses: any
    getCacheSize: any
    getCacheUsed: any
    getHits: any
    getMisses: any
    getMode: any
    getState: any
    handleBcacheDestroy: any
    handleSetMode: any
    static name: string
}
export abstract class BlockBcacheProxyClass {
    /* Fields of UDisks.BlockBcacheProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class BlockBcacheProxyPrivate {
    static name: string
}
export abstract class BlockBcacheSkeletonClass {
    /* Fields of UDisks.BlockBcacheSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class BlockBcacheSkeletonPrivate {
    static name: string
}
export abstract class BlockIface {
    /* Fields of UDisks.BlockIface */
    parentIface: GObject.TypeInterface
    handleAddConfigurationItem: any
    handleFormat: any
    handleGetSecretConfiguration: any
    handleOpenForBackup: any
    handleOpenForBenchmark: any
    handleOpenForRestore: any
    handleRemoveConfigurationItem: any
    handleRescan: any
    handleUpdateConfigurationItem: any
    getConfiguration: any
    getCryptoBackingDevice: any
    getDevice: any
    getDeviceNumber: any
    getDrive: any
    getHintAuto: any
    getHintIconName: any
    getHintIgnore: any
    getHintName: any
    getHintPartitionable: any
    getHintSystem: any
    getIdLabel: any
    getIdType: any
    getIdUsage: any
    getIdUuid: any
    getIdVersion: any
    getPreferredDevice: any
    getReadOnly: any
    getSize: any
    getSymlinks: any
    getUserspaceMountOptions: any
    getHintSymbolicIconName: any
    getId: any
    getMdraid: any
    getMdraidMember: any
    handleOpenDevice: any
    static name: string
}
export abstract class BlockLVM2Iface {
    /* Fields of UDisks.BlockLVM2Iface */
    parentIface: GObject.TypeInterface
    getLogicalVolume: any
    static name: string
}
export abstract class BlockLVM2ProxyClass {
    /* Fields of UDisks.BlockLVM2ProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class BlockLVM2ProxyPrivate {
    static name: string
}
export abstract class BlockLVM2SkeletonClass {
    /* Fields of UDisks.BlockLVM2SkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class BlockLVM2SkeletonPrivate {
    static name: string
}
export abstract class BlockProxyClass {
    /* Fields of UDisks.BlockProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class BlockProxyPrivate {
    static name: string
}
export abstract class BlockSkeletonClass {
    /* Fields of UDisks.BlockSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class BlockSkeletonPrivate {
    static name: string
}
export abstract class BlockZRAMIface {
    /* Fields of UDisks.BlockZRAMIface */
    parentIface: GObject.TypeInterface
    handleActivate: any
    handleActivateLabeled: any
    handleDeactivate: any
    handleRefresh: any
    getActive: any
    getCompAlgorithm: any
    getComprDataSize: any
    getDisksize: any
    getInvalidIo: any
    getMaxCompStreams: any
    getMemUsedTotal: any
    getNumReads: any
    getNumWrites: any
    getOrigDataSize: any
    getZeroPages: any
    static name: string
}
export abstract class BlockZRAMProxyClass {
    /* Fields of UDisks.BlockZRAMProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class BlockZRAMProxyPrivate {
    static name: string
}
export abstract class BlockZRAMSkeletonClass {
    /* Fields of UDisks.BlockZRAMSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class BlockZRAMSkeletonPrivate {
    static name: string
}
export abstract class DriveAtaIface {
    /* Fields of UDisks.DriveAtaIface */
    parentIface: GObject.TypeInterface
    handlePmGetState: any
    handlePmStandby: any
    handlePmWakeup: any
    handleSecurityEraseUnit: any
    handleSmartGetAttributes: any
    handleSmartSelftestAbort: any
    handleSmartSelftestStart: any
    handleSmartUpdate: any
    getAamEnabled: any
    getAamSupported: any
    getAamVendorRecommendedValue: any
    getApmEnabled: any
    getApmSupported: any
    getPmEnabled: any
    getPmSupported: any
    getSecurityEnhancedEraseUnitMinutes: any
    getSecurityEraseUnitMinutes: any
    getSecurityFrozen: any
    getSmartEnabled: any
    getSmartFailing: any
    getSmartNumAttributesFailedInThePast: any
    getSmartNumAttributesFailing: any
    getSmartNumBadSectors: any
    getSmartPowerOnSeconds: any
    getSmartSelftestPercentRemaining: any
    getSmartSelftestStatus: any
    getSmartSupported: any
    getSmartTemperature: any
    getSmartUpdated: any
    handleSmartSetEnabled: any
    getWriteCacheEnabled: any
    getWriteCacheSupported: any
    getReadLookaheadEnabled: any
    getReadLookaheadSupported: any
    static name: string
}
export abstract class DriveAtaProxyClass {
    /* Fields of UDisks.DriveAtaProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class DriveAtaProxyPrivate {
    static name: string
}
export abstract class DriveAtaSkeletonClass {
    /* Fields of UDisks.DriveAtaSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class DriveAtaSkeletonPrivate {
    static name: string
}
export abstract class DriveIface {
    /* Fields of UDisks.DriveIface */
    parentIface: GObject.TypeInterface
    handleEject: any
    handleSetConfiguration: any
    getConfiguration: any
    getConnectionBus: any
    getEjectable: any
    getId: any
    getMedia: any
    getMediaAvailable: any
    getMediaChangeDetected: any
    getMediaCompatibility: any
    getMediaRemovable: any
    getModel: any
    getOptical: any
    getOpticalBlank: any
    getOpticalNumAudioTracks: any
    getOpticalNumDataTracks: any
    getOpticalNumSessions: any
    getOpticalNumTracks: any
    getRemovable: any
    getRevision: any
    getRotationRate: any
    getSeat: any
    getSerial: any
    getSize: any
    getSortKey: any
    getTimeDetected: any
    getTimeMediaDetected: any
    getVendor: any
    getWwn: any
    handlePowerOff: any
    getCanPowerOff: any
    getSiblingId: any
    static name: string
}
export abstract class DriveProxyClass {
    /* Fields of UDisks.DriveProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class DriveProxyPrivate {
    static name: string
}
export abstract class DriveSkeletonClass {
    /* Fields of UDisks.DriveSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class DriveSkeletonPrivate {
    static name: string
}
export abstract class EncryptedIface {
    /* Fields of UDisks.EncryptedIface */
    parentIface: GObject.TypeInterface
    handleChangePassphrase: any
    handleLock: any
    handleUnlock: any
    getChildConfiguration: any
    getCleartextDevice: any
    getHintEncryptionType: any
    getMetadataSize: any
    handleResize: any
    static name: string
}
export abstract class EncryptedProxyClass {
    /* Fields of UDisks.EncryptedProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class EncryptedProxyPrivate {
    static name: string
}
export abstract class EncryptedSkeletonClass {
    /* Fields of UDisks.EncryptedSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class EncryptedSkeletonPrivate {
    static name: string
}
export abstract class FilesystemBTRFSIface {
    /* Fields of UDisks.FilesystemBTRFSIface */
    parentIface: GObject.TypeInterface
    handleCreateSnapshot: any
    handleCreateSubvolume: any
    handleGetSubvolumes: any
    handleRemoveSubvolume: any
    handleSetLabel: any
    getLabel: any
    getNumDevices: any
    getUsed: any
    getUuid: any
    handleAddDevice: any
    handleRemoveDevice: any
    handleRepair: any
    handleResize: any
    static name: string
}
export abstract class FilesystemBTRFSProxyClass {
    /* Fields of UDisks.FilesystemBTRFSProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class FilesystemBTRFSProxyPrivate {
    static name: string
}
export abstract class FilesystemBTRFSSkeletonClass {
    /* Fields of UDisks.FilesystemBTRFSSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class FilesystemBTRFSSkeletonPrivate {
    static name: string
}
export abstract class FilesystemIface {
    /* Fields of UDisks.FilesystemIface */
    parentIface: GObject.TypeInterface
    handleMount: any
    handleSetLabel: any
    handleUnmount: any
    getMountPoints: any
    getSize: any
    handleCheck: any
    handleRepair: any
    handleResize: any
    handleTakeOwnership: any
    static name: string
}
export abstract class FilesystemProxyClass {
    /* Fields of UDisks.FilesystemProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class FilesystemProxyPrivate {
    static name: string
}
export abstract class FilesystemSkeletonClass {
    /* Fields of UDisks.FilesystemSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class FilesystemSkeletonPrivate {
    static name: string
}
export abstract class JobIface {
    /* Fields of UDisks.JobIface */
    parentIface: GObject.TypeInterface
    handleCancel: any
    getCancelable: any
    getExpectedEndTime: any
    getObjects: any
    getOperation: any
    getProgress: any
    getProgressValid: any
    getStartTime: any
    getStartedByUid: any
    completed: any
    getBytes: any
    getRate: any
    static name: string
}
export abstract class JobProxyClass {
    /* Fields of UDisks.JobProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class JobProxyPrivate {
    static name: string
}
export abstract class JobSkeletonClass {
    /* Fields of UDisks.JobSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class JobSkeletonPrivate {
    static name: string
}
export abstract class LogicalVolumeIface {
    /* Fields of UDisks.LogicalVolumeIface */
    parentIface: GObject.TypeInterface
    handleActivate: any
    handleCreateSnapshot: any
    handleDeactivate: any
    handleDelete: any
    handleRename: any
    handleResize: any
    getActive: any
    getChildConfiguration: any
    getDataAllocatedRatio: any
    getMetadataAllocatedRatio: any
    getName: any
    getOrigin: any
    getSize: any
    getThinPool: any
    getType: any
    getUuid: any
    getVolumeGroup: any
    handleCacheAttach: any
    handleCacheSplit: any
    handleCacheDetach: any
    getBlockDevice: any
    static name: string
}
export abstract class LogicalVolumeProxyClass {
    /* Fields of UDisks.LogicalVolumeProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class LogicalVolumeProxyPrivate {
    static name: string
}
export abstract class LogicalVolumeSkeletonClass {
    /* Fields of UDisks.LogicalVolumeSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class LogicalVolumeSkeletonPrivate {
    static name: string
}
export abstract class LoopIface {
    /* Fields of UDisks.LoopIface */
    parentIface: GObject.TypeInterface
    handleDelete: any
    handleSetAutoclear: any
    getAutoclear: any
    getBackingFile: any
    getSetupByUid: any
    static name: string
}
export abstract class LoopProxyClass {
    /* Fields of UDisks.LoopProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class LoopProxyPrivate {
    static name: string
}
export abstract class LoopSkeletonClass {
    /* Fields of UDisks.LoopSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class LoopSkeletonPrivate {
    static name: string
}
export abstract class MDRaidIface {
    /* Fields of UDisks.MDRaidIface */
    parentIface: GObject.TypeInterface
    handleAddDevice: any
    handleDelete: any
    handleRemoveDevice: any
    handleRequestSyncAction: any
    handleSetBitmapLocation: any
    handleStart: any
    handleStop: any
    getActiveDevices: any
    getBitmapLocation: any
    getChildConfiguration: any
    getChunkSize: any
    getDegraded: any
    getLevel: any
    getName: any
    getNumDevices: any
    getRunning: any
    getSize: any
    getSyncAction: any
    getSyncCompleted: any
    getSyncRate: any
    getSyncRemainingTime: any
    getUuid: any
    static name: string
}
export abstract class MDRaidProxyClass {
    /* Fields of UDisks.MDRaidProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class MDRaidProxyPrivate {
    static name: string
}
export abstract class MDRaidSkeletonClass {
    /* Fields of UDisks.MDRaidSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class MDRaidSkeletonPrivate {
    static name: string
}
export abstract class ManagerBTRFSIface {
    /* Fields of UDisks.ManagerBTRFSIface */
    parentIface: GObject.TypeInterface
    handleCreateVolume: any
    static name: string
}
export abstract class ManagerBTRFSProxyClass {
    /* Fields of UDisks.ManagerBTRFSProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class ManagerBTRFSProxyPrivate {
    static name: string
}
export abstract class ManagerBTRFSSkeletonClass {
    /* Fields of UDisks.ManagerBTRFSSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class ManagerBTRFSSkeletonPrivate {
    static name: string
}
export abstract class ManagerBcacheIface {
    /* Fields of UDisks.ManagerBcacheIface */
    parentIface: GObject.TypeInterface
    handleBcacheCreate: any
    static name: string
}
export abstract class ManagerBcacheProxyClass {
    /* Fields of UDisks.ManagerBcacheProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class ManagerBcacheProxyPrivate {
    static name: string
}
export abstract class ManagerBcacheSkeletonClass {
    /* Fields of UDisks.ManagerBcacheSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class ManagerBcacheSkeletonPrivate {
    static name: string
}
export abstract class ManagerIface {
    /* Fields of UDisks.ManagerIface */
    parentIface: GObject.TypeInterface
    handleEnableModules: any
    handleLoopSetup: any
    getDefaultEncryptionType: any
    getSupportedEncryptionTypes: any
    getSupportedFilesystems: any
    getVersion: any
    handleMdraidCreate: any
    handleCanCheck: any
    handleCanFormat: any
    handleCanRepair: any
    handleCanResize: any
    handleGetBlockDevices: any
    handleResolveDevice: any
    handleEnableModule: any
    static name: string
}
export abstract class ManagerLVM2Iface {
    /* Fields of UDisks.ManagerLVM2Iface */
    parentIface: GObject.TypeInterface
    handleVolumeGroupCreate: any
    static name: string
}
export abstract class ManagerLVM2ProxyClass {
    /* Fields of UDisks.ManagerLVM2ProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class ManagerLVM2ProxyPrivate {
    static name: string
}
export abstract class ManagerLVM2SkeletonClass {
    /* Fields of UDisks.ManagerLVM2SkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class ManagerLVM2SkeletonPrivate {
    static name: string
}
export abstract class ManagerProxyClass {
    /* Fields of UDisks.ManagerProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class ManagerProxyPrivate {
    static name: string
}
export abstract class ManagerSkeletonClass {
    /* Fields of UDisks.ManagerSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class ManagerSkeletonPrivate {
    static name: string
}
export abstract class ManagerZRAMIface {
    /* Fields of UDisks.ManagerZRAMIface */
    parentIface: GObject.TypeInterface
    handleCreateDevices: any
    handleDestroyDevices: any
    static name: string
}
export abstract class ManagerZRAMProxyClass {
    /* Fields of UDisks.ManagerZRAMProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class ManagerZRAMProxyPrivate {
    static name: string
}
export abstract class ManagerZRAMSkeletonClass {
    /* Fields of UDisks.ManagerZRAMSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class ManagerZRAMSkeletonPrivate {
    static name: string
}
export abstract class ObjectIface {
    /* Fields of UDisks.ObjectIface */
    parentIface: GObject.TypeInterface
    static name: string
}
export abstract class ObjectManagerClientClass {
    /* Fields of UDisks.ObjectManagerClientClass */
    parentClass: Gio.DBusObjectManagerClientClass
    static name: string
}
export class ObjectManagerClientPrivate {
    static name: string
}
export abstract class ObjectProxyClass {
    /* Fields of UDisks.ObjectProxyClass */
    parentClass: Gio.DBusObjectProxyClass
    static name: string
}
export class ObjectProxyPrivate {
    static name: string
}
export abstract class ObjectSkeletonClass {
    /* Fields of UDisks.ObjectSkeletonClass */
    parentClass: Gio.DBusObjectSkeletonClass
    static name: string
}
export class ObjectSkeletonPrivate {
    static name: string
}
export abstract class PartitionIface {
    /* Fields of UDisks.PartitionIface */
    parentIface: GObject.TypeInterface
    handleDelete: any
    handleResize: any
    handleSetFlags: any
    handleSetName: any
    handleSetType: any
    getFlags: any
    getIsContained: any
    getIsContainer: any
    getName: any
    getNumber: any
    getOffset: any
    getSize: any
    getTable: any
    getType: any
    getUuid: any
    static name: string
}
export abstract class PartitionProxyClass {
    /* Fields of UDisks.PartitionProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class PartitionProxyPrivate {
    static name: string
}
export abstract class PartitionSkeletonClass {
    /* Fields of UDisks.PartitionSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class PartitionSkeletonPrivate {
    static name: string
}
export abstract class PartitionTableIface {
    /* Fields of UDisks.PartitionTableIface */
    parentIface: GObject.TypeInterface
    handleCreatePartition: any
    handleCreatePartitionAndFormat: any
    getPartitions: any
    getType: any
    static name: string
}
export abstract class PartitionTableProxyClass {
    /* Fields of UDisks.PartitionTableProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class PartitionTableProxyPrivate {
    static name: string
}
export abstract class PartitionTableSkeletonClass {
    /* Fields of UDisks.PartitionTableSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class PartitionTableSkeletonPrivate {
    static name: string
}
export class PartitionTypeInfo {
    /* Fields of UDisks.PartitionTypeInfo */
    tableType: string
    tableSubtype: string
    type: string
    flags: PartitionTypeInfoFlags
    /* Methods of UDisks.PartitionTypeInfo */
    free(): void
    static name: string
}
export abstract class PhysicalVolumeIface {
    /* Fields of UDisks.PhysicalVolumeIface */
    parentIface: GObject.TypeInterface
    getFreeSize: any
    getSize: any
    getVolumeGroup: any
    static name: string
}
export abstract class PhysicalVolumeProxyClass {
    /* Fields of UDisks.PhysicalVolumeProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class PhysicalVolumeProxyPrivate {
    static name: string
}
export abstract class PhysicalVolumeSkeletonClass {
    /* Fields of UDisks.PhysicalVolumeSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class PhysicalVolumeSkeletonPrivate {
    static name: string
}
export abstract class SwapspaceIface {
    /* Fields of UDisks.SwapspaceIface */
    parentIface: GObject.TypeInterface
    handleSetLabel: any
    handleStart: any
    handleStop: any
    getActive: any
    static name: string
}
export abstract class SwapspaceProxyClass {
    /* Fields of UDisks.SwapspaceProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class SwapspaceProxyPrivate {
    static name: string
}
export abstract class SwapspaceSkeletonClass {
    /* Fields of UDisks.SwapspaceSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class SwapspaceSkeletonPrivate {
    static name: string
}
export abstract class VDOVolumeIface {
    /* Fields of UDisks.VDOVolumeIface */
    parentIface: GObject.TypeInterface
    handleEnableCompression: any
    handleEnableDeduplication: any
    handleGetStatistics: any
    handleResizeLogical: any
    handleResizePhysical: any
    getCompression: any
    getCompressionState: any
    getDeduplication: any
    getIndexState: any
    getOperatingMode: any
    getUsedSize: any
    getVdoPool: any
    static name: string
}
export abstract class VDOVolumeProxyClass {
    /* Fields of UDisks.VDOVolumeProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class VDOVolumeProxyPrivate {
    static name: string
}
export abstract class VDOVolumeSkeletonClass {
    /* Fields of UDisks.VDOVolumeSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class VDOVolumeSkeletonPrivate {
    static name: string
}
export abstract class VolumeGroupIface {
    /* Fields of UDisks.VolumeGroupIface */
    parentIface: GObject.TypeInterface
    handleAddDevice: any
    handleCreatePlainVolume: any
    handleCreateThinPoolVolume: any
    handleCreateThinVolume: any
    handleCreateVdoVolume: any
    handleDelete: any
    handleEmptyDevice: any
    handlePoll: any
    handleRemoveDevice: any
    handleRename: any
    getExtentSize: any
    getFreeSize: any
    getName: any
    getNeedsPolling: any
    getSize: any
    getUuid: any
    static name: string
}
export abstract class VolumeGroupProxyClass {
    /* Fields of UDisks.VolumeGroupProxyClass */
    parentClass: Gio.DBusProxyClass
    static name: string
}
export class VolumeGroupProxyPrivate {
    static name: string
}
export abstract class VolumeGroupSkeletonClass {
    /* Fields of UDisks.VolumeGroupSkeletonClass */
    parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
export class VolumeGroupSkeletonPrivate {
    static name: string
}
}